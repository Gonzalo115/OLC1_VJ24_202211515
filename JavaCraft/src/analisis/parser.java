
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionLista;
import instrucciones.AsignacionVC;
import instrucciones.AsignacionVector;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Else_;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;
import instrucciones.AppendLista;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;
import expresiones.AccesoVector;
import expresiones.RemoveLista;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\004\000\002\014\007\000\002\025\007\000\002" +
    "\025\011\000\002\025\007\000\002\025\011\000\002\030" +
    "\006\000\002\026\013\000\002\026\013\000\002\026\017" +
    "\000\002\026\017\000\002\004\005\000\002\004\003\000" +
    "\002\006\005\000\002\006\003\000\002\005\005\000\002" +
    "\031\011\000\002\031\014\000\002\027\015\000\002\037" +
    "\011\000\002\040\011\000\002\015\005\000\002\016\005" +
    "\000\002\017\016\000\002\017\012\000\002\017\015\000" +
    "\002\017\011\000\002\012\004\000\002\012\003\000\002" +
    "\013\012\000\002\023\015\000\002\023\007\000\002\023" +
    "\014\000\002\010\004\000\002\010\003\000\002\011\010" +
    "\000\002\020\014\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\021\011\000\002\022\013\000\002" +
    "\032\004\000\002\033\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\006\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\006\000\002\036\011\000\002" +
    "\036\005\000\002\036\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\034\003\030\011\020\012\025\013\005\014" +
    "\015\022\006\023\041\024\031\030\016\032\036\033\010" +
    "\034\021\035\040\001\002\000\040\002\ufffe\003\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\030\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\046\ufffe\001" +
    "\002\000\004\036\u0118\001\002\000\004\066\u0108\001\002" +
    "\000\040\002\ufff0\003\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\046\ufff0\001\002\000\004\042\u0102\001" +
    "\002\000\040\002\ufff8\003\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\022\ufff8\023\ufff8\024\ufff8\030\ufff8\032\ufff8\033" +
    "\ufff8\034\ufff8\035\ufff8\046\ufff8\001\002\000\040\002\ufffc" +
    "\003\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\030\ufffc\032\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\046\ufffc\001\002\000\040\002\ufff5\003\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\022\ufff5\023\ufff5\024\ufff5\030\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\035\ufff5\046\ufff5\001\002\000" +
    "\036\002\000\003\030\011\020\012\025\013\005\014\015" +
    "\022\006\023\041\024\031\030\016\032\036\033\010\034" +
    "\021\035\040\001\002\000\004\042\376\001\002\000\004" +
    "\042\346\001\002\000\040\002\uffed\003\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\022\uffed\023\uffed\024\uffed\030\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\046\uffed\001\002\000" +
    "\014\040\313\044\252\047\314\061\316\062\315\001\002" +
    "\000\004\045\303\001\002\000\040\002\uffef\003\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\022\uffef\023\uffef\024\uffef" +
    "\030\uffef\032\uffef\033\uffef\034\uffef\035\uffef\046\uffef\001" +
    "\002\000\040\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\022\ufff9\023\ufff9\024\ufff9\030\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\046\ufff9\001\002\000\040\002\ufffa" +
    "\003\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\030\ufffa\032\ufffa\033\ufffa\034\ufffa\035\ufffa" +
    "\046\ufffa\001\002\000\004\036\302\001\002\000\040\002" +
    "\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\030\ufff7\032\ufff7\033\ufff7\034\ufff7\035" +
    "\ufff7\046\ufff7\001\002\000\040\002\ufffb\003\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\022\ufffb\023\ufffb\024\ufffb\030" +
    "\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\046\ufffb\001\002" +
    "\000\006\036\300\046\301\001\002\000\004\011\255\001" +
    "\002\000\040\002\ufff2\003\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\022\ufff2\023\ufff2\024\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\046\ufff2\001\002\000\040\002\ufff6" +
    "\003\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\030\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6" +
    "\046\ufff6\001\002\000\040\002\ufff3\003\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\022\ufff3\023\ufff3\024\ufff3\030\ufff3" +
    "\032\ufff3\033\ufff3\034\ufff3\035\ufff3\046\ufff3\001\002\000" +
    "\040\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\030\ufffd\032\ufffd\033\ufffd\034" +
    "\ufffd\035\ufffd\046\ufffd\001\002\000\004\042\233\001\002" +
    "\000\040\002\ufff1\003\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\030\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\046\ufff1\001\002\000\024\004\061\005" +
    "\072\006\065\007\062\010\064\011\067\042\066\053\063" +
    "\072\070\001\002\000\004\011\046\001\002\000\040\002" +
    "\ufff4\003\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\030\ufff4\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\046\ufff4\001\002\000\004\002\045\001\002\000\040" +
    "\002\uffee\003\uffee\011\uffee\012\uffee\013\uffee\014\uffee\022" +
    "\uffee\023\uffee\024\uffee\030\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\046\uffee\001\002\000\004\002\001\001\002\000" +
    "\004\037\047\001\002\000\014\015\055\016\050\017\053" +
    "\020\054\021\052\001\002\000\012\036\uffbe\043\uffbe\044" +
    "\uffbe\047\uffbe\001\002\000\010\036\057\044\060\047\056" +
    "\001\002\000\012\036\uffbb\043\uffbb\044\uffbb\047\uffbb\001" +
    "\002\000\012\036\uffbd\043\uffbd\044\uffbd\047\uffbd\001\002" +
    "\000\012\036\uffbc\043\uffbc\044\uffbc\047\uffbc\001\002\000" +
    "\012\036\uffbf\043\uffbf\044\uffbf\047\uffbf\001\002\000\004" +
    "\050\154\001\002\000\040\002\uffe9\003\uffe9\011\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\022\uffe9\023\uffe9\024\uffe9\030\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\046\uffe9\001\002\000" +
    "\024\004\061\005\072\006\065\007\062\010\064\011\067" +
    "\042\066\053\063\072\070\001\002\000\054\036\uffa0\041" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\050\uffa0\052\uffa0\053\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\060\uffa0\064\uffa0\065\uffa0\066" +
    "\uffa0\067\uffa0\070\uffa0\071\uffa0\073\uffa0\074\uffa0\075\uffa0" +
    "\001\002\000\054\036\uffa1\041\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\050\uffa1\052\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\064\uffa1\065\uffa1\066\uffa1\067\uffa1\070\uffa1\071" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\001\002\000\024\004\061" +
    "\005\072\006\065\007\062\010\064\011\067\042\066\053" +
    "\063\072\070\001\002\000\054\036\uff9e\041\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\050\uff9e\052\uff9e\053\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\060\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e" +
    "\070\uff9e\071\uff9e\073\uff9e\074\uff9e\075\uff9e\001\002\000" +
    "\054\036\uffa2\041\uffa2\043\uffa2\044\uffa2\045\uffa2\050\uffa2" +
    "\052\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\064" +
    "\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\001\002\000\036\004\061\005\072\006" +
    "\065\007\062\010\064\011\067\015\055\016\050\017\053" +
    "\020\054\021\052\042\066\053\063\072\070\001\002\000" +
    "\060\036\uff9d\040\134\041\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\047\133\050\uff9d\052\uff9d\053\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d" +
    "\071\uff9d\073\uff9d\074\uff9d\075\uff9d\001\002\000\024\004" +
    "\061\005\072\006\065\007\062\010\064\011\067\042\066" +
    "\053\063\072\070\001\002\000\042\036\104\052\102\053" +
    "\076\055\107\056\105\057\106\060\075\064\100\065\112" +
    "\066\077\067\110\070\103\071\101\073\111\074\073\075" +
    "\074\001\002\000\054\036\uff9f\041\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\050\uff9f\052\uff9f\053\uff9f\055\uff9f\056\uff9f\057" +
    "\uff9f\060\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f" +
    "\071\uff9f\073\uff9f\074\uff9f\075\uff9f\001\002\000\024\004" +
    "\061\005\072\006\065\007\062\010\064\011\067\042\066" +
    "\053\063\072\070\001\002\000\024\004\061\005\072\006" +
    "\065\007\062\010\064\011\067\042\066\053\063\072\070" +
    "\001\002\000\024\004\061\005\072\006\065\007\062\010" +
    "\064\011\067\042\066\053\063\072\070\001\002\000\024" +
    "\004\061\005\072\006\065\007\062\010\064\011\067\042" +
    "\066\053\063\072\070\001\002\000\024\004\061\005\072" +
    "\006\065\007\062\010\064\011\067\042\066\053\063\072" +
    "\070\001\002\000\024\004\061\005\072\006\065\007\062" +
    "\010\064\011\067\042\066\053\063\072\070\001\002\000" +
    "\024\004\061\005\072\006\065\007\062\010\064\011\067" +
    "\042\066\053\063\072\070\001\002\000\024\004\061\005" +
    "\072\006\065\007\062\010\064\011\067\042\066\053\063" +
    "\072\070\001\002\000\024\004\061\005\072\006\065\007" +
    "\062\010\064\011\067\042\066\053\063\072\070\001\002" +
    "\000\040\002\uffe8\003\uffe8\011\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\030\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\035\uffe8\046\uffe8\001\002\000\024\004\061\005" +
    "\072\006\065\007\062\010\064\011\067\042\066\053\063" +
    "\072\070\001\002\000\024\004\061\005\072\006\065\007" +
    "\062\010\064\011\067\042\066\053\063\072\070\001\002" +
    "\000\024\004\061\005\072\006\065\007\062\010\064\011" +
    "\067\042\066\053\063\072\070\001\002\000\024\004\061" +
    "\005\072\006\065\007\062\010\064\011\067\042\066\053" +
    "\063\072\070\001\002\000\024\004\061\005\072\006\065" +
    "\007\062\010\064\011\067\042\066\053\063\072\070\001" +
    "\002\000\024\004\061\005\072\006\065\007\062\010\064" +
    "\011\067\042\066\053\063\072\070\001\002\000\054\036" +
    "\uffac\041\uffac\043\uffac\044\uffac\045\uffac\050\uffac\052\102" +
    "\053\076\055\107\056\105\057\106\060\075\064\uffac\065" +
    "\uffac\066\uffac\067\uffac\070\uffac\071\uffac\073\uffac\074\uffac" +
    "\075\uffac\001\002\000\054\036\uffa4\041\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\050\uffa4\052\102\053\076\055\107\056\105" +
    "\057\106\060\075\064\100\065\112\066\077\067\110\070" +
    "\103\071\101\073\uffa4\074\073\075\074\001\002\000\054" +
    "\036\uffaa\041\uffaa\043\uffaa\044\uffaa\045\uffaa\050\uffaa\052" +
    "\102\053\076\055\107\056\105\057\106\060\075\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\073\uffaa\074" +
    "\uffaa\075\uffaa\001\002\000\054\036\uffb0\041\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\050\uffb0\052\uffb0\053\uffb0\055\uffb0\056" +
    "\uffb0\057\106\060\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002\000" +
    "\052\036\uffb3\041\uffb3\043\uffb3\044\uffb3\045\uffb3\050\uffb3" +
    "\052\uffb3\053\uffb3\055\uffb3\056\uffb3\060\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\070\uffb3\071\uffb3\073\uffb3\074\uffb3" +
    "\075\uffb3\001\002\000\054\036\uffb2\041\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\050\uffb2\052\uffb2\053\uffb2\055\uffb2\056\uffb2" +
    "\057\106\060\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070" +
    "\uffb2\071\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000\054" +
    "\036\uffa9\041\uffa9\043\uffa9\044\uffa9\045\uffa9\050\uffa9\052" +
    "\102\053\076\055\107\056\105\057\106\060\075\064\uffa9" +
    "\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\073\uffa9\074" +
    "\uffa9\075\uffa9\001\002\000\054\036\uffaf\041\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\050\uffaf\052\uffaf\053\uffaf\055\107\056" +
    "\105\057\106\060\075\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\071\uffaf\073\uffaf\074\uffaf\075\uffaf\001\002\000" +
    "\054\036\uffa8\041\uffa8\043\uffa8\044\uffa8\045\uffa8\050\uffa8" +
    "\052\102\053\076\055\107\056\105\057\106\060\075\064" +
    "\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8\073\uffa8" +
    "\074\uffa8\075\uffa8\001\002\000\054\036\uffad\041\uffad\043" +
    "\uffad\044\uffad\045\uffad\050\uffad\052\102\053\076\055\107" +
    "\056\105\057\106\060\075\064\uffad\065\uffad\066\uffad\067" +
    "\uffad\070\uffad\071\uffad\073\uffad\074\uffad\075\uffad\001\002" +
    "\000\054\036\uffab\041\uffab\043\uffab\044\uffab\045\uffab\050" +
    "\uffab\052\102\053\076\055\107\056\105\057\106\060\075" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\073" +
    "\uffab\074\uffab\075\uffab\001\002\000\054\036\uffae\041\uffae" +
    "\043\uffae\044\uffae\045\uffae\050\uffae\052\uffae\053\uffae\055" +
    "\107\056\105\057\106\060\075\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\070\uffae\071\uffae\073\uffae\074\uffae\075\uffae\001" +
    "\002\000\054\036\uffb1\041\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\050\uffb1\052\uffb1\053\uffb1\055\uffb1\056\uffb1\057\106\060" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\001\002\000\054\036\uffa5\041" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\050\uffa5\052\102\053\076" +
    "\055\107\056\105\057\106\060\075\064\100\065\112\066" +
    "\077\067\110\070\103\071\101\073\uffa5\074\uffa5\075\uffa5" +
    "\001\002\000\054\036\uffa6\041\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\050\uffa6\052\102\053\076\055\107\056\105\057\106" +
    "\060\075\064\100\065\112\066\077\067\110\070\103\071" +
    "\101\073\uffa6\074\uffa6\075\074\001\002\000\054\036\uffa7" +
    "\041\uffa7\043\uffa7\044\uffa7\045\uffa7\050\uffa7\052\102\053" +
    "\076\055\107\056\105\057\106\060\075\064\100\065\112" +
    "\066\077\067\110\070\103\071\101\073\uffa7\074\uffa7\075" +
    "\uffa7\001\002\000\024\004\061\005\072\006\065\007\062" +
    "\010\064\011\067\042\066\053\063\072\070\001\002\000" +
    "\004\027\135\001\002\000\004\042\136\001\002\000\024" +
    "\004\061\005\072\006\065\007\062\010\064\011\067\042" +
    "\066\053\063\072\070\001\002\000\042\043\140\052\102" +
    "\053\076\055\107\056\105\057\106\060\075\064\100\065" +
    "\112\066\077\067\110\070\103\071\101\073\111\074\073" +
    "\075\074\001\002\000\054\036\uff99\041\uff99\043\uff99\044" +
    "\uff99\045\uff99\050\uff99\052\uff99\053\uff99\055\uff99\056\uff99" +
    "\057\uff99\060\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070" +
    "\uff99\071\uff99\073\uff99\074\uff99\075\uff99\001\002\000\042" +
    "\050\142\052\102\053\076\055\107\056\105\057\106\060" +
    "\075\064\100\065\112\066\077\067\110\070\103\071\101" +
    "\073\111\074\073\075\074\001\002\000\056\036\uff9c\041" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\047\143\050\uff9c\052\uff9c" +
    "\053\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\001\002\000\024\004\061\005\072\006\065\007" +
    "\062\010\064\011\067\042\066\053\063\072\070\001\002" +
    "\000\042\050\145\052\102\053\076\055\107\056\105\057" +
    "\106\060\075\064\100\065\112\066\077\067\110\070\103" +
    "\071\101\073\111\074\073\075\074\001\002\000\054\036" +
    "\uff9b\041\uff9b\043\uff9b\044\uff9b\045\uff9b\050\uff9b\052\uff9b" +
    "\053\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\073\uff9b\074\uff9b" +
    "\075\uff9b\001\002\000\042\043\152\052\102\053\076\055" +
    "\107\056\105\057\106\060\075\064\100\065\112\066\077" +
    "\067\110\070\103\071\101\073\111\074\073\075\074\001" +
    "\002\000\004\043\150\001\002\000\024\004\061\005\072" +
    "\006\065\007\062\010\064\011\067\042\066\053\063\072" +
    "\070\001\002\000\054\036\uffa3\041\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\050\uffa3\052\102\053\076\055\107\056\105\057" +
    "\106\060\075\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\073\uffa3\074\uffa3\075\uffa3\001\002\000\054\036" +
    "\uff9a\041\uff9a\043\uff9a\044\uff9a\045\uff9a\050\uff9a\052\uff9a" +
    "\053\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\064\uff9a\065" +
    "\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\073\uff9a\074\uff9a" +
    "\075\uff9a\001\002\000\054\036\uffb4\041\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\050\uffb4\052\uffb4\053\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\060\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070" +
    "\uffb4\071\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000\006" +
    "\044\156\047\155\001\002\000\004\050\167\001\002\000" +
    "\004\047\157\001\002\000\024\004\061\005\072\006\065" +
    "\007\062\010\064\011\067\042\066\053\063\072\070\001" +
    "\002\000\004\036\161\001\002\000\040\002\uffe4\003\uffe4" +
    "\011\uffe4\012\uffe4\013\uffe4\014\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\046\uffe4" +
    "\001\002\000\006\041\164\050\165\001\002\000\044\041" +
    "\uffdf\050\uffdf\052\102\053\076\055\107\056\105\057\106" +
    "\060\075\064\100\065\112\066\077\067\110\070\103\071" +
    "\101\073\111\074\073\075\074\001\002\000\024\004\061" +
    "\005\072\006\065\007\062\010\064\011\067\042\066\053" +
    "\063\072\070\001\002\000\010\036\uffdc\041\uffdc\050\uffdc" +
    "\001\002\000\044\041\uffe0\050\uffe0\052\102\053\076\055" +
    "\107\056\105\057\106\060\075\064\100\065\112\066\077" +
    "\067\110\070\103\071\101\073\111\074\073\075\074\001" +
    "\002\000\004\044\170\001\002\000\004\047\171\001\002" +
    "\000\004\047\157\001\002\000\006\041\175\050\174\001" +
    "\002\000\006\041\uffdd\050\uffdd\001\002\000\004\036\177" +
    "\001\002\000\004\047\157\001\002\000\006\041\uffde\050" +
    "\uffde\001\002\000\040\002\uffe2\003\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\022\uffe2\023\uffe2\024\uffe2\030\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\046\uffe2\001\002\000\042" +
    "\045\201\052\102\053\076\055\107\056\105\057\106\060" +
    "\075\064\100\065\112\066\077\067\110\070\103\071\101" +
    "\073\111\074\073\075\074\001\002\000\026\004\061\005" +
    "\072\006\065\007\062\010\064\011\067\042\066\051\202" +
    "\053\063\072\070\001\002\000\004\044\225\001\002\000" +
    "\030\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\042\uffc9\046\uffc9\051\uffc9\053\uffc9\072\uffc9\001\002\000" +
    "\030\004\061\005\072\006\065\007\062\010\064\011\067" +
    "\042\066\046\215\051\214\053\063\072\070\001\002\000" +
    "\042\044\206\052\102\053\076\055\107\056\105\057\106" +
    "\060\075\064\100\065\112\066\077\067\110\070\103\071" +
    "\101\073\111\074\073\075\074\001\002\000\004\070\207" +
    "\001\002\000\004\045\210\001\002\000\034\003\030\011" +
    "\020\012\025\013\005\014\015\022\006\023\041\024\031" +
    "\030\016\032\036\033\010\034\021\035\040\001\002\000" +
    "\036\003\030\011\020\012\025\013\005\014\015\022\006" +
    "\023\041\024\031\030\016\032\036\033\010\034\021\035" +
    "\040\046\213\001\002\000\040\002\uffff\003\uffff\011\uffff" +
    "\012\uffff\013\uffff\014\uffff\022\uffff\023\uffff\024\uffff\030" +
    "\uffff\032\uffff\033\uffff\034\uffff\035\uffff\046\uffff\001\002" +
    "\000\030\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\042\uffc8\046\uffc8\051\uffc8\053\uffc8\072\uffc8\001\002" +
    "\000\004\044\217\001\002\000\040\002\uffcc\003\uffcc\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\030\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\046\uffcc\001" +
    "\002\000\030\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\042\uffca\046\uffca\051\uffca\053\uffca\072\uffca\001" +
    "\002\000\004\070\220\001\002\000\004\045\221\001\002" +
    "\000\034\003\030\011\020\012\025\013\005\014\015\022" +
    "\006\023\041\024\031\030\016\032\036\033\010\034\021" +
    "\035\040\001\002\000\036\003\030\011\020\012\025\013" +
    "\005\014\015\022\006\023\041\024\031\030\016\032\036" +
    "\033\010\034\021\035\040\046\223\001\002\000\004\046" +
    "\224\001\002\000\040\002\uffcd\003\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\022\uffcd\023\uffcd\024\uffcd\030\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\046\uffcd\001\002\000\004" +
    "\070\226\001\002\000\004\045\227\001\002\000\034\003" +
    "\030\011\020\012\025\013\005\014\015\022\006\023\041" +
    "\024\031\030\016\032\036\033\010\034\021\035\040\001" +
    "\002\000\036\003\030\011\020\012\025\013\005\014\015" +
    "\022\006\023\041\024\031\030\016\032\036\033\010\034" +
    "\021\035\040\046\231\001\002\000\004\046\232\001\002" +
    "\000\040\002\uffcb\003\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\030\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\046\uffcb\001\002\000\004\011\234\001" +
    "\002\000\004\044\252\001\002\000\024\004\061\005\072" +
    "\006\065\007\062\010\064\011\067\042\066\053\063\072" +
    "\070\001\002\000\042\036\237\052\102\053\076\055\107" +
    "\056\105\057\106\060\075\064\100\065\112\066\077\067" +
    "\110\070\103\071\101\073\111\074\073\075\074\001\002" +
    "\000\004\011\240\001\002\000\010\044\247\061\250\062" +
    "\246\001\002\000\004\043\242\001\002\000\004\045\243" +
    "\001\002\000\034\003\030\011\020\012\025\013\005\014" +
    "\015\022\006\023\041\024\031\030\016\032\036\033\010" +
    "\034\021\035\040\001\002\000\036\003\030\011\020\012" +
    "\025\013\005\014\015\022\006\023\041\024\031\030\016" +
    "\032\036\033\010\034\021\035\040\046\245\001\002\000" +
    "\040\002\uffc7\003\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\030\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\046\uffc7\001\002\000\004\043\uffc4\001\002" +
    "\000\024\004\061\005\072\006\065\007\062\010\064\011" +
    "\067\042\066\053\063\072\070\001\002\000\004\043\uffc5" +
    "\001\002\000\042\043\uffc6\052\102\053\076\055\107\056" +
    "\105\057\106\060\075\064\100\065\112\066\077\067\110" +
    "\070\103\071\101\073\111\074\073\075\074\001\002\000" +
    "\024\004\061\005\072\006\065\007\062\010\064\011\067" +
    "\042\066\053\063\072\070\001\002\000\042\036\254\052" +
    "\102\053\076\055\107\056\105\057\106\060\075\064\100" +
    "\065\112\066\077\067\110\070\103\071\101\073\111\074" +
    "\073\075\074\001\002\000\060\002\uffe5\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\014\uffe5\022\uffe5\023\uffe5\024\uffe5\030\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\035\uffe5\042\uffe5\046\uffe5\053\uffe5\072" +
    "\uffe5\001\002\000\004\037\256\001\002\000\014\015\055" +
    "\016\050\017\053\020\054\021\052\001\002\000\010\036" +
    "\261\044\262\047\260\001\002\000\004\050\265\001\002" +
    "\000\040\002\uffe7\003\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\030\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\046\uffe7\001\002\000\024\004\061\005" +
    "\072\006\065\007\062\010\064\011\067\042\066\053\063" +
    "\072\070\001\002\000\042\036\264\052\102\053\076\055" +
    "\107\056\105\057\106\060\075\064\100\065\112\066\077" +
    "\067\110\070\103\071\101\073\111\074\073\075\074\001" +
    "\002\000\040\002\uffe6\003\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\022\uffe6\023\uffe6\024\uffe6\030\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\046\uffe6\001\002\000\006\044\267" +
    "\047\266\001\002\000\004\050\272\001\002\000\004\047" +
    "\157\001\002\000\004\036\271\001\002\000\040\002\uffe3" +
    "\003\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\046\uffe3\001\002\000\004\044\273\001\002\000\004\047" +
    "\274\001\002\000\004\047\157\001\002\000\006\041\175" +
    "\050\276\001\002\000\004\036\277\001\002\000\040\002" +
    "\uffe1\003\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\022\uffe1" +
    "\023\uffe1\024\uffe1\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\046\uffe1\001\002\000\040\002\uffec\003\uffec\011\uffec" +
    "\012\uffec\013\uffec\014\uffec\022\uffec\023\uffec\024\uffec\030" +
    "\uffec\032\uffec\033\uffec\034\uffec\035\uffec\046\uffec\001\002" +
    "\000\040\002\uffeb\003\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\022\uffeb\023\uffeb\024\uffeb\030\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\046\uffeb\001\002\000\040\002\uffc1\003" +
    "\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\046" +
    "\uffc1\001\002\000\034\003\030\011\020\012\025\013\005" +
    "\014\015\022\006\023\041\024\031\030\016\032\036\033" +
    "\010\034\021\035\040\001\002\000\036\003\030\011\020" +
    "\012\025\013\005\014\015\022\006\023\041\024\031\030" +
    "\016\032\036\033\010\034\021\035\040\046\305\001\002" +
    "\000\004\033\306\001\002\000\004\042\307\001\002\000" +
    "\024\004\061\005\072\006\065\007\062\010\064\011\067" +
    "\042\066\053\063\072\070\001\002\000\042\043\311\052" +
    "\102\053\076\055\107\056\105\057\106\060\075\064\100" +
    "\065\112\066\077\067\110\070\103\071\101\073\111\074" +
    "\073\075\074\001\002\000\004\036\312\001\002\000\040" +
    "\002\uffc2\003\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\030\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\046\uffc2\001\002\000\006\026\334\027\335\001" +
    "\002\000\024\004\061\005\072\006\065\007\062\010\064" +
    "\011\067\042\066\053\063\072\070\001\002\000\004\036" +
    "\320\001\002\000\004\036\317\001\002\000\040\002\uffd6" +
    "\003\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\046\uffd6\001\002\000\040\002\uffd5\003\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5\030\uffd5" +
    "\032\uffd5\033\uffd5\034\uffd5\035\uffd5\046\uffd5\001\002\000" +
    "\042\050\322\052\102\053\076\055\107\056\105\057\106" +
    "\060\075\064\100\065\112\066\077\067\110\070\103\071" +
    "\101\073\111\074\073\075\074\001\002\000\006\044\324" +
    "\047\323\001\002\000\024\004\061\005\072\006\065\007" +
    "\062\010\064\011\067\042\066\053\063\072\070\001\002" +
    "\000\024\004\061\005\072\006\065\007\062\010\064\011" +
    "\067\042\066\053\063\072\070\001\002\000\042\036\326" +
    "\052\102\053\076\055\107\056\105\057\106\060\075\064" +
    "\100\065\112\066\077\067\110\070\103\071\101\073\111" +
    "\074\073\075\074\001\002\000\040\002\uffdb\003\uffdb\011" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\030\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb\046\uffdb\001" +
    "\002\000\042\050\330\052\102\053\076\055\107\056\105" +
    "\057\106\060\075\064\100\065\112\066\077\067\110\070" +
    "\103\071\101\073\111\074\073\075\074\001\002\000\004" +
    "\044\331\001\002\000\024\004\061\005\072\006\065\007" +
    "\062\010\064\011\067\042\066\053\063\072\070\001\002" +
    "\000\042\036\333\052\102\053\076\055\107\056\105\057" +
    "\106\060\075\064\100\065\112\066\077\067\110\070\103" +
    "\071\101\073\111\074\073\075\074\001\002\000\040\002" +
    "\uffda\003\uffda\011\uffda\012\uffda\013\uffda\014\uffda\022\uffda" +
    "\023\uffda\024\uffda\030\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\046\uffda\001\002\000\004\042\342\001\002\000\004" +
    "\042\336\001\002\000\024\004\061\005\072\006\065\007" +
    "\062\010\064\011\067\042\066\053\063\072\070\001\002" +
    "\000\042\043\340\052\102\053\076\055\107\056\105\057" +
    "\106\060\075\064\100\065\112\066\077\067\110\070\103" +
    "\071\101\073\111\074\073\075\074\001\002\000\004\036" +
    "\341\001\002\000\040\002\uffd7\003\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\022\uffd7\023\uffd7\024\uffd7\030\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\046\uffd7\001\002\000\024" +
    "\004\061\005\072\006\065\007\062\010\064\011\067\042" +
    "\066\053\063\072\070\001\002\000\042\043\344\052\102" +
    "\053\076\055\107\056\105\057\106\060\075\064\100\065" +
    "\112\066\077\067\110\070\103\071\101\073\111\074\073" +
    "\075\074\001\002\000\004\036\345\001\002\000\040\002" +
    "\uffd8\003\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8" +
    "\023\uffd8\024\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\046\uffd8\001\002\000\024\004\061\005\072\006\065" +
    "\007\062\010\064\011\067\042\066\053\063\072\070\001" +
    "\002\000\042\043\350\052\102\053\076\055\107\056\105" +
    "\057\106\060\075\064\100\065\112\066\077\067\110\070" +
    "\103\071\101\073\111\074\073\075\074\001\002\000\004" +
    "\045\351\001\002\000\034\003\030\011\020\012\025\013" +
    "\005\014\015\022\006\023\041\024\031\030\016\032\036" +
    "\033\010\034\021\035\040\001\002\000\036\003\030\011" +
    "\020\012\025\013\005\014\015\022\006\023\041\024\031" +
    "\030\016\032\036\033\010\034\021\035\040\046\353\001" +
    "\002\000\042\002\uffd1\003\uffd1\011\uffd1\012\uffd1\013\uffd1" +
    "\014\uffd1\022\uffd1\023\uffd1\024\uffd1\030\uffd1\031\354\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\046\uffd1\001\002\000\006" +
    "\030\362\045\373\001\002\000\042\002\uffcf\003\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\046" +
    "\uffcf\001\002\000\042\002\uffd3\003\uffd3\011\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3\030\uffd3\031" +
    "\357\032\uffd3\033\uffd3\034\uffd3\035\uffd3\046\uffd3\001\002" +
    "\000\006\030\362\045\361\001\002\000\042\002\uffd0\003" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\046\uffd0\001\002\000\034\003\030\011\020\012\025" +
    "\013\005\014\015\022\006\023\041\024\031\030\016\032" +
    "\036\033\010\034\021\035\040\001\002\000\004\042\363" +
    "\001\002\000\024\004\061\005\072\006\065\007\062\010" +
    "\064\011\067\042\066\053\063\072\070\001\002\000\042" +
    "\043\365\052\102\053\076\055\107\056\105\057\106\060" +
    "\075\064\100\065\112\066\077\067\110\070\103\071\101" +
    "\073\111\074\073\075\074\001\002\000\004\045\366\001" +
    "\002\000\034\003\030\011\020\012\025\013\005\014\015" +
    "\022\006\023\041\024\031\030\016\032\036\033\010\034" +
    "\021\035\040\001\002\000\036\003\030\011\020\012\025" +
    "\013\005\014\015\022\006\023\041\024\031\030\016\032" +
    "\036\033\010\034\021\035\040\046\370\001\002\000\042" +
    "\002\uffce\003\uffce\011\uffce\012\uffce\013\uffce\014\uffce\022" +
    "\uffce\023\uffce\024\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\046\uffce\001\002\000\036\003\030\011" +
    "\020\012\025\013\005\014\015\022\006\023\041\024\031" +
    "\030\016\032\036\033\010\034\021\035\040\046\372\001" +
    "\002\000\040\002\uffd4\003\uffd4\011\uffd4\012\uffd4\013\uffd4" +
    "\014\uffd4\022\uffd4\023\uffd4\024\uffd4\030\uffd4\032\uffd4\033" +
    "\uffd4\034\uffd4\035\uffd4\046\uffd4\001\002\000\034\003\030" +
    "\011\020\012\025\013\005\014\015\022\006\023\041\024" +
    "\031\030\016\032\036\033\010\034\021\035\040\001\002" +
    "\000\036\003\030\011\020\012\025\013\005\014\015\022" +
    "\006\023\041\024\031\030\016\032\036\033\010\034\021" +
    "\035\040\046\375\001\002\000\040\002\uffd2\003\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\030\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\046\uffd2\001" +
    "\002\000\024\004\061\005\072\006\065\007\062\010\064" +
    "\011\067\042\066\053\063\072\070\001\002\000\042\043" +
    "\u0100\052\102\053\076\055\107\056\105\057\106\060\075" +
    "\064\100\065\112\066\077\067\110\070\103\071\101\073" +
    "\111\074\073\075\074\001\002\000\004\036\u0101\001\002" +
    "\000\040\002\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\022\uffea\023\uffea\024\uffea\030\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\046\uffea\001\002\000\024\004\061\005" +
    "\072\006\065\007\062\010\064\011\067\042\066\053\063" +
    "\072\070\001\002\000\042\043\u0104\052\102\053\076\055" +
    "\107\056\105\057\106\060\075\064\100\065\112\066\077" +
    "\067\110\070\103\071\101\073\111\074\073\075\074\001" +
    "\002\000\004\045\u0105\001\002\000\034\003\030\011\020" +
    "\012\025\013\005\014\015\022\006\023\041\024\031\030" +
    "\016\032\036\033\010\034\021\035\040\001\002\000\036" +
    "\003\030\011\020\012\025\013\005\014\015\022\006\023" +
    "\041\024\031\030\016\032\036\033\010\034\021\035\040" +
    "\046\u0107\001\002\000\040\002\uffc3\003\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\022\uffc3\023\uffc3\024\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\034\uffc3\035\uffc3\046\uffc3\001\002\000" +
    "\016\015\u010f\016\u010b\017\u010d\020\u010e\021\u010c\022\u0109" +
    "\001\002\000\004\070\uffb5\001\002\000\004\070\u0110\001" +
    "\002\000\004\070\uffb9\001\002\000\004\070\uffb6\001\002" +
    "\000\004\070\uffb8\001\002\000\004\070\uffb7\001\002\000" +
    "\004\070\uffba\001\002\000\004\011\u0111\001\002\000\004" +
    "\044\u0112\001\002\000\004\025\u0113\001\002\000\004\022" +
    "\u0114\001\002\000\004\042\u0115\001\002\000\004\043\u0116" +
    "\001\002\000\004\036\u0117\001\002\000\040\002\uffd9\003" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\030\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\046" +
    "\uffd9\001\002\000\040\002\uffc0\003\uffc0\011\uffc0\012\uffc0" +
    "\013\uffc0\014\uffc0\022\uffc0\023\uffc0\024\uffc0\030\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\046\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0116\000\052\002\042\003\013\007\003\014\034\015" +
    "\025\016\032\017\012\020\033\021\031\022\036\023\041" +
    "\025\011\026\026\027\023\030\022\031\010\032\006\033" +
    "\021\037\043\040\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\007\211\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\034\146\036\145\001\001\000" +
    "\002\001\001\000\004\036\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\130\001\001\000\004\036" +
    "\127\001\001\000\004\036\126\001\001\000\004\036\125" +
    "\001\001\000\004\036\124\001\001\000\004\036\123\001" +
    "\001\000\004\036\122\001\001\000\004\036\121\001\001" +
    "\000\004\036\120\001\001\000\002\001\001\000\004\036" +
    "\117\001\001\000\004\036\116\001\001\000\004\036\115" +
    "\001\001\000\004\036\114\001\001\000\004\036\113\001" +
    "\001\000\004\036\112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\157\001\001\000\006\004\161\036\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\172\006\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\203\011\202\036\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\215\036\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\210\007\003\014\034\015\025\016\032\017\012\020\033" +
    "\021\031\022\036\023\041\025\011\026\026\027\023\030" +
    "\022\031\010\032\006\033\021\037\043\040\016\001\001" +
    "\000\046\007\211\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\221\007\003\014\034\015\025" +
    "\016\032\017\012\020\033\021\031\022\036\023\041\025" +
    "\011\026\026\027\023\030\022\031\010\032\006\033\021" +
    "\037\043\040\016\001\001\000\046\007\211\014\034\015" +
    "\025\016\032\017\012\020\033\021\031\022\036\023\041" +
    "\025\011\026\026\027\023\030\022\031\010\032\006\033" +
    "\021\037\043\040\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\227\007\003\014\034\015\025\016\032\017\012\020\033" +
    "\021\031\022\036\023\041\025\011\026\026\027\023\030" +
    "\022\031\010\032\006\033\021\037\043\040\016\001\001" +
    "\000\046\007\211\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\234" +
    "\001\001\000\002\001\001\000\004\036\235\001\001\000" +
    "\002\001\001\000\004\024\240\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\243\007" +
    "\003\014\034\015\025\016\032\017\012\020\033\021\031" +
    "\022\036\023\041\025\011\026\026\027\023\030\022\031" +
    "\010\032\006\033\021\037\043\040\016\001\001\000\046" +
    "\007\211\014\034\015\025\016\032\017\012\020\033\021" +
    "\031\022\036\023\041\025\011\026\026\027\023\030\022" +
    "\031\010\032\006\033\021\037\043\040\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\172\006\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\303\007\003\014\034\015\025" +
    "\016\032\017\012\020\033\021\031\022\036\023\041\025" +
    "\011\026\026\027\023\030\022\031\010\032\006\033\021" +
    "\037\043\040\016\001\001\000\046\007\211\014\034\015" +
    "\025\016\032\017\012\020\033\021\031\022\036\023\041" +
    "\025\011\026\026\027\023\030\022\031\010\032\006\033" +
    "\021\037\043\040\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\326\001\001\000\004\036\324\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\331\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\336\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\346\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\003\351\007\003\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\046\007\211\014\034\015\025\016\032\017\012" +
    "\020\033\021\031\022\036\023\041\025\011\026\026\027" +
    "\023\030\022\031\010\032\006\033\021\037\043\040\016" +
    "\001\001\000\006\012\355\013\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\357\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\003\370\007\003\014" +
    "\034\015\025\016\032\017\012\020\033\021\031\022\036" +
    "\023\041\025\011\026\026\027\023\030\022\031\010\032" +
    "\006\033\021\037\043\040\016\001\001\000\002\001\001" +
    "\000\004\036\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\003\366\007\003\014\034\015\025\016\032" +
    "\017\012\020\033\021\031\022\036\023\041\025\011\026" +
    "\026\027\023\030\022\031\010\032\006\033\021\037\043" +
    "\040\016\001\001\000\046\007\211\014\034\015\025\016" +
    "\032\017\012\020\033\021\031\022\036\023\041\025\011" +
    "\026\026\027\023\030\022\031\010\032\006\033\021\037" +
    "\043\040\016\001\001\000\002\001\001\000\046\007\211" +
    "\014\034\015\025\016\032\017\012\020\033\021\031\022" +
    "\036\023\041\025\011\026\026\027\023\030\022\031\010" +
    "\032\006\033\021\037\043\040\016\001\001\000\002\001" +
    "\001\000\050\003\373\007\003\014\034\015\025\016\032" +
    "\017\012\020\033\021\031\022\036\023\041\025\011\026" +
    "\026\027\023\030\022\031\010\032\006\033\021\037\043" +
    "\040\016\001\001\000\046\007\211\014\034\015\025\016" +
    "\032\017\012\020\033\021\031\022\036\023\041\025\011" +
    "\026\026\027\023\030\022\031\010\032\006\033\021\037" +
    "\043\040\016\001\001\000\002\001\001\000\004\036\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\u0102\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\u0105\007\003\014\034\015\025\016" +
    "\032\017\012\020\033\021\031\022\036\023\041\025\011" +
    "\026\026\027\023\030\022\031\010\032\006\033\021\037" +
    "\043\040\016\001\001\000\046\007\211\014\034\015\025" +
    "\016\032\017\012\020\033\021\031\022\036\023\041\025" +
    "\011\026\026\027\023\030\022\031\010\032\006\033\021" +
    "\037\043\040\016\001\001\000\002\001\001\000\004\035" +
    "\u0109\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIGNACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= APPENDD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= REMOVEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error LLAVE2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, c , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, true, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, false, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(true, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(false, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_1 ::= LISTA_1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_2 ::= LISTA_2 COMA AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_2 ::= AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AGRUPAR_VALORES ::= CORCHETE1 LISTA_1 CORCHETE2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGRUPAR_VALORES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONLISTA ::= LIST MENOR TIPOS_LISTAS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT=new DeclaracionLista(b, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // APPENDD ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT=new AppendLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REMOVEE ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVEE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INCREMENTO ::= ID MAS_MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECREMENTO ::= ID MENOS_MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(b, a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE_IF_LIST ::= ELSE_IF_LIST ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Else_> a = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ b = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_IF_LIST ::= ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ a = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_IF_CLAUSE ::= ELSE IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Else_ RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else_(new Condicion(a, aleft, aright), b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_CLAUSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SMATCH ::= MATCH EXPRESION LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASOS_S_S ::= CASOS_S_S CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASOS_S_S ::= CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASOS_S ::= EXPRESION IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACTUALIZA_FOR ::= ID MAS_MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACTUALIZA_FOR ::= ID MENOS_MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS_LISTAS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS_LISTAS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS_LISTAS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS_LISTAS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS_LISTAS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS_LISTAS ::= LIST 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.LISTA);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION DOBLE_ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION PORCENTUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION NOT_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.valueOf(((String) a).toLowerCase()), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
