
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionLista;
import instrucciones.AsignacionVC;
import instrucciones.AsignacionVector;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Else_;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;
import instrucciones.AppendLista;
import instrucciones.Metodo;
import instrucciones.Start;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;
import expresiones.AccesoVector;
import expresiones.RemoveLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.Find;
import expresiones.Llamada;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\004\000\002" +
    "\007\004\000\002\014\007\000\002\025\007\000\002\025" +
    "\011\000\002\025\007\000\002\025\011\000\002\030\006" +
    "\000\002\026\013\000\002\026\013\000\002\026\017\000" +
    "\002\026\017\000\002\004\005\000\002\004\003\000\002" +
    "\006\005\000\002\006\003\000\002\005\005\000\002\031" +
    "\011\000\002\031\014\000\002\027\015\000\002\037\011" +
    "\000\002\040\011\000\002\015\005\000\002\016\005\000" +
    "\002\017\016\000\002\017\012\000\002\017\015\000\002" +
    "\017\011\000\002\012\004\000\002\012\003\000\002\013" +
    "\012\000\002\023\015\000\002\023\007\000\002\023\014" +
    "\000\002\010\004\000\002\010\003\000\002\011\010\000" +
    "\002\020\014\000\002\024\005\000\002\024\004\000\002" +
    "\024\004\000\002\021\011\000\002\022\013\000\002\032" +
    "\004\000\002\033\004\000\002\041\012\000\002\041\011" +
    "\000\002\042\006\000\002\042\004\000\002\043\010\000" +
    "\002\043\007\000\002\045\007\000\002\045\006\000\002" +
    "\044\005\000\002\044\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\006\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\006\000\002\036\011\000\002" +
    "\036\005\000\002\036\010\000\002\036\006\000\002\036" +
    "\006\000\002\036\006\000\002\036\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\040\003\026\011\023\012\030\013\011\014" +
    "\006\015\031\023\040\024\050\025\004\027\036\036\022" +
    "\040\015\041\037\042\051\043\017\001\002\000\004\011" +
    "\u013b\001\002\000\044\002\ufff4\003\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\023\ufff4\024\ufff4\025\ufff4\027" +
    "\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\054\ufff4" +
    "\001\002\000\004\050\u0137\001\002\000\044\002\ufff0\003" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\036\ufff0\040\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\054\ufff0\001\002\000\044\002\uffec\003\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\023\uffec\024" +
    "\uffec\025\uffec\027\uffec\036\uffec\040\uffec\041\uffec\042\uffec" +
    "\043\uffec\054\uffec\001\002\000\004\044\u0136\001\002\000" +
    "\044\002\ufffa\003\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\023\ufffa\024\ufffa\025\ufffa\027\ufffa\036\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\054\ufffa\001\002\000\044" +
    "\002\ufffe\003\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\027\ufffe\036\ufffe\040\ufffe" +
    "\041\ufffe\042\ufffe\043\ufffe\054\ufffe\001\002\000\044\002" +
    "\uffef\003\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef" +
    "\023\uffef\024\uffef\025\uffef\027\uffef\036\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\054\uffef\001\002\000\004\050\u0127" +
    "\001\002\000\042\002\000\003\026\011\023\012\030\013" +
    "\011\014\006\015\031\023\040\024\050\025\004\027\036" +
    "\036\022\040\015\041\037\042\051\043\017\001\002\000" +
    "\032\004\061\005\074\006\066\007\062\010\065\011\071" +
    "\032\070\033\063\034\060\050\067\061\064\100\072\001" +
    "\002\000\044\002\ufff2\003\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\023\ufff2\024\ufff2\025\ufff2\027\ufff2\036" +
    "\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2\054\ufff2\001\002" +
    "\000\044\002\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\023\ufff7\024\ufff7\025\ufff7\027\ufff7\036\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\054\ufff7\001\002\000" +
    "\004\050\365\001\002\000\016\046\322\050\326\052\324" +
    "\055\321\067\325\070\323\001\002\000\044\002\ufffb\003" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\023\ufffb" +
    "\024\ufffb\025\ufffb\027\ufffb\036\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\054\ufffb\001\002\000\044\002\ufff6\003\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\027\ufff6\036\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\054\ufff6\001\002\000\006\044\317\054\320\001" +
    "\002\000\044\002\uffeb\003\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb\036" +
    "\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\054\uffeb\001\002" +
    "\000\004\044\316\001\002\000\004\011\276\001\002\000" +
    "\044\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9\036\ufff9\040" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\054\ufff9\001\002\000\044" +
    "\002\ufffc\003\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\036\ufffc\040\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\054\ufffc\001\002\000\044\002" +
    "\ufff8\003\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\027\ufff8\036\ufff8\040\ufff8\041" +
    "\ufff8\042\ufff8\043\ufff8\054\ufff8\001\002\000\044\002\ufff3" +
    "\003\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\027\ufff3\036\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\054\ufff3\001\002\000\004\011\264\001" +
    "\002\000\004\050\256\001\002\000\004\074\236\001\002" +
    "\000\044\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd\014" +
    "\ufffd\015\ufffd\023\ufffd\024\ufffd\025\ufffd\027\ufffd\036\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\054\ufffd\001\002\000" +
    "\044\002\ufff5\003\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\023\ufff5\024\ufff5\025\ufff5\027\ufff5\036\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\054\ufff5\001\002\000\044" +
    "\002\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\023\uffea\024\uffea\025\uffea\027\uffea\036\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\054\uffea\001\002\000\044\002" +
    "\ufff1\003\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\023\ufff1\024\ufff1\025\ufff1\027\ufff1\036\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\043\ufff1\054\ufff1\001\002\000\004\002\235" +
    "\001\002\000\044\002\uffee\003\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\023\uffee\024\uffee\025\uffee\027\uffee" +
    "\036\uffee\040\uffee\041\uffee\042\uffee\043\uffee\054\uffee\001" +
    "\002\000\044\002\uffed\003\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\023\uffed\024\uffed\025\uffed\027\uffed\036" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\054\uffed\001\002" +
    "\000\004\011\201\001\002\000\004\053\052\001\002\000" +
    "\040\003\026\011\023\012\030\013\011\014\006\015\031" +
    "\023\040\024\050\025\004\027\036\036\022\040\015\041" +
    "\037\042\051\043\017\001\002\000\042\003\026\011\023" +
    "\012\030\013\011\014\006\015\031\023\040\024\050\025" +
    "\004\027\036\036\022\040\015\041\037\042\051\043\017" +
    "\054\054\001\002\000\004\041\056\001\002\000\044\002" +
    "\uffff\003\uffff\011\uffff\012\uffff\013\uffff\014\uffff\015\uffff" +
    "\023\uffff\024\uffff\025\uffff\027\uffff\036\uffff\040\uffff\041" +
    "\uffff\042\uffff\043\uffff\054\uffff\001\002\000\004\050\057" +
    "\001\002\000\032\004\061\005\074\006\066\007\062\010" +
    "\065\011\071\032\070\033\063\034\060\050\067\061\064" +
    "\100\072\001\002\000\004\050\176\001\002\000\054\044" +
    "\uff93\047\uff93\051\uff93\052\uff93\053\uff93\056\uff93\060\uff93" +
    "\061\uff93\063\uff93\064\uff93\065\uff93\066\uff93\072\uff93\073" +
    "\uff93\074\uff93\075\uff93\076\uff93\077\uff93\101\uff93\102\uff93" +
    "\103\uff93\001\002\000\054\044\uff94\047\uff94\051\uff94\052" +
    "\uff94\053\uff94\056\uff94\060\uff94\061\uff94\063\uff94\064\uff94" +
    "\065\uff94\066\uff94\072\uff94\073\uff94\074\uff94\075\uff94\076" +
    "\uff94\077\uff94\101\uff94\102\uff94\103\uff94\001\002\000\004" +
    "\050\173\001\002\000\032\004\061\005\074\006\066\007" +
    "\062\010\065\011\071\032\070\033\063\034\060\050\067" +
    "\061\064\100\072\001\002\000\054\044\uff91\047\uff91\051" +
    "\uff91\052\uff91\053\uff91\056\uff91\060\uff91\061\uff91\063\uff91" +
    "\064\uff91\065\uff91\066\uff91\072\uff91\073\uff91\074\uff91\075" +
    "\uff91\076\uff91\077\uff91\101\uff91\102\uff91\103\uff91\001\002" +
    "\000\054\044\uff95\047\uff95\051\uff95\052\uff95\053\uff95\056" +
    "\uff95\060\uff95\061\uff95\063\uff95\064\uff95\065\uff95\066\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\076\uff95\077\uff95\101" +
    "\uff95\102\uff95\103\uff95\001\002\000\044\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\016\162\017\166\020" +
    "\164\021\163\022\161\032\070\033\063\034\060\050\067" +
    "\061\064\100\072\001\002\000\004\050\155\001\002\000" +
    "\060\044\uff90\046\136\047\uff90\051\uff90\052\uff90\053\uff90" +
    "\055\137\056\uff90\060\uff90\061\uff90\063\uff90\064\uff90\065" +
    "\uff90\066\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90" +
    "\077\uff90\101\uff90\102\uff90\103\uff90\001\002\000\032\004" +
    "\061\005\074\006\066\007\062\010\065\011\071\032\070" +
    "\033\063\034\060\050\067\061\064\100\072\001\002\000" +
    "\042\051\105\060\104\061\100\063\110\064\107\065\111" +
    "\066\076\072\102\073\112\074\101\075\114\076\106\077" +
    "\103\101\113\102\075\103\077\001\002\000\054\044\uff92" +
    "\047\uff92\051\uff92\052\uff92\053\uff92\056\uff92\060\uff92\061" +
    "\uff92\063\uff92\064\uff92\065\uff92\066\uff92\072\uff92\073\uff92" +
    "\074\uff92\075\uff92\076\uff92\077\uff92\101\uff92\102\uff92\103" +
    "\uff92\001\002\000\032\004\061\005\074\006\066\007\062" +
    "\010\065\011\071\032\070\033\063\034\060\050\067\061" +
    "\064\100\072\001\002\000\032\004\061\005\074\006\066" +
    "\007\062\010\065\011\071\032\070\033\063\034\060\050" +
    "\067\061\064\100\072\001\002\000\032\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\061\064\100\072\001\002\000\032\004\061" +
    "\005\074\006\066\007\062\010\065\011\071\032\070\033" +
    "\063\034\060\050\067\061\064\100\072\001\002\000\032" +
    "\004\061\005\074\006\066\007\062\010\065\011\071\032" +
    "\070\033\063\034\060\050\067\061\064\100\072\001\002" +
    "\000\032\004\061\005\074\006\066\007\062\010\065\011" +
    "\071\032\070\033\063\034\060\050\067\061\064\100\072" +
    "\001\002\000\032\004\061\005\074\006\066\007\062\010" +
    "\065\011\071\032\070\033\063\034\060\050\067\061\064" +
    "\100\072\001\002\000\032\004\061\005\074\006\066\007" +
    "\062\010\065\011\071\032\070\033\063\034\060\050\067" +
    "\061\064\100\072\001\002\000\004\044\124\001\002\000" +
    "\032\004\061\005\074\006\066\007\062\010\065\011\071" +
    "\032\070\033\063\034\060\050\067\061\064\100\072\001" +
    "\002\000\032\004\061\005\074\006\066\007\062\010\065" +
    "\011\071\032\070\033\063\034\060\050\067\061\064\100" +
    "\072\001\002\000\032\004\061\005\074\006\066\007\062" +
    "\010\065\011\071\032\070\033\063\034\060\050\067\061" +
    "\064\100\072\001\002\000\032\004\061\005\074\006\066" +
    "\007\062\010\065\011\071\032\070\033\063\034\060\050" +
    "\067\061\064\100\072\001\002\000\032\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\061\064\100\072\001\002\000\032\004\061" +
    "\005\074\006\066\007\062\010\065\011\071\032\070\033" +
    "\063\034\060\050\067\061\064\100\072\001\002\000\032" +
    "\004\061\005\074\006\066\007\062\010\065\011\071\032" +
    "\070\033\063\034\060\050\067\061\064\100\072\001\002" +
    "\000\054\044\uff9d\047\uff9d\051\uff9d\052\uff9d\053\uff9d\056" +
    "\uff9d\060\104\061\100\063\110\064\107\065\111\066\076" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d\101" +
    "\uff9d\102\uff9d\103\uff9d\001\002\000\054\044\uff97\047\uff97" +
    "\051\uff97\052\uff97\053\uff97\056\uff97\060\104\061\100\063" +
    "\110\064\107\065\111\066\076\072\102\073\112\074\101" +
    "\075\114\076\106\077\103\101\uff97\102\075\103\077\001" +
    "\002\000\054\044\uff9f\047\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\056\uff9f\060\104\061\100\063\110\064\107\065\111\066" +
    "\076\072\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f" +
    "\101\uff9f\102\uff9f\103\uff9f\001\002\000\052\044\uffa6\047" +
    "\uffa6\051\uffa6\052\uffa6\053\uffa6\056\uffa6\060\uffa6\061\uffa6" +
    "\063\uffa6\064\uffa6\066\uffa6\072\uffa6\073\uffa6\074\uffa6\075" +
    "\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6\001\002" +
    "\000\054\044\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\063\uffa3\064\uffa3\065\111\066\uffa3" +
    "\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3\077\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\001\002\000\054\044\uffa5\047\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\056\uffa5\060\uffa5\061\uffa5\063" +
    "\uffa5\064\uffa5\065\111\066\uffa5\072\uffa5\073\uffa5\074\uffa5" +
    "\075\uffa5\076\uffa5\077\uffa5\101\uffa5\102\uffa5\103\uffa5\001" +
    "\002\000\054\044\uff9c\047\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\056\uff9c\060\104\061\100\063\110\064\107\065\111\066" +
    "\076\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c" +
    "\101\uff9c\102\uff9c\103\uff9c\001\002\000\044\002\uffbf\003" +
    "\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\027\uffbf\036\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\054\uffbf\001\002\000\054\044\uffa2\047\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\056\uffa2\060\uffa2\061\uffa2\063" +
    "\110\064\107\065\111\066\076\072\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\076\uffa2\077\uffa2\101\uffa2\102\uffa2\103\uffa2\001" +
    "\002\000\054\044\uff9b\047\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\056\uff9b\060\104\061\100\063\110\064\107\065\111\066" +
    "\076\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\101\uff9b\102\uff9b\103\uff9b\001\002\000\054\044\uffa0\047" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\056\uffa0\060\104\061\100" +
    "\063\110\064\107\065\111\066\076\072\uffa0\073\uffa0\074" +
    "\uffa0\075\uffa0\076\uffa0\077\uffa0\101\uffa0\102\uffa0\103\uffa0" +
    "\001\002\000\054\044\uff9e\047\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\056\uff9e\060\104\061\100\063\110\064\107\065\111" +
    "\066\076\072\uff9e\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077" +
    "\uff9e\101\uff9e\102\uff9e\103\uff9e\001\002\000\054\044\uffa1" +
    "\047\uffa1\051\uffa1\052\uffa1\053\uffa1\056\uffa1\060\uffa1\061" +
    "\uffa1\063\110\064\107\065\111\066\076\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\001\002\000\054\044\uff98\047\uff98\051\uff98\052\uff98" +
    "\053\uff98\056\uff98\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\uff98\102\uff98\103\uff98\001\002\000\054\044" +
    "\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\056\uffa4\060\uffa4" +
    "\061\uffa4\063\uffa4\064\uffa4\065\111\066\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4\101\uffa4\102\uffa4" +
    "\103\uffa4\001\002\000\054\044\uff99\047\uff99\051\uff99\052" +
    "\uff99\053\uff99\056\uff99\060\104\061\100\063\110\064\107" +
    "\065\111\066\076\072\102\073\112\074\101\075\114\076" +
    "\106\077\103\101\uff99\102\uff99\103\077\001\002\000\054" +
    "\044\uff9a\047\uff9a\051\uff9a\052\uff9a\053\uff9a\056\uff9a\060" +
    "\104\061\100\063\110\064\107\065\111\066\076\072\102" +
    "\073\112\074\101\075\114\076\106\077\103\101\uff9a\102" +
    "\uff9a\103\uff9a\001\002\000\006\031\146\035\145\001\002" +
    "\000\032\004\061\005\074\006\066\007\062\010\065\011" +
    "\071\032\070\033\063\034\060\050\067\061\064\100\072" +
    "\001\002\000\042\056\141\060\104\061\100\063\110\064" +
    "\107\065\111\066\076\072\102\073\112\074\101\075\114" +
    "\076\106\077\103\101\113\102\075\103\077\001\002\000" +
    "\056\044\uff8f\047\uff8f\051\uff8f\052\uff8f\053\uff8f\055\142" +
    "\056\uff8f\060\uff8f\061\uff8f\063\uff8f\064\uff8f\065\uff8f\066" +
    "\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f" +
    "\101\uff8f\102\uff8f\103\uff8f\001\002\000\032\004\061\005" +
    "\074\006\066\007\062\010\065\011\071\032\070\033\063" +
    "\034\060\050\067\061\064\100\072\001\002\000\042\056" +
    "\144\060\104\061\100\063\110\064\107\065\111\066\076" +
    "\072\102\073\112\074\101\075\114\076\106\077\103\101" +
    "\113\102\075\103\077\001\002\000\054\044\uff8e\047\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\056\uff8e\060\uff8e\061\uff8e\063" +
    "\uff8e\064\uff8e\065\uff8e\066\uff8e\072\uff8e\073\uff8e\074\uff8e" +
    "\075\uff8e\076\uff8e\077\uff8e\101\uff8e\102\uff8e\103\uff8e\001" +
    "\002\000\004\050\152\001\002\000\004\050\147\001\002" +
    "\000\032\004\061\005\074\006\066\007\062\010\065\011" +
    "\071\032\070\033\063\034\060\050\067\061\064\100\072" +
    "\001\002\000\042\051\151\060\104\061\100\063\110\064" +
    "\107\065\111\066\076\072\102\073\112\074\101\075\114" +
    "\076\106\077\103\101\113\102\075\103\077\001\002\000" +
    "\054\044\uff8c\047\uff8c\051\uff8c\052\uff8c\053\uff8c\056\uff8c" +
    "\060\uff8c\061\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\072" +
    "\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\101\uff8c" +
    "\102\uff8c\103\uff8c\001\002\000\032\004\061\005\074\006" +
    "\066\007\062\010\065\011\071\032\070\033\063\034\060" +
    "\050\067\061\064\100\072\001\002\000\042\051\154\060" +
    "\104\061\100\063\110\064\107\065\111\066\076\072\102" +
    "\073\112\074\101\075\114\076\106\077\103\101\113\102" +
    "\075\103\077\001\002\000\054\044\uff88\047\uff88\051\uff88" +
    "\052\uff88\053\uff88\056\uff88\060\uff88\061\uff88\063\uff88\064" +
    "\uff88\065\uff88\066\uff88\072\uff88\073\uff88\074\uff88\075\uff88" +
    "\076\uff88\077\uff88\101\uff88\102\uff88\103\uff88\001\002\000" +
    "\032\004\061\005\074\006\066\007\062\010\065\011\071" +
    "\032\070\033\063\034\060\050\067\061\064\100\072\001" +
    "\002\000\042\051\157\060\104\061\100\063\110\064\107" +
    "\065\111\066\076\072\102\073\112\074\101\075\114\076" +
    "\106\077\103\101\113\102\075\103\077\001\002\000\054" +
    "\044\uff8b\047\uff8b\051\uff8b\052\uff8b\053\uff8b\056\uff8b\060" +
    "\uff8b\061\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\072\uff8b" +
    "\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\101\uff8b\102" +
    "\uff8b\103\uff8b\001\002\000\004\051\170\001\002\000\014" +
    "\011\uffae\044\uffae\051\uffae\052\uffae\055\uffae\001\002\000" +
    "\014\011\uffb2\044\uffb2\051\uffb2\052\uffb2\055\uffb2\001\002" +
    "\000\014\011\uffaf\044\uffaf\051\uffaf\052\uffaf\055\uffaf\001" +
    "\002\000\014\011\uffb0\044\uffb0\051\uffb0\052\uffb0\055\uffb0" +
    "\001\002\000\042\051\167\060\104\061\100\063\110\064" +
    "\107\065\111\066\076\072\102\073\112\074\101\075\114" +
    "\076\106\077\103\101\113\102\075\103\077\001\002\000" +
    "\014\011\uffb1\044\uffb1\051\uffb1\052\uffb1\055\uffb1\001\002" +
    "\000\054\044\uff8d\047\uff8d\051\uff8d\052\uff8d\053\uff8d\056" +
    "\uff8d\060\uff8d\061\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d" +
    "\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\101" +
    "\uff8d\102\uff8d\103\uff8d\001\002\000\032\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\061\064\100\072\001\002\000\054\044\uff96" +
    "\047\uff96\051\uff96\052\uff96\053\uff96\056\uff96\060\104\061" +
    "\100\063\110\064\107\065\111\066\076\072\uff96\073\uff96" +
    "\074\uff96\075\uff96\076\uff96\077\uff96\101\uff96\102\uff96\103" +
    "\uff96\001\002\000\054\044\uffa7\047\uffa7\051\uffa7\052\uffa7" +
    "\053\uffa7\056\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\066\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\101\uffa7\102\uffa7\103\uffa7\001\002\000\032\004" +
    "\061\005\074\006\066\007\062\010\065\011\071\032\070" +
    "\033\063\034\060\050\067\061\064\100\072\001\002\000" +
    "\042\051\175\060\104\061\100\063\110\064\107\065\111" +
    "\066\076\072\102\073\112\074\101\075\114\076\106\077" +
    "\103\101\113\102\075\103\077\001\002\000\054\044\uff8a" +
    "\047\uff8a\051\uff8a\052\uff8a\053\uff8a\056\uff8a\060\uff8a\061" +
    "\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\072\uff8a\073\uff8a" +
    "\074\uff8a\075\uff8a\076\uff8a\077\uff8a\101\uff8a\102\uff8a\103" +
    "\uff8a\001\002\000\032\004\061\005\074\006\066\007\062" +
    "\010\065\011\071\032\070\033\063\034\060\050\067\061" +
    "\064\100\072\001\002\000\042\051\200\060\104\061\100" +
    "\063\110\064\107\065\111\066\076\072\102\073\112\074" +
    "\101\075\114\076\106\077\103\101\113\102\075\103\077" +
    "\001\002\000\054\044\uff89\047\uff89\051\uff89\052\uff89\053" +
    "\uff89\056\uff89\060\uff89\061\uff89\063\uff89\064\uff89\065\uff89" +
    "\066\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077" +
    "\uff89\101\uff89\102\uff89\103\uff89\001\002\000\004\045\202" +
    "\001\002\000\014\016\162\017\166\020\164\021\163\022" +
    "\161\001\002\000\010\044\205\052\206\055\204\001\002" +
    "\000\004\056\211\001\002\000\044\002\uffe6\003\uffe6\011" +
    "\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\054\uffe6\001\002\000\032\004\061\005\074\006\066" +
    "\007\062\010\065\011\071\032\070\033\063\034\060\050" +
    "\067\061\064\100\072\001\002\000\042\044\210\060\104" +
    "\061\100\063\110\064\107\065\111\066\076\072\102\073" +
    "\112\074\101\075\114\076\106\077\103\101\113\102\075" +
    "\103\077\001\002\000\044\002\uffe5\003\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\027\uffe5\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\054" +
    "\uffe5\001\002\000\006\052\213\055\212\001\002\000\004" +
    "\056\224\001\002\000\004\055\214\001\002\000\032\004" +
    "\061\005\074\006\066\007\062\010\065\011\071\032\070" +
    "\033\063\034\060\050\067\061\064\100\072\001\002\000" +
    "\004\044\216\001\002\000\044\002\uffe1\003\uffe1\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\027\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\054\uffe1\001\002\000\006\047\221\056\222\001\002\000" +
    "\044\047\uffdc\056\uffdc\060\104\061\100\063\110\064\107" +
    "\065\111\066\076\072\102\073\112\074\101\075\114\076" +
    "\106\077\103\101\113\102\075\103\077\001\002\000\032" +
    "\004\061\005\074\006\066\007\062\010\065\011\071\032" +
    "\070\033\063\034\060\050\067\061\064\100\072\001\002" +
    "\000\010\044\uffd9\047\uffd9\056\uffd9\001\002\000\044\047" +
    "\uffdd\056\uffdd\060\104\061\100\063\110\064\107\065\111" +
    "\066\076\072\102\073\112\074\101\075\114\076\106\077" +
    "\103\101\113\102\075\103\077\001\002\000\004\052\225" +
    "\001\002\000\004\055\226\001\002\000\004\055\214\001" +
    "\002\000\006\047\232\056\231\001\002\000\006\047\uffda" +
    "\056\uffda\001\002\000\004\044\234\001\002\000\004\055" +
    "\214\001\002\000\006\047\uffdb\056\uffdb\001\002\000\044" +
    "\002\uffdf\003\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\027\uffdf\036\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\054\uffdf\001\002\000\004\002" +
    "\001\001\002\000\016\016\245\017\241\020\243\021\244" +
    "\022\242\023\237\001\002\000\004\076\uffa8\001\002\000" +
    "\004\076\246\001\002\000\004\076\uffac\001\002\000\004" +
    "\076\uffa9\001\002\000\004\076\uffab\001\002\000\004\076" +
    "\uffaa\001\002\000\004\076\uffad\001\002\000\004\011\247" +
    "\001\002\000\004\052\250\001\002\000\004\026\251\001" +
    "\002\000\004\023\252\001\002\000\004\050\253\001\002" +
    "\000\004\051\254\001\002\000\004\044\255\001\002\000" +
    "\044\002\uffd6\003\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\023\uffd6\024\uffd6\025\uffd6\027\uffd6\036\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\054\uffd6\001\002\000\032" +
    "\004\061\005\074\006\066\007\062\010\065\011\071\032" +
    "\070\033\063\034\060\050\067\061\064\100\072\001\002" +
    "\000\042\051\260\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\113\102\075\103\077\001\002\000\004\053" +
    "\261\001\002\000\040\003\026\011\023\012\030\013\011" +
    "\014\006\015\031\023\040\024\050\025\004\027\036\036" +
    "\022\040\015\041\037\042\051\043\017\001\002\000\042" +
    "\003\026\011\023\012\030\013\011\014\006\015\031\023" +
    "\040\024\050\025\004\027\036\036\022\040\015\041\037" +
    "\042\051\043\017\054\263\001\002\000\044\002\uffc0\003" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\027\uffc0\036\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\054\uffc0\001\002\000\004\050\265\001\002" +
    "\000\034\004\061\005\074\006\066\007\062\010\065\011" +
    "\071\032\070\033\063\034\060\050\067\051\266\061\064" +
    "\100\072\001\002\000\004\044\275\001\002\000\006\047" +
    "\271\051\272\001\002\000\044\047\uffb3\051\uffb3\060\104" +
    "\061\100\063\110\064\107\065\111\066\076\072\102\073" +
    "\112\074\101\075\114\076\106\077\103\101\113\102\075" +
    "\103\077\001\002\000\032\004\061\005\074\006\066\007" +
    "\062\010\065\011\071\032\070\033\063\034\060\050\067" +
    "\061\064\100\072\001\002\000\004\044\273\001\002\000" +
    "\044\002\uffb8\003\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\023\uffb8\024\uffb8\025\uffb8\027\uffb8\036\uffb8\040" +
    "\uffb8\041\uffb8\042\uffb8\043\uffb8\054\uffb8\001\002\000\044" +
    "\047\uffb4\051\uffb4\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\113\102\075\103\077\001\002\000\044\002" +
    "\uffb7\003\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\027\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\054\uffb7\001\002\000\004\050\277" +
    "\001\002\000\016\016\162\017\166\020\164\021\163\022" +
    "\161\051\302\001\002\000\004\011\315\001\002\000\006" +
    "\047\306\051\307\001\002\000\004\053\303\001\002\000" +
    "\040\003\026\011\023\012\030\013\011\014\006\015\031" +
    "\023\040\024\050\025\004\027\036\036\022\040\015\041" +
    "\037\042\051\043\017\001\002\000\042\003\026\011\023" +
    "\012\030\013\011\014\006\015\031\023\040\024\050\025" +
    "\004\027\036\036\022\040\015\041\037\042\051\043\017" +
    "\054\305\001\002\000\044\002\uffbb\003\uffbb\011\uffbb\012" +
    "\uffbb\013\uffbb\014\uffbb\015\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\027\uffbb\036\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\054" +
    "\uffbb\001\002\000\014\016\162\017\166\020\164\021\163" +
    "\022\161\001\002\000\004\053\310\001\002\000\040\003" +
    "\026\011\023\012\030\013\011\014\006\015\031\023\040" +
    "\024\050\025\004\027\036\036\022\040\015\041\037\042" +
    "\051\043\017\001\002\000\042\003\026\011\023\012\030" +
    "\013\011\014\006\015\031\023\040\024\050\025\004\027" +
    "\036\036\022\040\015\041\037\042\051\043\017\054\312" +
    "\001\002\000\044\002\uffbc\003\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc" +
    "\036\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\054\uffbc\001" +
    "\002\000\004\011\314\001\002\000\006\047\uffba\051\uffba" +
    "\001\002\000\006\047\uffb9\051\uffb9\001\002\000\044\002" +
    "\uffbe\003\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\027\uffbe\036\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\054\uffbe\001\002\000\044\002\uffe9" +
    "\003\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\027\uffe9\036\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\054\uffe9\001\002\000\044\002\uffe8\003" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\027\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\054\uffe8\001\002\000\032\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\061\064\100\072\001\002\000\006\030\340" +
    "\031\341\001\002\000\004\044\337\001\002\000\032\004" +
    "\061\005\074\006\066\007\062\010\065\011\071\032\070" +
    "\033\063\034\060\050\067\061\064\100\072\001\002\000" +
    "\004\044\334\001\002\000\034\004\061\005\074\006\066" +
    "\007\062\010\065\011\071\032\070\033\063\034\060\050" +
    "\067\051\327\061\064\100\072\001\002\000\004\044\333" +
    "\001\002\000\006\047\271\051\331\001\002\000\004\044" +
    "\332\001\002\000\044\002\uffb6\003\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\023\uffb6\024\uffb6\025\uffb6\027" +
    "\uffb6\036\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6\054\uffb6" +
    "\001\002\000\044\002\uffb5\003\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5" +
    "\036\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\054\uffb5\001" +
    "\002\000\044\002\uffd3\003\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\036" +
    "\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\054\uffd3\001\002" +
    "\000\042\044\336\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\113\102\075\103\077\001\002\000\072\002" +
    "\uffe2\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\027\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\050\uffe2\054\uffe2\061" +
    "\uffe2\100\uffe2\001\002\000\044\002\uffd2\003\uffd2\011\uffd2" +
    "\012\uffd2\013\uffd2\014\uffd2\015\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\027\uffd2\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\054\uffd2\001\002\000\004\050\346\001\002\000\004\050" +
    "\342\001\002\000\032\004\061\005\074\006\066\007\062" +
    "\010\065\011\071\032\070\033\063\034\060\050\067\061" +
    "\064\100\072\001\002\000\042\051\344\060\104\061\100" +
    "\063\110\064\107\065\111\066\076\072\102\073\112\074" +
    "\101\075\114\076\106\077\103\101\113\102\075\103\077" +
    "\001\002\000\004\044\345\001\002\000\044\002\uffd4\003" +
    "\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\027\uffd4\036\uffd4\040\uffd4\041\uffd4\042" +
    "\uffd4\043\uffd4\054\uffd4\001\002\000\032\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\061\064\100\072\001\002\000\042\051\350" +
    "\060\104\061\100\063\110\064\107\065\111\066\076\072" +
    "\102\073\112\074\101\075\114\076\106\077\103\101\113" +
    "\102\075\103\077\001\002\000\004\044\351\001\002\000" +
    "\044\002\uffd5\003\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5" +
    "\015\uffd5\023\uffd5\024\uffd5\025\uffd5\027\uffd5\036\uffd5\040" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\054\uffd5\001\002\000\042" +
    "\056\353\060\104\061\100\063\110\064\107\065\111\066" +
    "\076\072\102\073\112\074\101\075\114\076\106\077\103" +
    "\101\113\102\075\103\077\001\002\000\006\052\355\055" +
    "\354\001\002\000\032\004\061\005\074\006\066\007\062" +
    "\010\065\011\071\032\070\033\063\034\060\050\067\061" +
    "\064\100\072\001\002\000\032\004\061\005\074\006\066" +
    "\007\062\010\065\011\071\032\070\033\063\034\060\050" +
    "\067\061\064\100\072\001\002\000\042\044\357\060\104" +
    "\061\100\063\110\064\107\065\111\066\076\072\102\073" +
    "\112\074\101\075\114\076\106\077\103\101\113\102\075" +
    "\103\077\001\002\000\044\002\uffd8\003\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\027\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\054" +
    "\uffd8\001\002\000\042\056\361\060\104\061\100\063\110" +
    "\064\107\065\111\066\076\072\102\073\112\074\101\075" +
    "\114\076\106\077\103\101\113\102\075\103\077\001\002" +
    "\000\004\052\362\001\002\000\032\004\061\005\074\006" +
    "\066\007\062\010\065\011\071\032\070\033\063\034\060" +
    "\050\067\061\064\100\072\001\002\000\042\044\364\060" +
    "\104\061\100\063\110\064\107\065\111\066\076\072\102" +
    "\073\112\074\101\075\114\076\106\077\103\101\113\102" +
    "\075\103\077\001\002\000\044\002\uffd7\003\uffd7\011\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\027\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\054\uffd7\001\002\000\032\004\061\005\074\006\066\007" +
    "\062\010\065\011\071\032\070\033\063\034\060\050\067" +
    "\061\064\100\072\001\002\000\042\051\367\060\104\061" +
    "\100\063\110\064\107\065\111\066\076\072\102\073\112" +
    "\074\101\075\114\076\106\077\103\101\113\102\075\103" +
    "\077\001\002\000\004\053\370\001\002\000\040\003\026" +
    "\011\023\012\030\013\011\014\006\015\031\023\040\024" +
    "\050\025\004\027\036\036\022\040\015\041\037\042\051" +
    "\043\017\001\002\000\042\003\026\011\023\012\030\013" +
    "\011\014\006\015\031\023\040\024\050\025\004\027\036" +
    "\036\022\040\015\041\037\042\051\043\017\054\372\001" +
    "\002\000\046\002\uffce\003\uffce\011\uffce\012\uffce\013\uffce" +
    "\014\uffce\015\uffce\023\uffce\024\uffce\025\uffce\027\uffce\036" +
    "\uffce\037\373\040\uffce\041\uffce\042\uffce\043\uffce\054\uffce" +
    "\001\002\000\006\036\u0101\053\u010a\001\002\000\046\002" +
    "\uffcc\003\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\027\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\054\uffcc\001\002\000\046" +
    "\002\uffd0\003\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\036\uffd0\037\376" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\054\uffd0\001\002\000" +
    "\006\036\u0101\053\u0100\001\002\000\046\002\uffcd\003\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\027\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\042\uffcd\043\uffcd\054\uffcd\001\002\000\040\003\026\011" +
    "\023\012\030\013\011\014\006\015\031\023\040\024\050" +
    "\025\004\027\036\036\022\040\015\041\037\042\051\043" +
    "\017\001\002\000\004\050\u0102\001\002\000\032\004\061" +
    "\005\074\006\066\007\062\010\065\011\071\032\070\033" +
    "\063\034\060\050\067\061\064\100\072\001\002\000\042" +
    "\051\u0104\060\104\061\100\063\110\064\107\065\111\066" +
    "\076\072\102\073\112\074\101\075\114\076\106\077\103" +
    "\101\113\102\075\103\077\001\002\000\004\053\u0105\001" +
    "\002\000\040\003\026\011\023\012\030\013\011\014\006" +
    "\015\031\023\040\024\050\025\004\027\036\036\022\040" +
    "\015\041\037\042\051\043\017\001\002\000\042\003\026" +
    "\011\023\012\030\013\011\014\006\015\031\023\040\024" +
    "\050\025\004\027\036\036\022\040\015\041\037\042\051" +
    "\043\017\054\u0107\001\002\000\046\002\uffcb\003\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\027\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\054\uffcb\001\002\000\042\003\026\011\023" +
    "\012\030\013\011\014\006\015\031\023\040\024\050\025" +
    "\004\027\036\036\022\040\015\041\037\042\051\043\017" +
    "\054\u0109\001\002\000\044\002\uffd1\003\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\054" +
    "\uffd1\001\002\000\040\003\026\011\023\012\030\013\011" +
    "\014\006\015\031\023\040\024\050\025\004\027\036\036" +
    "\022\040\015\041\037\042\051\043\017\001\002\000\042" +
    "\003\026\011\023\012\030\013\011\014\006\015\031\023" +
    "\040\024\050\025\004\027\036\036\022\040\015\041\037" +
    "\042\051\043\017\054\u010c\001\002\000\044\002\uffcf\003" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\027\uffcf\036\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\054\uffcf\001\002\000\042\053\u010e\060\104" +
    "\061\100\063\110\064\107\065\111\066\076\072\102\073" +
    "\112\074\101\075\114\076\106\077\103\101\113\102\075" +
    "\103\077\001\002\000\034\004\061\005\074\006\066\007" +
    "\062\010\065\011\071\032\070\033\063\034\060\050\067" +
    "\057\u010f\061\064\100\072\001\002\000\004\052\u0121\001" +
    "\002\000\036\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\032\uffc6\033\uffc6\034\uffc6\050\uffc6\054\uffc6\057" +
    "\uffc6\061\uffc6\100\uffc6\001\002\000\036\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\054\u0119\057\u0118\061\064\100\072\001\002" +
    "\000\042\052\u0113\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\113\102\075\103\077\001\002\000\004\076" +
    "\u0114\001\002\000\004\053\u0115\001\002\000\040\003\026" +
    "\011\023\012\030\013\011\014\006\015\031\023\040\024" +
    "\050\025\004\027\036\036\022\040\015\041\037\042\051" +
    "\043\017\001\002\000\042\003\026\011\023\012\030\013" +
    "\011\014\006\015\031\023\040\024\050\025\004\027\036" +
    "\036\022\040\015\041\037\042\051\043\017\054\u0117\001" +
    "\002\000\036\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\011\uffc5\032\uffc5\033\uffc5\034\uffc5\050\uffc5\054\uffc5\057" +
    "\uffc5\061\uffc5\100\uffc5\001\002\000\004\052\u011b\001\002" +
    "\000\044\002\uffc9\003\uffc9\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\023\uffc9\024\uffc9\025\uffc9\027\uffc9\036\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\054\uffc9\001\002\000" +
    "\036\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\032\uffc7\033\uffc7\034\uffc7\050\uffc7\054\uffc7\057\uffc7\061" +
    "\uffc7\100\uffc7\001\002\000\004\076\u011c\001\002\000\004" +
    "\053\u011d\001\002\000\040\003\026\011\023\012\030\013" +
    "\011\014\006\015\031\023\040\024\050\025\004\027\036" +
    "\036\022\040\015\041\037\042\051\043\017\001\002\000" +
    "\042\003\026\011\023\012\030\013\011\014\006\015\031" +
    "\023\040\024\050\025\004\027\036\036\022\040\015\041" +
    "\037\042\051\043\017\054\u011f\001\002\000\004\054\u0120" +
    "\001\002\000\044\002\uffca\003\uffca\011\uffca\012\uffca\013" +
    "\uffca\014\uffca\015\uffca\023\uffca\024\uffca\025\uffca\027\uffca" +
    "\036\uffca\040\uffca\041\uffca\042\uffca\043\uffca\054\uffca\001" +
    "\002\000\004\076\u0122\001\002\000\004\053\u0123\001\002" +
    "\000\040\003\026\011\023\012\030\013\011\014\006\015" +
    "\031\023\040\024\050\025\004\027\036\036\022\040\015" +
    "\041\037\042\051\043\017\001\002\000\042\003\026\011" +
    "\023\012\030\013\011\014\006\015\031\023\040\024\050" +
    "\025\004\027\036\036\022\040\015\041\037\042\051\043" +
    "\017\054\u0125\001\002\000\004\054\u0126\001\002\000\044" +
    "\002\uffc8\003\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\036\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\054\uffc8\001\002\000\004\011" +
    "\u0128\001\002\000\004\052\324\001\002\000\032\004\061" +
    "\005\074\006\066\007\062\010\065\011\071\032\070\033" +
    "\063\034\060\050\067\061\064\100\072\001\002\000\042" +
    "\044\u012b\060\104\061\100\063\110\064\107\065\111\066" +
    "\076\072\102\073\112\074\101\075\114\076\106\077\103" +
    "\101\113\102\075\103\077\001\002\000\004\011\u012c\001" +
    "\002\000\010\052\u0133\067\u0134\070\u0132\001\002\000\004" +
    "\051\u012e\001\002\000\004\053\u012f\001\002\000\040\003" +
    "\026\011\023\012\030\013\011\014\006\015\031\023\040" +
    "\024\050\025\004\027\036\036\022\040\015\041\037\042" +
    "\051\043\017\001\002\000\042\003\026\011\023\012\030" +
    "\013\011\014\006\015\031\023\040\024\050\025\004\027" +
    "\036\036\022\040\015\041\037\042\051\043\017\054\u0131" +
    "\001\002\000\044\002\uffc4\003\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4" +
    "\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\054\uffc4\001" +
    "\002\000\004\051\uffc1\001\002\000\032\004\061\005\074" +
    "\006\066\007\062\010\065\011\071\032\070\033\063\034" +
    "\060\050\067\061\064\100\072\001\002\000\004\051\uffc2" +
    "\001\002\000\042\051\uffc3\060\104\061\100\063\110\064" +
    "\107\065\111\066\076\072\102\073\112\074\101\075\114" +
    "\076\106\077\103\101\113\102\075\103\077\001\002\000" +
    "\044\002\uffbd\003\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\036\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\054\uffbd\001\002\000\032" +
    "\004\061\005\074\006\066\007\062\010\065\011\071\032" +
    "\070\033\063\034\060\050\067\061\064\100\072\001\002" +
    "\000\042\051\u0139\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\113\102\075\103\077\001\002\000\004\044" +
    "\u013a\001\002\000\044\002\uffe7\003\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\023\uffe7\024\uffe7\025\uffe7\027" +
    "\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\054\uffe7" +
    "\001\002\000\004\045\u013c\001\002\000\014\016\162\017" +
    "\166\020\164\021\163\022\161\001\002\000\010\044\u013f" +
    "\052\u0140\055\u013e\001\002\000\004\056\u0143\001\002\000" +
    "\044\002\uffe4\003\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\036\uffe4\040" +
    "\uffe4\041\uffe4\042\uffe4\043\uffe4\054\uffe4\001\002\000\032" +
    "\004\061\005\074\006\066\007\062\010\065\011\071\032" +
    "\070\033\063\034\060\050\067\061\064\100\072\001\002" +
    "\000\042\044\u0142\060\104\061\100\063\110\064\107\065" +
    "\111\066\076\072\102\073\112\074\101\075\114\076\106" +
    "\077\103\101\113\102\075\103\077\001\002\000\044\002" +
    "\uffe3\003\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\023\uffe3\024\uffe3\025\uffe3\027\uffe3\036\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\054\uffe3\001\002\000\006\052\u0145" +
    "\055\u0144\001\002\000\004\056\u0148\001\002\000\004\055" +
    "\214\001\002\000\004\044\u0147\001\002\000\044\002\uffe0" +
    "\003\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\027\uffe0\036\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\054\uffe0\001\002\000\004\052\u0149\001" +
    "\002\000\004\055\u014a\001\002\000\004\055\214\001\002" +
    "\000\006\047\232\056\u014c\001\002\000\004\044\u014d\001" +
    "\002\000\044\002\uffde\003\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\023\uffde\024\uffde\025\uffde\027\uffde\036" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\054\uffde\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014b\000\060\002\044\003\015\007\012\014\040\015" +
    "\020\016\024\017\041\020\034\021\017\022\043\023\004" +
    "\025\032\026\023\027\011\030\031\031\033\032\006\033" +
    "\013\037\045\040\046\041\007\043\026\045\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\007\054\014\040\015\020\016\024\017\041" +
    "\020\034\021\017\022\043\023\004\025\032\026\023\027" +
    "\011\030\031\031\033\032\006\033\013\037\045\040\046" +
    "\041\007\043\026\045\042\001\001\000\004\036\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\003\052\007\012\014\040\015\020\016\024" +
    "\017\041\020\034\021\017\022\043\023\004\025\032\026" +
    "\023\027\011\030\031\031\033\032\006\033\013\037\045" +
    "\040\046\041\007\043\026\045\042\001\001\000\054\007" +
    "\054\014\040\015\020\016\024\017\041\020\034\021\017" +
    "\022\043\023\004\025\032\026\023\027\011\030\031\031" +
    "\033\032\006\033\013\037\045\040\046\041\007\043\026" +
    "\045\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\157\036\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\134\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\133\001\001\000\004\036" +
    "\132\001\001\000\004\036\131\001\001\000\004\036\130" +
    "\001\001\000\004\036\127\001\001\000\004\036\126\001" +
    "\001\000\004\036\125\001\001\000\004\036\124\001\001" +
    "\000\002\001\001\000\004\036\122\001\001\000\004\036" +
    "\121\001\001\000\004\036\120\001\001\000\004\036\117" +
    "\001\001\000\004\036\116\001\001\000\004\036\115\001" +
    "\001\000\004\036\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\147\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\170\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\214\001\001\000\006\004\216\036" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\227\006\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\261\007\012\014\040\015\020" +
    "\016\024\017\041\020\034\021\017\022\043\023\004\025" +
    "\032\026\023\027\011\030\031\031\033\032\006\033\013" +
    "\037\045\040\046\041\007\043\026\045\042\001\001\000" +
    "\054\007\054\014\040\015\020\016\024\017\041\020\034" +
    "\021\017\022\043\023\004\025\032\026\023\027\011\030" +
    "\031\031\033\032\006\033\013\037\045\040\046\041\007" +
    "\043\026\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\036\267\044\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\034\277\042" +
    "\300\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\303\007\012\014\040\015\020\016" +
    "\024\017\041\020\034\021\017\022\043\023\004\025\032" +
    "\026\023\027\011\030\031\031\033\032\006\033\013\037" +
    "\045\040\046\041\007\043\026\045\042\001\001\000\054" +
    "\007\054\014\040\015\020\016\024\017\041\020\034\021" +
    "\017\022\043\023\004\025\032\026\023\027\011\030\031" +
    "\031\033\032\006\033\013\037\045\040\046\041\007\043" +
    "\026\045\042\001\001\000\002\001\001\000\004\034\312" +
    "\001\001\000\002\001\001\000\056\003\310\007\012\014" +
    "\040\015\020\016\024\017\041\020\034\021\017\022\043" +
    "\023\004\025\032\026\023\027\011\030\031\031\033\032" +
    "\006\033\013\037\045\040\046\041\007\043\026\045\042" +
    "\001\001\000\054\007\054\014\040\015\020\016\024\017" +
    "\041\020\034\021\017\022\043\023\004\025\032\026\023" +
    "\027\011\030\031\031\033\032\006\033\013\037\045\040" +
    "\046\041\007\043\026\045\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\334\001\001\000\002\001\001\000\006\036\267" +
    "\044\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\357\001\001\000\004\036\355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\365\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\370\007\012\014\040" +
    "\015\020\016\024\017\041\020\034\021\017\022\043\023" +
    "\004\025\032\026\023\027\011\030\031\031\033\032\006" +
    "\033\013\037\045\040\046\041\007\043\026\045\042\001" +
    "\001\000\054\007\054\014\040\015\020\016\024\017\041" +
    "\020\034\021\017\022\043\023\004\025\032\026\023\027" +
    "\011\030\031\031\033\032\006\033\013\037\045\040\046" +
    "\041\007\043\026\045\042\001\001\000\006\012\374\013" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\376\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\u0107\007\012\014\040\015\020\016\024\017\041" +
    "\020\034\021\017\022\043\023\004\025\032\026\023\027" +
    "\011\030\031\031\033\032\006\033\013\037\045\040\046" +
    "\041\007\043\026\045\042\001\001\000\002\001\001\000" +
    "\004\036\u0102\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\u0105\007\012\014\040\015\020\016\024\017" +
    "\041\020\034\021\017\022\043\023\004\025\032\026\023" +
    "\027\011\030\031\031\033\032\006\033\013\037\045\040" +
    "\046\041\007\043\026\045\042\001\001\000\054\007\054" +
    "\014\040\015\020\016\024\017\041\020\034\021\017\022" +
    "\043\023\004\025\032\026\023\027\011\030\031\031\033" +
    "\032\006\033\013\037\045\040\046\041\007\043\026\045" +
    "\042\001\001\000\002\001\001\000\054\007\054\014\040" +
    "\015\020\016\024\017\041\020\034\021\017\022\043\023" +
    "\004\025\032\026\023\027\011\030\031\031\033\032\006" +
    "\033\013\037\045\040\046\041\007\043\026\045\042\001" +
    "\001\000\002\001\001\000\056\003\u010a\007\012\014\040" +
    "\015\020\016\024\017\041\020\034\021\017\022\043\023" +
    "\004\025\032\026\023\027\011\030\031\031\033\032\006" +
    "\033\013\037\045\040\046\041\007\043\026\045\042\001" +
    "\001\000\054\007\054\014\040\015\020\016\024\017\041" +
    "\020\034\021\017\022\043\023\004\025\032\026\023\027" +
    "\011\030\031\031\033\032\006\033\013\037\045\040\046" +
    "\041\007\043\026\045\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u0110\011\u010f\036\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\u0119\036" +
    "\u0111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\u0115\007\012\014\040\015\020\016" +
    "\024\017\041\020\034\021\017\022\043\023\004\025\032" +
    "\026\023\027\011\030\031\031\033\032\006\033\013\037" +
    "\045\040\046\041\007\043\026\045\042\001\001\000\054" +
    "\007\054\014\040\015\020\016\024\017\041\020\034\021" +
    "\017\022\043\023\004\025\032\026\023\027\011\030\031" +
    "\031\033\032\006\033\013\037\045\040\046\041\007\043" +
    "\026\045\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\003\u011d\007\012\014\040\015\020" +
    "\016\024\017\041\020\034\021\017\022\043\023\004\025" +
    "\032\026\023\027\011\030\031\031\033\032\006\033\013" +
    "\037\045\040\046\041\007\043\026\045\042\001\001\000" +
    "\054\007\054\014\040\015\020\016\024\017\041\020\034" +
    "\021\017\022\043\023\004\025\032\026\023\027\011\030" +
    "\031\031\033\032\006\033\013\037\045\040\046\041\007" +
    "\043\026\045\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0123" +
    "\007\012\014\040\015\020\016\024\017\041\020\034\021" +
    "\017\022\043\023\004\025\032\026\023\027\011\030\031" +
    "\031\033\032\006\033\013\037\045\040\046\041\007\043" +
    "\026\045\042\001\001\000\054\007\054\014\040\015\020" +
    "\016\024\017\041\020\034\021\017\022\043\023\004\025" +
    "\032\026\023\027\011\030\031\031\033\032\006\033\013" +
    "\037\045\040\046\041\007\043\026\045\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\u0128\001\001" +
    "\000\002\001\001\000\004\036\u0129\001\001\000\002\001" +
    "\001\000\004\024\u012c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\003\u012f\007\012\014" +
    "\040\015\020\016\024\017\041\020\034\021\017\022\043" +
    "\023\004\025\032\026\023\027\011\030\031\031\033\032" +
    "\006\033\013\037\045\040\046\041\007\043\026\045\042" +
    "\001\001\000\054\007\054\014\040\015\020\016\024\017" +
    "\041\020\034\021\017\022\043\023\004\025\032\026\023" +
    "\027\011\030\031\031\033\032\006\033\013\037\045\040" +
    "\046\041\007\043\026\045\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u0134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u0140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\227\006\u014a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIGNACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= APPENDD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= REMOVEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= START 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= error LLAVE2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, c , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, true, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, false, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(true, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(false, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_1 ::= LISTA_1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTA_1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LISTA_2 ::= LISTA_2 COMA AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LISTA_2 ::= AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AGRUPAR_VALORES ::= CORCHETE1 LISTA_1 CORCHETE2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGRUPAR_VALORES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACIONLISTA ::= LIST MENOR TIPOS_LISTAS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT=new DeclaracionLista(b, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // APPENDD ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT=new AppendLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // REMOVEE ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVEE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INCREMENTO ::= ID MAS_MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECREMENTO ::= ID MENOS_MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(b, a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE_IF_LIST ::= ELSE_IF_LIST ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Else_> a = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ b = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE_IF_LIST ::= ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ a = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE_IF_CLAUSE ::= ELSE IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Else_ RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else_(new Condicion(a, aleft, aright), b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_CLAUSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SMATCH ::= MATCH EXPRESION LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASOS_S_S ::= CASOS_S_S CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASOS_S_S ::= CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASOS_S ::= EXPRESION IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ACTUALIZA_FOR ::= ID MAS_MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ACTUALIZA_FOR ::= ID MENOS_MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // METODO ::= VOID ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new Metodo(a, b, c, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // METODO ::= VOID ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new Metodo(a, b, new LinkedList<HashMap>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // START ::= START_WITH ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Start(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // START ::= START_WITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Start(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LLAMADA ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // TIPOS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TIPOS_LISTAS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TIPOS_LISTAS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TIPOS_LISTAS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TIPOS_LISTAS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TIPOS_LISTAS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TIPOS_LISTAS ::= LIST 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.LISTA);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION DOBLE_ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION PORCENTUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= EXPRESION NOT_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.valueOf(((String) a).toLowerCase()), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= TOSTRING PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= ID PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
