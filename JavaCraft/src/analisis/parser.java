
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVector;
import instrucciones.AsignacionVC;
import instrucciones.AsignacionVector;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Else_;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;
import expresiones.AccesoVector;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\004" +
    "\000\002\007\004\000\002\014\007\000\002\015\007\000" +
    "\002\015\011\000\002\015\007\000\002\015\011\000\002" +
    "\017\006\000\002\016\013\000\002\016\013\000\002\016" +
    "\017\000\002\016\017\000\002\004\005\000\002\004\003" +
    "\000\002\006\005\000\002\006\003\000\002\005\005\000" +
    "\002\020\011\000\002\020\014\000\002\021\005\000\002" +
    "\022\005\000\002\023\016\000\002\023\012\000\002\023" +
    "\015\000\002\023\011\000\002\012\004\000\002\012\003" +
    "\000\002\013\012\000\002\027\015\000\002\027\007\000" +
    "\002\027\014\000\002\010\004\000\002\010\003\000\002" +
    "\011\010\000\002\024\014\000\002\030\005\000\002\030" +
    "\004\000\002\030\004\000\002\025\011\000\002\026\013" +
    "\000\002\031\004\000\002\032\004\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\004\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\004\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\006\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\006\000\002" +
    "\034\011\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\032\003\026\011\016\012\022\013\005\014" +
    "\014\022\036\023\025\024\015\026\034\027\007\030\017" +
    "\031\035\001\002\000\036\002\ufffe\003\ufffe\011\ufffe\012" +
    "\ufffe\013\ufffe\014\ufffe\022\ufffe\023\ufffe\024\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\031\ufffe\041\ufffe\001\002\000\004\032" +
    "\364\001\002\000\036\002\ufff1\003\ufff1\011\ufff1\012\ufff1" +
    "\013\ufff1\014\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\041\ufff1\001\002\000\004\035\356" +
    "\001\002\000\036\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\014\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\041\ufff9\001\002\000\036\002\ufffc\003" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\041\ufffc\001" +
    "\002\000\034\002\000\003\026\011\016\012\022\013\005" +
    "\014\014\022\036\023\025\024\015\026\034\027\007\030" +
    "\017\031\035\001\002\000\036\002\ufff6\003\ufff6\011\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\022\ufff6\023\ufff6\024\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\041\ufff6\001\002\000\004" +
    "\035\352\001\002\000\004\035\322\001\002\000\012\037" +
    "\241\042\302\054\304\055\303\001\002\000\004\040\272" +
    "\001\002\000\036\002\ufff0\003\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\022\ufff0\023\ufff0\024\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\041\ufff0\001\002\000\036\002\ufffa\003" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\041\ufffa\001" +
    "\002\000\004\032\271\001\002\000\036\002\ufff8\003\ufff8" +
    "\011\ufff8\012\ufff8\013\ufff8\014\ufff8\022\ufff8\023\ufff8\024" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\041\ufff8\001\002" +
    "\000\036\002\ufffb\003\ufffb\011\ufffb\012\ufffb\013\ufffb\014" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\026\ufffb\027\ufffb\030\ufffb" +
    "\031\ufffb\041\ufffb\001\002\000\004\011\246\001\002\000" +
    "\006\032\244\041\245\001\002\000\036\002\ufff3\003\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\041\ufff3\001\002" +
    "\000\036\002\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\041\ufff7\001\002\000\036\002\ufff4\003\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\022\ufff4\023\ufff4\024\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\041\ufff4\001\002\000" +
    "\036\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\041\ufffd\001\002\000\036\002\ufff2\003\ufff2\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\022\ufff2\023\ufff2\024\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\031\ufff2\041\ufff2\001\002\000\004" +
    "\035\222\001\002\000\024\004\055\005\066\006\061\007" +
    "\056\010\060\011\063\035\062\046\057\065\064\001\002" +
    "\000\004\011\042\001\002\000\036\002\ufff5\003\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\022\ufff5\023\ufff5\024\ufff5" +
    "\026\ufff5\027\ufff5\030\ufff5\031\ufff5\041\ufff5\001\002\000" +
    "\004\002\041\001\002\000\004\002\001\001\002\000\004" +
    "\033\043\001\002\000\014\015\051\016\044\017\047\020" +
    "\050\021\046\001\002\000\012\032\uffc4\036\uffc4\037\uffc4" +
    "\042\uffc4\001\002\000\010\032\053\037\054\042\052\001" +
    "\002\000\012\032\uffc1\036\uffc1\037\uffc1\042\uffc1\001\002" +
    "\000\012\032\uffc3\036\uffc3\037\uffc3\042\uffc3\001\002\000" +
    "\012\032\uffc2\036\uffc2\037\uffc2\042\uffc2\001\002\000\012" +
    "\032\uffc5\036\uffc5\037\uffc5\042\uffc5\001\002\000\004\043" +
    "\143\001\002\000\036\002\uffec\003\uffec\011\uffec\012\uffec" +
    "\013\uffec\014\uffec\022\uffec\023\uffec\024\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\041\uffec\001\002\000\024\004\055" +
    "\005\066\006\061\007\056\010\060\011\063\035\062\046" +
    "\057\065\064\001\002\000\054\032\uffac\034\uffac\036\uffac" +
    "\037\uffac\040\uffac\043\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\066\uffac\067\uffac\070\uffac\001\002\000" +
    "\054\032\uffad\034\uffad\036\uffad\037\uffad\040\uffad\043\uffad" +
    "\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\066\uffad" +
    "\067\uffad\070\uffad\001\002\000\024\004\055\005\066\006" +
    "\061\007\056\010\060\011\063\035\062\046\057\065\064" +
    "\001\002\000\054\032\uffaa\034\uffaa\036\uffaa\037\uffaa\040" +
    "\uffaa\043\uffaa\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa" +
    "\053\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064" +
    "\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002\000\054\032\uffae" +
    "\034\uffae\036\uffae\037\uffae\040\uffae\043\uffae\045\uffae\046" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\057\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\064\uffae\066\uffae\067\uffae\070" +
    "\uffae\001\002\000\036\004\055\005\066\006\061\007\056" +
    "\010\060\011\063\015\051\016\044\017\047\020\050\021" +
    "\046\035\062\046\057\065\064\001\002\000\056\032\uffa9" +
    "\034\uffa9\036\uffa9\037\uffa9\040\uffa9\042\127\043\uffa9\045" +
    "\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\067" +
    "\uffa9\070\uffa9\001\002\000\024\004\055\005\066\006\061" +
    "\007\056\010\060\011\063\035\062\046\057\065\064\001" +
    "\002\000\042\032\100\045\076\046\072\050\103\051\101" +
    "\052\102\053\071\057\074\060\106\061\073\062\104\063" +
    "\077\064\075\066\105\067\067\070\070\001\002\000\054" +
    "\032\uffab\034\uffab\036\uffab\037\uffab\040\uffab\043\uffab\045" +
    "\uffab\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab\057\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\066\uffab\067" +
    "\uffab\070\uffab\001\002\000\024\004\055\005\066\006\061" +
    "\007\056\010\060\011\063\035\062\046\057\065\064\001" +
    "\002\000\024\004\055\005\066\006\061\007\056\010\060" +
    "\011\063\035\062\046\057\065\064\001\002\000\024\004" +
    "\055\005\066\006\061\007\056\010\060\011\063\035\062" +
    "\046\057\065\064\001\002\000\024\004\055\005\066\006" +
    "\061\007\056\010\060\011\063\035\062\046\057\065\064" +
    "\001\002\000\024\004\055\005\066\006\061\007\056\010" +
    "\060\011\063\035\062\046\057\065\064\001\002\000\024" +
    "\004\055\005\066\006\061\007\056\010\060\011\063\035" +
    "\062\046\057\065\064\001\002\000\024\004\055\005\066" +
    "\006\061\007\056\010\060\011\063\035\062\046\057\065" +
    "\064\001\002\000\024\004\055\005\066\006\061\007\056" +
    "\010\060\011\063\035\062\046\057\065\064\001\002\000" +
    "\024\004\055\005\066\006\061\007\056\010\060\011\063" +
    "\035\062\046\057\065\064\001\002\000\036\002\uffeb\003" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\041\uffeb\001" +
    "\002\000\024\004\055\005\066\006\061\007\056\010\060" +
    "\011\063\035\062\046\057\065\064\001\002\000\024\004" +
    "\055\005\066\006\061\007\056\010\060\011\063\035\062" +
    "\046\057\065\064\001\002\000\024\004\055\005\066\006" +
    "\061\007\056\010\060\011\063\035\062\046\057\065\064" +
    "\001\002\000\024\004\055\005\066\006\061\007\056\010" +
    "\060\011\063\035\062\046\057\065\064\001\002\000\024" +
    "\004\055\005\066\006\061\007\056\010\060\011\063\035" +
    "\062\046\057\065\064\001\002\000\024\004\055\005\066" +
    "\006\061\007\056\010\060\011\063\035\062\046\057\065" +
    "\064\001\002\000\054\032\uffb8\034\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\043\uffb8\045\076\046\072\050\103\051\101\052" +
    "\102\053\071\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\066\uffb8\067\uffb8\070\uffb8\001\002\000\054\032" +
    "\uffb0\034\uffb0\036\uffb0\037\uffb0\040\uffb0\043\uffb0\045\076" +
    "\046\072\050\103\051\101\052\102\053\071\057\074\060" +
    "\106\061\073\062\104\063\077\064\075\066\uffb0\067\067" +
    "\070\070\001\002\000\054\032\uffb6\034\uffb6\036\uffb6\037" +
    "\uffb6\040\uffb6\043\uffb6\045\076\046\072\050\103\051\101" +
    "\052\102\053\071\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063" +
    "\uffb6\064\uffb6\066\uffb6\067\uffb6\070\uffb6\001\002\000\054" +
    "\032\uffbc\034\uffbc\036\uffbc\037\uffbc\040\uffbc\043\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\052\102\053\uffbc\057\uffbc" +
    "\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc\067" +
    "\uffbc\070\uffbc\001\002\000\052\032\uffbf\034\uffbf\036\uffbf" +
    "\037\uffbf\040\uffbf\043\uffbf\045\uffbf\046\uffbf\050\uffbf\051" +
    "\uffbf\053\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\066\uffbf\067\uffbf\070\uffbf\001\002\000\054\032" +
    "\uffbe\034\uffbe\036\uffbe\037\uffbe\040\uffbe\043\uffbe\045\uffbe" +
    "\046\uffbe\050\uffbe\051\uffbe\052\102\053\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\001\002\000\054\032\uffb5\034\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\043\uffb5\045\076\046\072\050\103\051\101" +
    "\052\102\053\071\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\066\uffb5\067\uffb5\070\uffb5\001\002\000\054" +
    "\032\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb\043\uffbb\045" +
    "\uffbb\046\uffbb\050\103\051\101\052\102\053\071\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\067" +
    "\uffbb\070\uffbb\001\002\000\054\032\uffb4\034\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\043\uffb4\045\076\046\072\050\103\051" +
    "\101\052\102\053\071\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\066\uffb4\067\uffb4\070\uffb4\001\002\000" +
    "\054\032\uffb9\034\uffb9\036\uffb9\037\uffb9\040\uffb9\043\uffb9" +
    "\045\076\046\072\050\103\051\101\052\102\053\071\057" +
    "\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9" +
    "\067\uffb9\070\uffb9\001\002\000\054\032\uffb7\034\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\043\uffb7\045\076\046\072\050\103" +
    "\051\101\052\102\053\071\057\uffb7\060\uffb7\061\uffb7\062" +
    "\uffb7\063\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7\001\002" +
    "\000\054\032\uffba\034\uffba\036\uffba\037\uffba\040\uffba\043" +
    "\uffba\045\uffba\046\uffba\050\103\051\101\052\102\053\071" +
    "\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\066" +
    "\uffba\067\uffba\070\uffba\001\002\000\054\032\uffbd\034\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\043\uffbd\045\uffbd\046\uffbd\050" +
    "\uffbd\051\uffbd\052\102\053\uffbd\057\uffbd\060\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\066\uffbd\067\uffbd\070\uffbd\001" +
    "\002\000\054\032\uffb1\034\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\043\uffb1\045\076\046\072\050\103\051\101\052\102\053" +
    "\071\057\074\060\106\061\073\062\104\063\077\064\075" +
    "\066\uffb1\067\uffb1\070\uffb1\001\002\000\054\032\uffb2\034" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\043\uffb2\045\076\046\072" +
    "\050\103\051\101\052\102\053\071\057\074\060\106\061" +
    "\073\062\104\063\077\064\075\066\uffb2\067\uffb2\070\070" +
    "\001\002\000\054\032\uffb3\034\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\043\uffb3\045\076\046\072\050\103\051\101\052\102" +
    "\053\071\057\074\060\106\061\073\062\104\063\077\064" +
    "\075\066\uffb3\067\uffb3\070\uffb3\001\002\000\024\004\055" +
    "\005\066\006\061\007\056\010\060\011\063\035\062\046" +
    "\057\065\064\001\002\000\042\043\131\045\076\046\072" +
    "\050\103\051\101\052\102\053\071\057\074\060\106\061" +
    "\073\062\104\063\077\064\075\066\105\067\067\070\070" +
    "\001\002\000\056\032\uffa8\034\uffa8\036\uffa8\037\uffa8\040" +
    "\uffa8\042\132\043\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\066\uffa8\067\uffa8\070\uffa8\001\002\000\024" +
    "\004\055\005\066\006\061\007\056\010\060\011\063\035" +
    "\062\046\057\065\064\001\002\000\042\043\134\045\076" +
    "\046\072\050\103\051\101\052\102\053\071\057\074\060" +
    "\106\061\073\062\104\063\077\064\075\066\105\067\067" +
    "\070\070\001\002\000\054\032\uffa7\034\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\043\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\066\uffa7\067\uffa7\070\uffa7\001\002\000\042" +
    "\036\141\045\076\046\072\050\103\051\101\052\102\053" +
    "\071\057\074\060\106\061\073\062\104\063\077\064\075" +
    "\066\105\067\067\070\070\001\002\000\004\036\137\001" +
    "\002\000\024\004\055\005\066\006\061\007\056\010\060" +
    "\011\063\035\062\046\057\065\064\001\002\000\054\032" +
    "\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\043\uffaf\045\076" +
    "\046\072\050\103\051\101\052\102\053\071\057\uffaf\060" +
    "\uffaf\061\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\001\002\000\054\032\uffa6\034\uffa6\036\uffa6\037" +
    "\uffa6\040\uffa6\043\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063" +
    "\uffa6\064\uffa6\066\uffa6\067\uffa6\070\uffa6\001\002\000\054" +
    "\032\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\043\uffc0\045" +
    "\uffc0\046\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0\057\uffc0" +
    "\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\067" +
    "\uffc0\070\uffc0\001\002\000\006\037\145\042\144\001\002" +
    "\000\004\043\156\001\002\000\004\042\146\001\002\000" +
    "\024\004\055\005\066\006\061\007\056\010\060\011\063" +
    "\035\062\046\057\065\064\001\002\000\004\032\150\001" +
    "\002\000\036\002\uffe7\003\uffe7\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\041\uffe7\001\002\000\006\034\153\043\154" +
    "\001\002\000\044\034\uffe2\043\uffe2\045\076\046\072\050" +
    "\103\051\101\052\102\053\071\057\074\060\106\061\073" +
    "\062\104\063\077\064\075\066\105\067\067\070\070\001" +
    "\002\000\024\004\055\005\066\006\061\007\056\010\060" +
    "\011\063\035\062\046\057\065\064\001\002\000\010\032" +
    "\uffdf\034\uffdf\043\uffdf\001\002\000\044\034\uffe3\043\uffe3" +
    "\045\076\046\072\050\103\051\101\052\102\053\071\057" +
    "\074\060\106\061\073\062\104\063\077\064\075\066\105" +
    "\067\067\070\070\001\002\000\004\037\157\001\002\000" +
    "\004\042\160\001\002\000\004\042\146\001\002\000\006" +
    "\034\164\043\163\001\002\000\006\034\uffe0\043\uffe0\001" +
    "\002\000\004\032\166\001\002\000\004\042\146\001\002" +
    "\000\006\034\uffe1\043\uffe1\001\002\000\036\002\uffe5\003" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\041\uffe5\001" +
    "\002\000\042\040\170\045\076\046\072\050\103\051\101" +
    "\052\102\053\071\057\074\060\106\061\073\062\104\063" +
    "\077\064\075\066\105\067\067\070\070\001\002\000\026" +
    "\004\055\005\066\006\061\007\056\010\060\011\063\035" +
    "\062\044\171\046\057\065\064\001\002\000\004\037\214" +
    "\001\002\000\030\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\035\uffcf\041\uffcf\044\uffcf\046\uffcf\065\uffcf" +
    "\001\002\000\030\004\055\005\066\006\061\007\056\010" +
    "\060\011\063\035\062\041\204\044\203\046\057\065\064" +
    "\001\002\000\042\037\175\045\076\046\072\050\103\051" +
    "\101\052\102\053\071\057\074\060\106\061\073\062\104" +
    "\063\077\064\075\066\105\067\067\070\070\001\002\000" +
    "\004\063\176\001\002\000\004\040\177\001\002\000\032" +
    "\003\026\011\016\012\022\013\005\014\014\022\036\023" +
    "\025\024\015\026\034\027\007\030\017\031\035\001\002" +
    "\000\034\003\026\011\016\012\022\013\005\014\014\022" +
    "\036\023\025\024\015\026\034\027\007\030\017\031\035" +
    "\041\202\001\002\000\036\002\uffff\003\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\022\uffff\023\uffff\024\uffff\026\uffff" +
    "\027\uffff\030\uffff\031\uffff\041\uffff\001\002\000\030\004" +
    "\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\035\uffce" +
    "\041\uffce\044\uffce\046\uffce\065\uffce\001\002\000\004\037" +
    "\206\001\002\000\036\002\uffd2\003\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\041\uffd2\001\002\000\030\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\035\uffd0\041" +
    "\uffd0\044\uffd0\046\uffd0\065\uffd0\001\002\000\004\063\207" +
    "\001\002\000\004\040\210\001\002\000\032\003\026\011" +
    "\016\012\022\013\005\014\014\022\036\023\025\024\015" +
    "\026\034\027\007\030\017\031\035\001\002\000\034\003" +
    "\026\011\016\012\022\013\005\014\014\022\036\023\025" +
    "\024\015\026\034\027\007\030\017\031\035\041\212\001" +
    "\002\000\004\041\213\001\002\000\036\002\uffd3\003\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\041\uffd3\001\002" +
    "\000\004\063\215\001\002\000\004\040\216\001\002\000" +
    "\032\003\026\011\016\012\022\013\005\014\014\022\036" +
    "\023\025\024\015\026\034\027\007\030\017\031\035\001" +
    "\002\000\034\003\026\011\016\012\022\013\005\014\014" +
    "\022\036\023\025\024\015\026\034\027\007\030\017\031" +
    "\035\041\220\001\002\000\004\041\221\001\002\000\036" +
    "\002\uffd1\003\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\041\uffd1\001\002\000\004\011\223\001\002\000\004\037" +
    "\241\001\002\000\024\004\055\005\066\006\061\007\056" +
    "\010\060\011\063\035\062\046\057\065\064\001\002\000" +
    "\042\032\226\045\076\046\072\050\103\051\101\052\102" +
    "\053\071\057\074\060\106\061\073\062\104\063\077\064" +
    "\075\066\105\067\067\070\070\001\002\000\004\011\227" +
    "\001\002\000\010\037\236\054\237\055\235\001\002\000" +
    "\004\036\231\001\002\000\004\040\232\001\002\000\032" +
    "\003\026\011\016\012\022\013\005\014\014\022\036\023" +
    "\025\024\015\026\034\027\007\030\017\031\035\001\002" +
    "\000\034\003\026\011\016\012\022\013\005\014\014\022" +
    "\036\023\025\024\015\026\034\027\007\030\017\031\035" +
    "\041\234\001\002\000\036\002\uffcd\003\uffcd\011\uffcd\012" +
    "\uffcd\013\uffcd\014\uffcd\022\uffcd\023\uffcd\024\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\041\uffcd\001\002\000\004\036" +
    "\uffca\001\002\000\024\004\055\005\066\006\061\007\056" +
    "\010\060\011\063\035\062\046\057\065\064\001\002\000" +
    "\004\036\uffcb\001\002\000\042\036\uffcc\045\076\046\072" +
    "\050\103\051\101\052\102\053\071\057\074\060\106\061" +
    "\073\062\104\063\077\064\075\066\105\067\067\070\070" +
    "\001\002\000\024\004\055\005\066\006\061\007\056\010" +
    "\060\011\063\035\062\046\057\065\064\001\002\000\042" +
    "\032\243\045\076\046\072\050\103\051\101\052\102\053" +
    "\071\057\074\060\106\061\073\062\104\063\077\064\075" +
    "\066\105\067\067\070\070\001\002\000\056\002\uffe8\003" +
    "\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\022\uffe8\023\uffe8\024\uffe8\026" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\035\uffe8\041\uffe8\046\uffe8" +
    "\065\uffe8\001\002\000\036\002\uffef\003\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\022\uffef\023\uffef\024\uffef\026\uffef" +
    "\027\uffef\030\uffef\031\uffef\041\uffef\001\002\000\036\002" +
    "\uffee\003\uffee\011\uffee\012\uffee\013\uffee\014\uffee\022\uffee" +
    "\023\uffee\024\uffee\026\uffee\027\uffee\030\uffee\031\uffee\041" +
    "\uffee\001\002\000\004\033\247\001\002\000\014\015\051" +
    "\016\044\017\047\020\050\021\046\001\002\000\010\032" +
    "\252\037\253\042\251\001\002\000\004\043\256\001\002" +
    "\000\036\002\uffea\003\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\022\uffea\023\uffea\024\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\041\uffea\001\002\000\024\004\055\005\066\006" +
    "\061\007\056\010\060\011\063\035\062\046\057\065\064" +
    "\001\002\000\042\032\255\045\076\046\072\050\103\051" +
    "\101\052\102\053\071\057\074\060\106\061\073\062\104" +
    "\063\077\064\075\066\105\067\067\070\070\001\002\000" +
    "\036\002\uffe9\003\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\041\uffe9\001\002\000\006\037\260\042\257\001\002" +
    "\000\004\043\263\001\002\000\004\042\146\001\002\000" +
    "\004\032\262\001\002\000\036\002\uffe6\003\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\022\uffe6\023\uffe6\024\uffe6\026" +
    "\uffe6\027\uffe6\030\uffe6\031\uffe6\041\uffe6\001\002\000\004" +
    "\037\264\001\002\000\004\042\265\001\002\000\004\042" +
    "\146\001\002\000\006\034\164\043\267\001\002\000\004" +
    "\032\270\001\002\000\036\002\uffe4\003\uffe4\011\uffe4\012" +
    "\uffe4\013\uffe4\014\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\041\uffe4\001\002\000\036\002" +
    "\uffc7\003\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\041" +
    "\uffc7\001\002\000\032\003\026\011\016\012\022\013\005" +
    "\014\014\022\036\023\025\024\015\026\034\027\007\030" +
    "\017\031\035\001\002\000\034\003\026\011\016\012\022" +
    "\013\005\014\014\022\036\023\025\024\015\026\034\027" +
    "\007\030\017\031\035\041\274\001\002\000\004\027\275" +
    "\001\002\000\004\035\276\001\002\000\024\004\055\005" +
    "\066\006\061\007\056\010\060\011\063\035\062\046\057" +
    "\065\064\001\002\000\042\036\300\045\076\046\072\050" +
    "\103\051\101\052\102\053\071\057\074\060\106\061\073" +
    "\062\104\063\077\064\075\066\105\067\067\070\070\001" +
    "\002\000\004\032\301\001\002\000\036\002\uffc8\003\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\041\uffc8\001\002" +
    "\000\024\004\055\005\066\006\061\007\056\010\060\011" +
    "\063\035\062\046\057\065\064\001\002\000\004\032\306" +
    "\001\002\000\004\032\305\001\002\000\036\002\uffdc\003" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\022\uffdc\023\uffdc" +
    "\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\041\uffdc\001" +
    "\002\000\036\002\uffdb\003\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030" +
    "\uffdb\031\uffdb\041\uffdb\001\002\000\042\043\310\045\076" +
    "\046\072\050\103\051\101\052\102\053\071\057\074\060" +
    "\106\061\073\062\104\063\077\064\075\066\105\067\067" +
    "\070\070\001\002\000\006\037\312\042\311\001\002\000" +
    "\024\004\055\005\066\006\061\007\056\010\060\011\063" +
    "\035\062\046\057\065\064\001\002\000\024\004\055\005" +
    "\066\006\061\007\056\010\060\011\063\035\062\046\057" +
    "\065\064\001\002\000\042\032\314\045\076\046\072\050" +
    "\103\051\101\052\102\053\071\057\074\060\106\061\073" +
    "\062\104\063\077\064\075\066\105\067\067\070\070\001" +
    "\002\000\036\002\uffde\003\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\022\uffde\023\uffde\024\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\041\uffde\001\002\000\042\043\316\045\076" +
    "\046\072\050\103\051\101\052\102\053\071\057\074\060" +
    "\106\061\073\062\104\063\077\064\075\066\105\067\067" +
    "\070\070\001\002\000\004\037\317\001\002\000\024\004" +
    "\055\005\066\006\061\007\056\010\060\011\063\035\062" +
    "\046\057\065\064\001\002\000\042\032\321\045\076\046" +
    "\072\050\103\051\101\052\102\053\071\057\074\060\106" +
    "\061\073\062\104\063\077\064\075\066\105\067\067\070" +
    "\070\001\002\000\036\002\uffdd\003\uffdd\011\uffdd\012\uffdd" +
    "\013\uffdd\014\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\041\uffdd\001\002\000\024\004\055" +
    "\005\066\006\061\007\056\010\060\011\063\035\062\046" +
    "\057\065\064\001\002\000\042\036\324\045\076\046\072" +
    "\050\103\051\101\052\102\053\071\057\074\060\106\061" +
    "\073\062\104\063\077\064\075\066\105\067\067\070\070" +
    "\001\002\000\004\040\325\001\002\000\032\003\026\011" +
    "\016\012\022\013\005\014\014\022\036\023\025\024\015" +
    "\026\034\027\007\030\017\031\035\001\002\000\034\003" +
    "\026\011\016\012\022\013\005\014\014\022\036\023\025" +
    "\024\015\026\034\027\007\030\017\031\035\041\327\001" +
    "\002\000\040\002\uffd7\003\uffd7\011\uffd7\012\uffd7\013\uffd7" +
    "\014\uffd7\022\uffd7\023\uffd7\024\uffd7\025\330\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\041\uffd7\001\002\000\006\024\336" +
    "\040\347\001\002\000\040\002\uffd5\003\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\014\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\041\uffd5\001\002\000" +
    "\040\002\uffd9\003\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\333\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\041\uffd9\001\002\000\006\024\336\040\335" +
    "\001\002\000\040\002\uffd6\003\uffd6\011\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\041\uffd6\001\002\000\032\003" +
    "\026\011\016\012\022\013\005\014\014\022\036\023\025" +
    "\024\015\026\034\027\007\030\017\031\035\001\002\000" +
    "\004\035\337\001\002\000\024\004\055\005\066\006\061" +
    "\007\056\010\060\011\063\035\062\046\057\065\064\001" +
    "\002\000\042\036\341\045\076\046\072\050\103\051\101" +
    "\052\102\053\071\057\074\060\106\061\073\062\104\063" +
    "\077\064\075\066\105\067\067\070\070\001\002\000\004" +
    "\040\342\001\002\000\032\003\026\011\016\012\022\013" +
    "\005\014\014\022\036\023\025\024\015\026\034\027\007" +
    "\030\017\031\035\001\002\000\034\003\026\011\016\012" +
    "\022\013\005\014\014\022\036\023\025\024\015\026\034" +
    "\027\007\030\017\031\035\041\344\001\002\000\040\002" +
    "\uffd4\003\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\041\uffd4\001\002\000\034\003\026\011\016\012\022" +
    "\013\005\014\014\022\036\023\025\024\015\026\034\027" +
    "\007\030\017\031\035\041\346\001\002\000\036\002\uffda" +
    "\003\uffda\011\uffda\012\uffda\013\uffda\014\uffda\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\041\uffda" +
    "\001\002\000\032\003\026\011\016\012\022\013\005\014" +
    "\014\022\036\023\025\024\015\026\034\027\007\030\017" +
    "\031\035\001\002\000\034\003\026\011\016\012\022\013" +
    "\005\014\014\022\036\023\025\024\015\026\034\027\007" +
    "\030\017\031\035\041\351\001\002\000\036\002\uffd8\003" +
    "\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\041\uffd8\001" +
    "\002\000\024\004\055\005\066\006\061\007\056\010\060" +
    "\011\063\035\062\046\057\065\064\001\002\000\042\036" +
    "\354\045\076\046\072\050\103\051\101\052\102\053\071" +
    "\057\074\060\106\061\073\062\104\063\077\064\075\066" +
    "\105\067\067\070\070\001\002\000\004\032\355\001\002" +
    "\000\036\002\uffed\003\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\022\uffed\023\uffed\024\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\041\uffed\001\002\000\024\004\055\005\066\006" +
    "\061\007\056\010\060\011\063\035\062\046\057\065\064" +
    "\001\002\000\042\036\360\045\076\046\072\050\103\051" +
    "\101\052\102\053\071\057\074\060\106\061\073\062\104" +
    "\063\077\064\075\066\105\067\067\070\070\001\002\000" +
    "\004\040\361\001\002\000\032\003\026\011\016\012\022" +
    "\013\005\014\014\022\036\023\025\024\015\026\034\027" +
    "\007\030\017\031\035\001\002\000\034\003\026\011\016" +
    "\012\022\013\005\014\014\022\036\023\025\024\015\026" +
    "\034\027\007\030\017\031\035\041\363\001\002\000\036" +
    "\002\uffc9\003\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\022" +
    "\uffc9\023\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\041\uffc9\001\002\000\036\002\uffc6\003\uffc6\011\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\022\uffc6\023\uffc6\024\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\041\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\044\002\037\003\011\007\003\014\031\015" +
    "\010\016\023\017\020\020\007\021\022\022\027\023\012" +
    "\024\030\025\026\026\032\027\036\031\005\032\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\007\200\014\031\015\010\016\023\017\020\020\007" +
    "\021\022\022\027\023\012\024\030\025\026\026\032\027" +
    "\036\031\005\032\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\135\034\134\001\001\000\002\001" +
    "\001\000\004\034\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\124\001\001\000\004\034\123\001" +
    "\001\000\004\034\122\001\001\000\004\034\121\001\001" +
    "\000\004\034\120\001\001\000\004\034\117\001\001\000" +
    "\004\034\116\001\001\000\004\034\115\001\001\000\004" +
    "\034\114\001\001\000\002\001\001\000\004\034\113\001" +
    "\001\000\004\034\112\001\001\000\004\034\111\001\001" +
    "\000\004\034\110\001\001\000\004\034\107\001\001\000" +
    "\004\034\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\034\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\132\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\146\001\001\000\006\004\150\034\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\161\006\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\172\011\171\034\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\204\034\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\003\177\007\003\014\031\015\010\016\023\017\020" +
    "\020\007\021\022\022\027\023\012\024\030\025\026\026" +
    "\032\027\036\031\005\032\017\001\001\000\040\007\200" +
    "\014\031\015\010\016\023\017\020\020\007\021\022\022" +
    "\027\023\012\024\030\025\026\026\032\027\036\031\005" +
    "\032\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\003\210\007\003\014" +
    "\031\015\010\016\023\017\020\020\007\021\022\022\027" +
    "\023\012\024\030\025\026\026\032\027\036\031\005\032" +
    "\017\001\001\000\040\007\200\014\031\015\010\016\023" +
    "\017\020\020\007\021\022\022\027\023\012\024\030\025" +
    "\026\026\032\027\036\031\005\032\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\216\007\003\014\031\015\010\016\023" +
    "\017\020\020\007\021\022\022\027\023\012\024\030\025" +
    "\026\026\032\027\036\031\005\032\017\001\001\000\040" +
    "\007\200\014\031\015\010\016\023\017\020\020\007\021" +
    "\022\022\027\023\012\024\030\025\026\026\032\027\036" +
    "\031\005\032\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\223\001\001\000\002\001\001\000\004" +
    "\034\224\001\001\000\002\001\001\000\004\030\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\003\232\007\003\014\031\015\010\016\023\017" +
    "\020\020\007\021\022\022\027\023\012\024\030\025\026" +
    "\026\032\027\036\031\005\032\017\001\001\000\040\007" +
    "\200\014\031\015\010\016\023\017\020\020\007\021\022" +
    "\022\027\023\012\024\030\025\026\026\032\027\036\031" +
    "\005\032\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\161\006\265\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\272" +
    "\007\003\014\031\015\010\016\023\017\020\020\007\021" +
    "\022\022\027\023\012\024\030\025\026\026\032\027\036" +
    "\031\005\032\017\001\001\000\040\007\200\014\031\015" +
    "\010\016\023\017\020\020\007\021\022\022\027\023\012" +
    "\024\030\025\026\026\032\027\036\031\005\032\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\306\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\034\314\001\001\000\004" +
    "\034\312\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\003\325" +
    "\007\003\014\031\015\010\016\023\017\020\020\007\021" +
    "\022\022\027\023\012\024\030\025\026\026\032\027\036" +
    "\031\005\032\017\001\001\000\040\007\200\014\031\015" +
    "\010\016\023\017\020\020\007\021\022\022\027\023\012" +
    "\024\030\025\026\026\032\027\036\031\005\032\017\001" +
    "\001\000\006\012\331\013\330\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\333\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\003\344\007\003\014\031" +
    "\015\010\016\023\017\020\020\007\021\022\022\027\023" +
    "\012\024\030\025\026\026\032\027\036\031\005\032\017" +
    "\001\001\000\002\001\001\000\004\034\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\003\342\007\003" +
    "\014\031\015\010\016\023\017\020\020\007\021\022\022" +
    "\027\023\012\024\030\025\026\026\032\027\036\031\005" +
    "\032\017\001\001\000\040\007\200\014\031\015\010\016" +
    "\023\017\020\020\007\021\022\022\027\023\012\024\030" +
    "\025\026\026\032\027\036\031\005\032\017\001\001\000" +
    "\002\001\001\000\040\007\200\014\031\015\010\016\023" +
    "\017\020\020\007\021\022\022\027\023\012\024\030\025" +
    "\026\026\032\027\036\031\005\032\017\001\001\000\002" +
    "\001\001\000\042\003\347\007\003\014\031\015\010\016" +
    "\023\017\020\020\007\021\022\022\027\023\012\024\030" +
    "\025\026\026\032\027\036\031\005\032\017\001\001\000" +
    "\040\007\200\014\031\015\010\016\023\017\020\020\007" +
    "\021\022\022\027\023\012\024\030\025\026\026\032\027" +
    "\036\031\005\032\017\001\001\000\002\001\001\000\004" +
    "\034\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\361\007\003\014\031\015" +
    "\010\016\023\017\020\020\007\021\022\022\027\023\012" +
    "\024\030\025\026\026\032\027\036\031\005\032\017\001" +
    "\001\000\040\007\200\014\031\015\010\016\023\017\020" +
    "\020\007\021\022\022\027\023\012\024\030\025\026\026" +
    "\032\027\036\031\005\032\017\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= error LLAVE2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, c , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, true, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, false, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(true, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(false, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LISTA_1 ::= LISTA_1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LISTA_1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTA_2 ::= LISTA_2 COMA AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_2 ::= AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AGRUPAR_VALORES ::= CORCHETE1 LISTA_1 CORCHETE2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGRUPAR_VALORES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INCREMENTO ::= ID MAS_MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECREMENTO ::= ID MENOS_MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(b, a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ELSE_IF_LIST ::= ELSE_IF_LIST ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Else_> a = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ b = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELSE_IF_LIST ::= ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ a = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE_IF_CLAUSE ::= ELSE IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Else_ RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else_(new Condicion(a, aleft, aright), b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_CLAUSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SMATCH ::= MATCH EXPRESION LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASOS_S_S ::= CASOS_S_S CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASOS_S_S ::= CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASOS_S ::= EXPRESION IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ACTUALIZA_FOR ::= ID MAS_MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ACTUALIZA_FOR ::= ID MENOS_MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TIPOS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= EXPRESION DOBLE_ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= EXPRESION PORCENTUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= EXPRESION ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= EXPRESION NOT_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.valueOf(((String) a).toLowerCase()), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
