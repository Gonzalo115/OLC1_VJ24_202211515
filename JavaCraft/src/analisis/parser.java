
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionLista;
import instrucciones.AsignacionVC;
import instrucciones.AsignacionVector;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Else_;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;
import instrucciones.AppendLista;
import instrucciones.Metodo;
import instrucciones.Funcion;
import instrucciones.Start;
import instrucciones.Struct;
import instrucciones.Atributos;
import instrucciones.InstanciarStruct;
import instrucciones.AtributosAux;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;
import expresiones.AccesoVector;
import expresiones.RemoveLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.Find;
import expresiones.Llamada;
import expresiones.Return;
import expresiones.AccesoStruct;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\004\000\002\007\004\000\002\014\007\000\002\025\007" +
    "\000\002\025\011\000\002\025\007\000\002\025\011\000" +
    "\002\030\006\000\002\026\013\000\002\026\013\000\002" +
    "\026\017\000\002\026\017\000\002\004\005\000\002\004" +
    "\003\000\002\006\005\000\002\006\003\000\002\005\005" +
    "\000\002\031\011\000\002\031\014\000\002\027\015\000" +
    "\002\040\011\000\002\041\011\000\002\015\005\000\002" +
    "\016\005\000\002\017\016\000\002\017\012\000\002\017" +
    "\015\000\002\017\011\000\002\012\004\000\002\012\003" +
    "\000\002\013\012\000\002\023\015\000\002\023\007\000" +
    "\002\023\014\000\002\010\004\000\002\010\003\000\002" +
    "\011\010\000\002\020\014\000\002\024\005\000\002\024" +
    "\004\000\002\024\004\000\002\021\011\000\002\022\013" +
    "\000\002\032\004\000\002\033\004\000\002\034\004\000" +
    "\002\034\005\000\002\042\012\000\002\042\011\000\002" +
    "\043\012\000\002\043\011\000\002\044\006\000\002\044" +
    "\004\000\002\050\010\000\002\052\007\000\002\052\007" +
    "\000\002\052\006\000\002\052\006\000\002\051\013\000" +
    "\002\051\013\000\002\053\007\000\002\053\011\000\002" +
    "\053\005\000\002\053\007\000\002\054\007\000\002\054" +
    "\005\000\002\045\010\000\002\045\007\000\002\047\007" +
    "\000\002\047\006\000\002\046\005\000\002\046\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\004\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\004\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\006\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\006\000\002\037\003" +
    "\000\002\037\006\000\002\037\011\000\002\037\005\000" +
    "\002\037\010\000\002\037\006\000\002\037\006\000\002" +
    "\037\010\000\002\037\006\000\002\037\005\000\002\037" +
    "\007\000\002\037\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\056\003\037\011\033\012\041\013\017\014" +
    "\010\015\042\016\021\017\015\020\030\021\005\022\011" +
    "\023\051\024\064\025\006\027\046\030\035\037\032\041" +
    "\024\042\050\043\065\044\026\045\060\001\002\000\004" +
    "\011\u0190\001\002\000\014\011\uff9a\046\uff9a\053\uff9a\054" +
    "\uff9a\057\uff9a\001\002\000\004\011\u0177\001\002\000\062" +
    "\002\ufff4\003\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015" +
    "\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4" +
    "\024\ufff4\025\ufff4\027\ufff4\030\ufff4\037\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\056\ufff4\001\002\000\004" +
    "\052\u0173\001\002\000\014\011\uff99\046\uff99\053\uff99\054" +
    "\uff99\057\uff99\001\002\000\062\002\ufff0\003\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\027\ufff0" +
    "\030\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045" +
    "\ufff0\056\ufff0\001\002\000\062\002\uffeb\003\uffeb\011\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\027\uffeb" +
    "\030\uffeb\037\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\056\uffeb\001\002\000\062\002\uffe6\003\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\030\uffe6\037\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045" +
    "\uffe6\056\uffe6\001\002\000\014\011\uff9c\046\uff9c\053\uff9c" +
    "\054\uff9c\057\uff9c\001\002\000\062\002\uffec\003\uffec\011" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027" +
    "\uffec\030\uffec\037\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\056\uffec\001\002\000\004\046\u0172\001\002\000" +
    "\062\002\ufffa\003\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\027\ufffa\030\ufffa\037\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\056\ufffa\001\002\000" +
    "\014\011\uff9d\046\uff9d\053\uff9d\054\uff9d\057\uff9d\001\002" +
    "\000\062\002\ufffe\003\ufffe\011\ufffe\012\ufffe\013\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe" +
    "\023\ufffe\024\ufffe\025\ufffe\027\ufffe\030\ufffe\037\ufffe\041" +
    "\ufffe\042\ufffe\043\ufffe\044\ufffe\045\ufffe\056\ufffe\001\002" +
    "\000\062\002\uffef\003\uffef\011\uffef\012\uffef\013\uffef\014" +
    "\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef" +
    "\023\uffef\024\uffef\025\uffef\027\uffef\030\uffef\037\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\045\uffef\056\uffef\001\002" +
    "\000\004\052\u0163\001\002\000\060\002\000\003\037\011" +
    "\033\012\041\013\017\014\010\015\042\016\021\017\015" +
    "\020\030\021\005\022\011\023\051\024\064\025\006\027" +
    "\046\030\035\037\032\041\024\042\050\043\065\044\026" +
    "\045\060\001\002\000\032\004\074\005\110\006\102\007" +
    "\076\010\101\011\105\033\104\034\077\035\075\052\103" +
    "\063\100\102\106\001\002\000\062\002\ufff2\003\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2" +
    "\020\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\027" +
    "\ufff2\030\ufff2\037\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2" +
    "\045\ufff2\056\ufff2\001\002\000\014\011\uff9b\046\uff9b\053" +
    "\uff9b\054\uff9b\057\uff9b\001\002\000\062\002\ufff7\003\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\027\ufff7\030\ufff7\037\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\056\ufff7\001\002\000\004\052\u0131\001\002" +
    "\000\016\050\u010e\052\u0112\054\u0110\057\u010d\071\u0111\072" +
    "\u010f\001\002\000\062\002\ufffb\003\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\027\ufffb\030\ufffb" +
    "\037\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\056" +
    "\ufffb\001\002\000\034\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\046\u010a\052" +
    "\103\063\100\102\106\001\002\000\062\002\ufff6\003\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\027\ufff6\030\ufff6\037\ufff6\041\ufff6\042\ufff6\043\ufff6\044" +
    "\ufff6\045\ufff6\056\ufff6\001\002\000\006\046\u0108\056\u0109" +
    "\001\002\000\062\002\uffe9\003\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\025\uffe9\027\uffe9\030\uffe9\037" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\056\uffe9" +
    "\001\002\000\004\046\u0107\001\002\000\004\011\367\001" +
    "\002\000\062\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\027\ufff9\030\ufff9\037\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\056\ufff9\001" +
    "\002\000\062\002\ufffc\003\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\027\ufffc\030\ufffc\037\ufffc" +
    "\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\056\ufffc\001" +
    "\002\000\062\002\ufff8\003\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\027\ufff8\030\ufff8\037\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\056\ufff8\001" +
    "\002\000\004\011\360\001\002\000\062\002\ufff3\003\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\030\ufff3\037\ufff3\041\ufff3\042\ufff3\043\ufff3\044" +
    "\ufff3\045\ufff3\056\ufff3\001\002\000\004\052\352\001\002" +
    "\000\004\076\332\001\002\000\062\002\ufffd\003\ufffd\011" +
    "\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\027" +
    "\ufffd\030\ufffd\037\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\056\ufffd\001\002\000\062\002\uffe8\003\uffe8\011" +
    "\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\027" +
    "\uffe8\030\uffe8\037\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8" +
    "\045\uffe8\056\uffe8\001\002\000\062\002\ufff5\003\ufff5\011" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\027" +
    "\ufff5\030\ufff5\037\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5" +
    "\045\ufff5\056\ufff5\001\002\000\062\002\ufff1\003\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027" +
    "\ufff1\030\ufff1\037\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\056\ufff1\001\002\000\004\002\331\001\002\000" +
    "\062\002\uffee\003\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023" +
    "\uffee\024\uffee\025\uffee\027\uffee\030\uffee\037\uffee\041\uffee" +
    "\042\uffee\043\uffee\044\uffee\045\uffee\056\uffee\001\002\000" +
    "\004\055\310\001\002\000\062\002\uffe7\003\uffe7\011\uffe7" +
    "\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\027\uffe7" +
    "\030\uffe7\037\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\056\uffe7\001\002\000\062\002\uffed\003\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020" +
    "\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\027\uffed" +
    "\030\uffed\037\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\056\uffed\001\002\000\062\002\uffea\003\uffea\011\uffea" +
    "\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\027\uffea" +
    "\030\uffea\037\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045" +
    "\uffea\056\uffea\001\002\000\004\011\222\001\002\000\004" +
    "\055\066\001\002\000\056\003\037\011\033\012\041\013" +
    "\017\014\010\015\042\016\021\017\015\020\030\021\005" +
    "\022\011\023\051\024\064\025\006\027\046\030\035\037" +
    "\032\041\024\042\050\043\065\044\026\045\060\001\002" +
    "\000\060\003\037\011\033\012\041\013\017\014\010\015" +
    "\042\016\021\017\015\020\030\021\005\022\011\023\051" +
    "\024\064\025\006\027\046\030\035\037\032\041\024\042" +
    "\050\043\065\044\026\045\060\056\070\001\002\000\004" +
    "\042\072\001\002\000\062\002\uffff\003\uffff\011\uffff\012" +
    "\uffff\013\uffff\014\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\025\uffff\027\uffff\030" +
    "\uffff\037\uffff\041\uffff\042\uffff\043\uffff\044\uffff\045\uffff" +
    "\056\uffff\001\002\000\004\052\073\001\002\000\032\004" +
    "\074\005\110\006\102\007\076\010\101\011\105\033\104" +
    "\034\077\035\075\052\103\063\100\102\106\001\002\000" +
    "\056\046\uff7e\051\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e" +
    "\060\uff7e\062\uff7e\063\uff7e\065\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e\100\uff7e\101\uff7e" +
    "\103\uff7e\104\uff7e\105\uff7e\001\002\000\004\052\217\001" +
    "\002\000\056\046\uff7f\051\uff7f\053\uff7f\054\uff7f\055\uff7f" +
    "\056\uff7f\060\uff7f\062\uff7f\063\uff7f\065\uff7f\066\uff7f\067" +
    "\uff7f\070\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f\100\uff7f" +
    "\101\uff7f\103\uff7f\104\uff7f\105\uff7f\001\002\000\004\052" +
    "\214\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\056\046\uff7c\051\uff7c\053\uff7c" +
    "\054\uff7c\055\uff7c\056\uff7c\060\uff7c\062\uff7c\063\uff7c\065" +
    "\uff7c\066\uff7c\067\uff7c\070\uff7c\074\uff7c\075\uff7c\076\uff7c" +
    "\077\uff7c\100\uff7c\101\uff7c\103\uff7c\104\uff7c\105\uff7c\001" +
    "\002\000\056\046\uff80\051\uff80\053\uff80\054\uff80\055\uff80" +
    "\056\uff80\060\uff80\062\uff80\063\uff80\065\uff80\066\uff80\067" +
    "\uff80\070\uff80\074\uff80\075\uff80\076\uff80\077\uff80\100\uff80" +
    "\101\uff80\103\uff80\104\uff80\105\uff80\001\002\000\044\004" +
    "\074\005\110\006\102\007\076\010\101\011\105\016\021" +
    "\017\015\020\030\021\005\022\011\033\104\034\077\035" +
    "\075\052\103\063\100\102\106\001\002\000\004\052\203" +
    "\001\002\000\064\046\uff7a\050\153\051\uff7a\052\154\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\057\152\060\uff7a\062\uff7a" +
    "\063\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\074\uff7a\075" +
    "\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\103\uff7a\104\uff7a" +
    "\105\uff7a\001\002\000\032\004\074\005\110\006\102\007" +
    "\076\010\101\011\105\033\104\034\077\035\075\052\103" +
    "\063\100\102\106\001\002\000\042\053\121\062\120\063" +
    "\114\065\125\066\123\067\124\070\113\074\116\075\130" +
    "\076\115\077\126\100\122\101\117\103\127\104\111\105" +
    "\112\001\002\000\056\046\uff7d\051\uff7d\053\uff7d\054\uff7d" +
    "\055\uff7d\056\uff7d\060\uff7d\062\uff7d\063\uff7d\065\uff7d\066" +
    "\uff7d\067\uff7d\070\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d" +
    "\100\uff7d\101\uff7d\103\uff7d\104\uff7d\105\uff7d\001\002\000" +
    "\032\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\063\100\102\106\001" +
    "\002\000\032\004\074\005\110\006\102\007\076\010\101" +
    "\011\105\033\104\034\077\035\075\052\103\063\100\102" +
    "\106\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\032\004\074\005\110\006\102" +
    "\007\076\010\101\011\105\033\104\034\077\035\075\052" +
    "\103\063\100\102\106\001\002\000\032\004\074\005\110" +
    "\006\102\007\076\010\101\011\105\033\104\034\077\035" +
    "\075\052\103\063\100\102\106\001\002\000\032\004\074" +
    "\005\110\006\102\007\076\010\101\011\105\033\104\034" +
    "\077\035\075\052\103\063\100\102\106\001\002\000\032" +
    "\004\074\005\110\006\102\007\076\010\101\011\105\033" +
    "\104\034\077\035\075\052\103\063\100\102\106\001\002" +
    "\000\032\004\074\005\110\006\102\007\076\010\101\011" +
    "\105\033\104\034\077\035\075\052\103\063\100\102\106" +
    "\001\002\000\004\046\140\001\002\000\032\004\074\005" +
    "\110\006\102\007\076\010\101\011\105\033\104\034\077" +
    "\035\075\052\103\063\100\102\106\001\002\000\032\004" +
    "\074\005\110\006\102\007\076\010\101\011\105\033\104" +
    "\034\077\035\075\052\103\063\100\102\106\001\002\000" +
    "\032\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\063\100\102\106\001" +
    "\002\000\032\004\074\005\110\006\102\007\076\010\101" +
    "\011\105\033\104\034\077\035\075\052\103\063\100\102" +
    "\106\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\032\004\074\005\110\006\102" +
    "\007\076\010\101\011\105\033\104\034\077\035\075\052" +
    "\103\063\100\102\106\001\002\000\032\004\074\005\110" +
    "\006\102\007\076\010\101\011\105\033\104\034\077\035" +
    "\075\052\103\063\100\102\106\001\002\000\056\046\uff8a" +
    "\051\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\060\uff8a\062" +
    "\120\063\114\065\125\066\123\067\124\070\113\074\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\103\uff8a\104" +
    "\uff8a\105\uff8a\001\002\000\056\046\uff82\051\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\060\uff82\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\uff82\104\111\105\112\001" +
    "\002\000\056\046\uff88\051\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\060\uff88\062\120\063\114\065\125\066\123\067" +
    "\124\070\113\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88" +
    "\101\uff88\103\uff88\104\uff88\105\uff88\001\002\000\056\046" +
    "\uff8e\051\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\060\uff8e" +
    "\062\uff8e\063\uff8e\065\uff8e\066\uff8e\067\124\070\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e\101\uff8e\103\uff8e" +
    "\104\uff8e\105\uff8e\001\002\000\054\046\uff91\051\uff91\053" +
    "\uff91\054\uff91\055\uff91\056\uff91\060\uff91\062\uff91\063\uff91" +
    "\065\uff91\066\uff91\070\uff91\074\uff91\075\uff91\076\uff91\077" +
    "\uff91\100\uff91\101\uff91\103\uff91\104\uff91\105\uff91\001\002" +
    "\000\056\046\uff90\051\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\060\uff90\062\uff90\063\uff90\065\uff90\066\uff90\067\124" +
    "\070\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\101" +
    "\uff90\103\uff90\104\uff90\105\uff90\001\002\000\056\046\uff87" +
    "\051\uff87\053\uff87\054\uff87\055\uff87\056\uff87\060\uff87\062" +
    "\120\063\114\065\125\066\123\067\124\070\113\074\uff87" +
    "\075\uff87\076\uff87\077\uff87\100\uff87\101\uff87\103\uff87\104" +
    "\uff87\105\uff87\001\002\000\062\002\uffbb\003\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb" +
    "\030\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\056\uffbb\001\002\000\056\046\uff8d\051\uff8d\053\uff8d" +
    "\054\uff8d\055\uff8d\056\uff8d\060\uff8d\062\uff8d\063\uff8d\065" +
    "\125\066\123\067\124\070\113\074\uff8d\075\uff8d\076\uff8d" +
    "\077\uff8d\100\uff8d\101\uff8d\103\uff8d\104\uff8d\105\uff8d\001" +
    "\002\000\056\046\uff86\051\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\060\uff86\062\120\063\114\065\125\066\123\067" +
    "\124\070\113\074\uff86\075\uff86\076\uff86\077\uff86\100\uff86" +
    "\101\uff86\103\uff86\104\uff86\105\uff86\001\002\000\056\046" +
    "\uff8b\051\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b\060\uff8b" +
    "\062\120\063\114\065\125\066\123\067\124\070\113\074" +
    "\uff8b\075\uff8b\076\uff8b\077\uff8b\100\uff8b\101\uff8b\103\uff8b" +
    "\104\uff8b\105\uff8b\001\002\000\056\046\uff89\051\uff89\053" +
    "\uff89\054\uff89\055\uff89\056\uff89\060\uff89\062\120\063\114" +
    "\065\125\066\123\067\124\070\113\074\uff89\075\uff89\076" +
    "\uff89\077\uff89\100\uff89\101\uff89\103\uff89\104\uff89\105\uff89" +
    "\001\002\000\056\046\uff8c\051\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\060\uff8c\062\uff8c\063\uff8c\065\125\066\123" +
    "\067\124\070\113\074\uff8c\075\uff8c\076\uff8c\077\uff8c\100" +
    "\uff8c\101\uff8c\103\uff8c\104\uff8c\105\uff8c\001\002\000\056" +
    "\046\uff8f\051\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\060" +
    "\uff8f\062\uff8f\063\uff8f\065\uff8f\066\uff8f\067\124\070\uff8f" +
    "\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\101\uff8f\103" +
    "\uff8f\104\uff8f\105\uff8f\001\002\000\056\046\uff83\051\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\060\uff83\062\120\063" +
    "\114\065\125\066\123\067\124\070\113\074\116\075\130" +
    "\076\115\077\126\100\122\101\117\103\uff83\104\uff83\105" +
    "\uff83\001\002\000\056\046\uff84\051\uff84\053\uff84\054\uff84" +
    "\055\uff84\056\uff84\060\uff84\062\120\063\114\065\125\066" +
    "\123\067\124\070\113\074\116\075\130\076\115\077\126" +
    "\100\122\101\117\103\uff84\104\uff84\105\112\001\002\000" +
    "\056\046\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056\uff85" +
    "\060\uff85\062\120\063\114\065\125\066\123\067\124\070" +
    "\113\074\116\075\130\076\115\077\126\100\122\101\117" +
    "\103\uff85\104\uff85\105\uff85\001\002\000\032\004\074\005" +
    "\110\006\102\007\076\010\101\011\105\033\104\034\077" +
    "\035\075\052\103\063\100\102\106\001\002\000\010\011" +
    "\163\032\165\036\164\001\002\000\034\004\074\005\110" +
    "\006\102\007\076\010\101\011\105\033\104\034\077\035" +
    "\075\052\103\053\155\063\100\102\106\001\002\000\056" +
    "\046\uff71\051\uff71\053\uff71\054\uff71\055\uff71\056\uff71\060" +
    "\uff71\062\uff71\063\uff71\065\uff71\066\uff71\067\uff71\070\uff71" +
    "\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71\101\uff71\103" +
    "\uff71\104\uff71\105\uff71\001\002\000\006\051\160\053\161" +
    "\001\002\000\044\051\uff9e\053\uff9e\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\127\104\111\105\112\001" +
    "\002\000\032\004\074\005\110\006\102\007\076\010\101" +
    "\011\105\033\104\034\077\035\075\052\103\063\100\102" +
    "\106\001\002\000\056\046\uff72\051\uff72\053\uff72\054\uff72" +
    "\055\uff72\056\uff72\060\uff72\062\uff72\063\uff72\065\uff72\066" +
    "\uff72\067\uff72\070\uff72\074\uff72\075\uff72\076\uff72\077\uff72" +
    "\100\uff72\101\uff72\103\uff72\104\uff72\105\uff72\001\002\000" +
    "\044\051\uff9f\053\uff9f\062\120\063\114\065\125\066\123" +
    "\067\124\070\113\074\116\075\130\076\115\077\126\100" +
    "\122\101\117\103\127\104\111\105\112\001\002\000\060" +
    "\046\uff6f\050\174\051\uff6f\053\uff6f\054\uff6f\055\uff6f\056" +
    "\uff6f\060\uff6f\062\uff6f\063\uff6f\065\uff6f\066\uff6f\067\uff6f" +
    "\070\uff6f\074\uff6f\075\uff6f\076\uff6f\077\uff6f\100\uff6f\101" +
    "\uff6f\103\uff6f\104\uff6f\105\uff6f\001\002\000\004\052\171" +
    "\001\002\000\004\052\166\001\002\000\032\004\074\005" +
    "\110\006\102\007\076\010\101\011\105\033\104\034\077" +
    "\035\075\052\103\063\100\102\106\001\002\000\042\053" +
    "\170\062\120\063\114\065\125\066\123\067\124\070\113" +
    "\074\116\075\130\076\115\077\126\100\122\101\117\103" +
    "\127\104\111\105\112\001\002\000\056\046\uff76\051\uff76" +
    "\053\uff76\054\uff76\055\uff76\056\uff76\060\uff76\062\uff76\063" +
    "\uff76\065\uff76\066\uff76\067\uff76\070\uff76\074\uff76\075\uff76" +
    "\076\uff76\077\uff76\100\uff76\101\uff76\103\uff76\104\uff76\105" +
    "\uff76\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\042\053\173\062\120\063\114" +
    "\065\125\066\123\067\124\070\113\074\116\075\130\076" +
    "\115\077\126\100\122\101\117\103\127\104\111\105\112" +
    "\001\002\000\056\046\uff73\051\uff73\053\uff73\054\uff73\055" +
    "\uff73\056\uff73\060\uff73\062\uff73\063\uff73\065\uff73\066\uff73" +
    "\067\uff73\070\uff73\074\uff73\075\uff73\076\uff73\077\uff73\100" +
    "\uff73\101\uff73\103\uff73\104\uff73\105\uff73\001\002\000\004" +
    "\011\175\001\002\000\056\046\uff70\051\uff70\053\uff70\054" +
    "\uff70\055\uff70\056\uff70\060\uff70\062\uff70\063\uff70\065\uff70" +
    "\066\uff70\067\uff70\070\uff70\074\uff70\075\uff70\076\uff70\077" +
    "\uff70\100\uff70\101\uff70\103\uff70\104\uff70\105\uff70\001\002" +
    "\000\042\060\177\062\120\063\114\065\125\066\123\067" +
    "\124\070\113\074\116\075\130\076\115\077\126\100\122" +
    "\101\117\103\127\104\111\105\112\001\002\000\060\046" +
    "\uff79\051\uff79\053\uff79\054\uff79\055\uff79\056\uff79\057\200" +
    "\060\uff79\062\uff79\063\uff79\065\uff79\066\uff79\067\uff79\070" +
    "\uff79\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79" +
    "\103\uff79\104\uff79\105\uff79\001\002\000\032\004\074\005" +
    "\110\006\102\007\076\010\101\011\105\033\104\034\077" +
    "\035\075\052\103\063\100\102\106\001\002\000\042\060" +
    "\202\062\120\063\114\065\125\066\123\067\124\070\113" +
    "\074\116\075\130\076\115\077\126\100\122\101\117\103" +
    "\127\104\111\105\112\001\002\000\056\046\uff78\051\uff78" +
    "\053\uff78\054\uff78\055\uff78\056\uff78\060\uff78\062\uff78\063" +
    "\uff78\065\uff78\066\uff78\067\uff78\070\uff78\074\uff78\075\uff78" +
    "\076\uff78\077\uff78\100\uff78\101\uff78\103\uff78\104\uff78\105" +
    "\uff78\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\042\053\205\062\120\063\114" +
    "\065\125\066\123\067\124\070\113\074\116\075\130\076" +
    "\115\077\126\100\122\101\117\103\127\104\111\105\112" +
    "\001\002\000\056\046\uff75\051\uff75\053\uff75\054\uff75\055" +
    "\uff75\056\uff75\060\uff75\062\uff75\063\uff75\065\uff75\066\uff75" +
    "\067\uff75\070\uff75\074\uff75\075\uff75\076\uff75\077\uff75\100" +
    "\uff75\101\uff75\103\uff75\104\uff75\105\uff75\001\002\000\004" +
    "\053\211\001\002\000\042\053\210\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\127\104\111\105\112\001" +
    "\002\000\056\046\uff77\051\uff77\053\uff77\054\uff77\055\uff77" +
    "\056\uff77\060\uff77\062\uff77\063\uff77\065\uff77\066\uff77\067" +
    "\uff77\070\uff77\074\uff77\075\uff77\076\uff77\077\uff77\100\uff77" +
    "\101\uff77\103\uff77\104\uff77\105\uff77\001\002\000\032\004" +
    "\074\005\110\006\102\007\076\010\101\011\105\033\104" +
    "\034\077\035\075\052\103\063\100\102\106\001\002\000" +
    "\056\046\uff81\051\uff81\053\uff81\054\uff81\055\uff81\056\uff81" +
    "\060\uff81\062\120\063\114\065\125\066\123\067\124\070" +
    "\113\074\uff81\075\uff81\076\uff81\077\uff81\100\uff81\101\uff81" +
    "\103\uff81\104\uff81\105\uff81\001\002\000\056\046\uff92\051" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\060\uff92\062\uff92" +
    "\063\uff92\065\uff92\066\uff92\067\uff92\070\uff92\074\uff92\075" +
    "\uff92\076\uff92\077\uff92\100\uff92\101\uff92\103\uff92\104\uff92" +
    "\105\uff92\001\002\000\032\004\074\005\110\006\102\007" +
    "\076\010\101\011\105\033\104\034\077\035\075\052\103" +
    "\063\100\102\106\001\002\000\042\053\216\062\120\063" +
    "\114\065\125\066\123\067\124\070\113\074\116\075\130" +
    "\076\115\077\126\100\122\101\117\103\127\104\111\105" +
    "\112\001\002\000\056\046\uff7b\051\uff7b\053\uff7b\054\uff7b" +
    "\055\uff7b\056\uff7b\060\uff7b\062\uff7b\063\uff7b\065\uff7b\066" +
    "\uff7b\067\uff7b\070\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\103\uff7b\104\uff7b\105\uff7b\001\002\000" +
    "\032\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\063\100\102\106\001" +
    "\002\000\042\053\221\062\120\063\114\065\125\066\123" +
    "\067\124\070\113\074\116\075\130\076\115\077\126\100" +
    "\122\101\117\103\127\104\111\105\112\001\002\000\056" +
    "\046\uff74\051\uff74\053\uff74\054\uff74\055\uff74\056\uff74\060" +
    "\uff74\062\uff74\063\uff74\065\uff74\066\uff74\067\uff74\070\uff74" +
    "\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74\101\uff74\103" +
    "\uff74\104\uff74\105\uff74\001\002\000\004\047\223\001\002" +
    "\000\016\011\224\016\021\017\015\020\030\021\005\022" +
    "\011\001\002\000\004\054\257\001\002\000\010\046\227" +
    "\054\230\057\226\001\002\000\004\060\233\001\002\000" +
    "\062\002\uffe2\003\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\027\uffe2\030\uffe2\037\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\056\uffe2\001\002\000" +
    "\032\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\063\100\102\106\001" +
    "\002\000\042\046\232\062\120\063\114\065\125\066\123" +
    "\067\124\070\113\074\116\075\130\076\115\077\126\100" +
    "\122\101\117\103\127\104\111\105\112\001\002\000\062" +
    "\002\uffe1\003\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\027\uffe1\030\uffe1\037\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\056\uffe1\001\002\000\006" +
    "\054\235\057\234\001\002\000\004\060\246\001\002\000" +
    "\004\057\236\001\002\000\032\004\074\005\110\006\102" +
    "\007\076\010\101\011\105\033\104\034\077\035\075\052" +
    "\103\063\100\102\106\001\002\000\004\046\240\001\002" +
    "\000\062\002\uffdd\003\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\037\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\056\uffdd\001\002" +
    "\000\006\051\244\060\243\001\002\000\044\051\uffd8\060" +
    "\uffd8\062\120\063\114\065\125\066\123\067\124\070\113" +
    "\074\116\075\130\076\115\077\126\100\122\101\117\103" +
    "\127\104\111\105\112\001\002\000\010\046\uffd5\051\uffd5" +
    "\060\uffd5\001\002\000\032\004\074\005\110\006\102\007" +
    "\076\010\101\011\105\033\104\034\077\035\075\052\103" +
    "\063\100\102\106\001\002\000\044\051\uffd9\060\uffd9\062" +
    "\120\063\114\065\125\066\123\067\124\070\113\074\116" +
    "\075\130\076\115\077\126\100\122\101\117\103\127\104" +
    "\111\105\112\001\002\000\004\054\247\001\002\000\004" +
    "\057\250\001\002\000\004\057\236\001\002\000\006\051" +
    "\253\060\254\001\002\000\006\051\uffd6\060\uffd6\001\002" +
    "\000\004\057\236\001\002\000\004\046\255\001\002\000" +
    "\062\002\uffdb\003\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\037\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\056\uffdb\001\002\000" +
    "\006\051\uffd7\060\uffd7\001\002\000\004\055\260\001\002" +
    "\000\004\011\261\001\002\000\004\047\303\001\002\000" +
    "\006\051\263\056\264\001\002\000\004\011\266\001\002" +
    "\000\004\046\265\001\002\000\062\002\uffab\003\uffab\011" +
    "\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\020\uffab\021\uffab\022\uffab\023\uffab\024\uffab\025\uffab\027" +
    "\uffab\030\uffab\037\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\056\uffab\001\002\000\004\047\267\001\002\000" +
    "\034\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\055\270\063\100\102" +
    "\106\001\002\000\004\011\272\001\002\000\044\051\uffa9" +
    "\056\uffa9\062\120\063\114\065\125\066\123\067\124\070" +
    "\113\074\116\075\130\076\115\077\126\100\122\101\117" +
    "\103\127\104\111\105\112\001\002\000\004\047\301\001" +
    "\002\000\006\051\274\056\275\001\002\000\004\011\276" +
    "\001\002\000\006\051\uffa8\056\uffa8\001\002\000\004\047" +
    "\277\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\044\051\uffa5\056\uffa5\062\120" +
    "\063\114\065\125\066\123\067\124\070\113\074\116\075" +
    "\130\076\115\077\126\100\122\101\117\103\127\104\111" +
    "\105\112\001\002\000\032\004\074\005\110\006\102\007" +
    "\076\010\101\011\105\033\104\034\077\035\075\052\103" +
    "\063\100\102\106\001\002\000\044\051\uffa4\056\uffa4\062" +
    "\120\063\114\065\125\066\123\067\124\070\113\074\116" +
    "\075\130\076\115\077\126\100\122\101\117\103\127\104" +
    "\111\105\112\001\002\000\034\004\074\005\110\006\102" +
    "\007\076\010\101\011\105\033\104\034\077\035\075\052" +
    "\103\055\304\063\100\102\106\001\002\000\004\011\272" +
    "\001\002\000\044\051\uffa7\056\uffa7\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\127\104\111\105\112\001" +
    "\002\000\006\051\274\056\307\001\002\000\006\051\uffa6" +
    "\056\uffa6\001\002\000\004\011\311\001\002\000\004\047" +
    "\324\001\002\000\006\011\313\056\314\001\002\000\004" +
    "\047\317\001\002\000\004\011\315\001\002\000\004\046" +
    "\316\001\002\000\062\002\uffb0\003\uffb0\011\uffb0\012\uffb0" +
    "\013\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\030\uffb0" +
    "\037\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\056" +
    "\uffb0\001\002\000\016\011\320\016\021\017\015\020\030" +
    "\021\005\022\011\001\002\000\004\046\323\001\002\000" +
    "\004\046\322\001\002\000\006\011\uffaf\056\uffaf\001\002" +
    "\000\006\011\uffae\056\uffae\001\002\000\016\011\325\016" +
    "\021\017\015\020\030\021\005\022\011\001\002\000\004" +
    "\046\330\001\002\000\004\046\327\001\002\000\006\011" +
    "\uffad\056\uffad\001\002\000\006\011\uffac\056\uffac\001\002" +
    "\000\004\002\001\001\002\000\016\016\341\017\335\020" +
    "\337\021\340\022\336\023\333\001\002\000\004\100\uff93" +
    "\001\002\000\004\100\342\001\002\000\004\100\uff97\001" +
    "\002\000\004\100\uff94\001\002\000\004\100\uff96\001\002" +
    "\000\004\100\uff95\001\002\000\004\100\uff98\001\002\000" +
    "\004\011\343\001\002\000\004\054\344\001\002\000\004" +
    "\026\345\001\002\000\004\023\346\001\002\000\004\052" +
    "\347\001\002\000\004\053\350\001\002\000\004\046\351" +
    "\001\002\000\062\002\uffd2\003\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\027\uffd2\030\uffd2\037" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\056\uffd2" +
    "\001\002\000\032\004\074\005\110\006\102\007\076\010" +
    "\101\011\105\033\104\034\077\035\075\052\103\063\100" +
    "\102\106\001\002\000\042\053\354\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\127\104\111\105\112\001" +
    "\002\000\004\055\355\001\002\000\056\003\037\011\033" +
    "\012\041\013\017\014\010\015\042\016\021\017\015\020" +
    "\030\021\005\022\011\023\051\024\064\025\006\027\046" +
    "\030\035\037\032\041\024\042\050\043\065\044\026\045" +
    "\060\001\002\000\060\003\037\011\033\012\041\013\017" +
    "\014\010\015\042\016\021\017\015\020\030\021\005\022" +
    "\011\023\051\024\064\025\006\027\046\030\035\037\032" +
    "\041\024\042\050\043\065\044\026\045\060\056\357\001" +
    "\002\000\062\002\uffbc\003\uffbc\011\uffbc\012\uffbc\013\uffbc" +
    "\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc\037\uffbc" +
    "\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\056\uffbc\001" +
    "\002\000\004\052\361\001\002\000\034\004\074\005\110" +
    "\006\102\007\076\010\101\011\105\033\104\034\077\035" +
    "\075\052\103\053\362\063\100\102\106\001\002\000\004" +
    "\046\366\001\002\000\006\051\160\053\364\001\002\000" +
    "\004\046\365\001\002\000\062\002\uffa3\003\uffa3\011\uffa3" +
    "\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017\uffa3\020" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\027\uffa3" +
    "\030\uffa3\037\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\056\uffa3\001\002\000\062\002\uffa2\003\uffa2\011\uffa2" +
    "\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2\027\uffa2" +
    "\030\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\056\uffa2\001\002\000\004\052\370\001\002\000\016" +
    "\016\021\017\015\020\030\021\005\022\011\053\373\001" +
    "\002\000\004\011\u0106\001\002\000\006\051\377\053\u0100" +
    "\001\002\000\004\055\374\001\002\000\056\003\037\011" +
    "\033\012\041\013\017\014\010\015\042\016\021\017\015" +
    "\020\030\021\005\022\011\023\051\024\064\025\006\027" +
    "\046\030\035\037\032\041\024\042\050\043\065\044\026" +
    "\045\060\001\002\000\060\003\037\011\033\012\041\013" +
    "\017\014\010\015\042\016\021\017\015\020\030\021\005" +
    "\022\011\023\051\024\064\025\006\027\046\030\035\037" +
    "\032\041\024\042\050\043\065\044\026\045\060\056\376" +
    "\001\002\000\062\002\uffb5\003\uffb5\011\uffb5\012\uffb5\013" +
    "\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\037" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\056\uffb5" +
    "\001\002\000\014\016\021\017\015\020\030\021\005\022" +
    "\011\001\002\000\004\055\u0101\001\002\000\056\003\037" +
    "\011\033\012\041\013\017\014\010\015\042\016\021\017" +
    "\015\020\030\021\005\022\011\023\051\024\064\025\006" +
    "\027\046\030\035\037\032\041\024\042\050\043\065\044" +
    "\026\045\060\001\002\000\060\003\037\011\033\012\041" +
    "\013\017\014\010\015\042\016\021\017\015\020\030\021" +
    "\005\022\011\023\051\024\064\025\006\027\046\030\035" +
    "\037\032\041\024\042\050\043\065\044\026\045\060\056" +
    "\u0103\001\002\000\062\002\uffb6\003\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030\uffb6" +
    "\037\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\056" +
    "\uffb6\001\002\000\004\011\u0105\001\002\000\006\051\uffb2" +
    "\053\uffb2\001\002\000\006\051\uffb1\053\uffb1\001\002\000" +
    "\062\002\uffba\003\uffba\011\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\027\uffba\030\uffba\037\uffba\041\uffba" +
    "\042\uffba\043\uffba\044\uffba\045\uffba\056\uffba\001\002\000" +
    "\062\002\uffe5\003\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\027\uffe5\030\uffe5\037\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\056\uffe5\001\002\000" +
    "\062\002\uffe4\003\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\037\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\045\uffe4\056\uffe4\001\002\000" +
    "\062\002\uffb8\003\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\037\uffb8\041\uffb8" +
    "\042\uffb8\043\uffb8\044\uffb8\045\uffb8\056\uffb8\001\002\000" +
    "\042\046\u010c\062\120\063\114\065\125\066\123\067\124" +
    "\070\113\074\116\075\130\076\115\077\126\100\122\101" +
    "\117\103\127\104\111\105\112\001\002\000\062\002\uffb7" +
    "\003\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\027\uffb7\030\uffb7\037\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\056\uffb7\001\002\000\032\004\074" +
    "\005\110\006\102\007\076\010\101\011\105\033\104\034" +
    "\077\035\075\052\103\063\100\102\106\001\002\000\006" +
    "\031\u011c\032\u011d\001\002\000\004\046\u011b\001\002\000" +
    "\032\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\063\100\102\106\001" +
    "\002\000\004\046\u0118\001\002\000\034\004\074\005\110" +
    "\006\102\007\076\010\101\011\105\033\104\034\077\035" +
    "\075\052\103\053\u0113\063\100\102\106\001\002\000\004" +
    "\046\u0117\001\002\000\006\051\160\053\u0115\001\002\000" +
    "\004\046\u0116\001\002\000\062\002\uffa1\003\uffa1\011\uffa1" +
    "\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\027\uffa1" +
    "\030\uffa1\037\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045" +
    "\uffa1\056\uffa1\001\002\000\062\002\uffa0\003\uffa0\011\uffa0" +
    "\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027\uffa0" +
    "\030\uffa0\037\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\056\uffa0\001\002\000\062\002\uffcf\003\uffcf\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\027\uffcf" +
    "\030\uffcf\037\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\056\uffcf\001\002\000\042\046\u011a\062\120\063\114" +
    "\065\125\066\123\067\124\070\113\074\116\075\130\076" +
    "\115\077\126\100\122\101\117\103\127\104\111\105\112" +
    "\001\002\000\110\002\uffde\003\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\027\uffde\030\uffde\033\uffde\034\uffde" +
    "\035\uffde\037\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045" +
    "\uffde\052\uffde\056\uffde\063\uffde\102\uffde\001\002\000\062" +
    "\002\uffce\003\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\027\uffce\030\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\056\uffce\001\002\000\004" +
    "\052\u0122\001\002\000\004\052\u011e\001\002\000\032\004" +
    "\074\005\110\006\102\007\076\010\101\011\105\033\104" +
    "\034\077\035\075\052\103\063\100\102\106\001\002\000" +
    "\042\053\u0120\062\120\063\114\065\125\066\123\067\124" +
    "\070\113\074\116\075\130\076\115\077\126\100\122\101" +
    "\117\103\127\104\111\105\112\001\002\000\004\046\u0121" +
    "\001\002\000\062\002\uffd0\003\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0\037" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\056\uffd0" +
    "\001\002\000\032\004\074\005\110\006\102\007\076\010" +
    "\101\011\105\033\104\034\077\035\075\052\103\063\100" +
    "\102\106\001\002\000\042\053\u0124\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\127\104\111\105\112\001" +
    "\002\000\004\046\u0125\001\002\000\062\002\uffd1\003\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017" +
    "\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\037\uffd1\041\uffd1\042\uffd1\043\uffd1\044" +
    "\uffd1\045\uffd1\056\uffd1\001\002\000\042\060\u0127\062\120" +
    "\063\114\065\125\066\123\067\124\070\113\074\116\075" +
    "\130\076\115\077\126\100\122\101\117\103\127\104\111" +
    "\105\112\001\002\000\006\054\u0129\057\u0128\001\002\000" +
    "\032\004\074\005\110\006\102\007\076\010\101\011\105" +
    "\033\104\034\077\035\075\052\103\063\100\102\106\001" +
    "\002\000\032\004\074\005\110\006\102\007\076\010\101" +
    "\011\105\033\104\034\077\035\075\052\103\063\100\102" +
    "\106\001\002\000\042\046\u012b\062\120\063\114\065\125" +
    "\066\123\067\124\070\113\074\116\075\130\076\115\077" +
    "\126\100\122\101\117\103\127\104\111\105\112\001\002" +
    "\000\062\002\uffd4\003\uffd4\011\uffd4\012\uffd4\013\uffd4\014" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030\uffd4\037\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\056\uffd4\001\002" +
    "\000\042\060\u012d\062\120\063\114\065\125\066\123\067" +
    "\124\070\113\074\116\075\130\076\115\077\126\100\122" +
    "\101\117\103\127\104\111\105\112\001\002\000\004\054" +
    "\u012e\001\002\000\032\004\074\005\110\006\102\007\076" +
    "\010\101\011\105\033\104\034\077\035\075\052\103\063" +
    "\100\102\106\001\002\000\042\046\u0130\062\120\063\114" +
    "\065\125\066\123\067\124\070\113\074\116\075\130\076" +
    "\115\077\126\100\122\101\117\103\127\104\111\105\112" +
    "\001\002\000\062\002\uffd3\003\uffd3\011\uffd3\012\uffd3\013" +
    "\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\027\uffd3\030\uffd3\037" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\056\uffd3" +
    "\001\002\000\032\004\074\005\110\006\102\007\076\010" +
    "\101\011\105\033\104\034\077\035\075\052\103\063\100" +
    "\102\106\001\002\000\042\053\u0133\062\120\063\114\065" +
    "\125\066\123\067\124\070\113\074\116\075\130\076\115" +
    "\077\126\100\122\101\117\103\127\104\111\105\112\001" +
    "\002\000\004\055\u0134\001\002\000\056\003\037\011\033" +
    "\012\041\013\017\014\010\015\042\016\021\017\015\020" +
    "\030\021\005\022\011\023\051\024\064\025\006\027\046" +
    "\030\035\037\032\041\024\042\050\043\065\044\026\045" +
    "\060\001\002\000\060\003\037\011\033\012\041\013\017" +
    "\014\010\015\042\016\021\017\015\020\030\021\005\022" +
    "\011\023\051\024\064\025\006\027\046\030\035\037\032" +
    "\041\024\042\050\043\065\044\026\045\060\056\u0136\001" +
    "\002\000\064\002\uffca\003\uffca\011\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\027\uffca\030\uffca\037\uffca" +
    "\040\u0137\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\056" +
    "\uffca\001\002\000\006\037\u013d\055\u0146\001\002\000\064" +
    "\002\uffc8\003\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015" +
    "\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\027\uffc8\030\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\056\uffc8\001\002" +
    "\000\064\002\uffcc\003\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030\uffcc\037\uffcc\040" +
    "\u013a\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\056\uffcc" +
    "\001\002\000\006\037\u013d\055\u013c\001\002\000\064\002" +
    "\uffc9\003\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\027\uffc9\030\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\056\uffc9\001\002\000" +
    "\056\003\037\011\033\012\041\013\017\014\010\015\042" +
    "\016\021\017\015\020\030\021\005\022\011\023\051\024" +
    "\064\025\006\027\046\030\035\037\032\041\024\042\050" +
    "\043\065\044\026\045\060\001\002\000\004\052\u013e\001" +
    "\002\000\032\004\074\005\110\006\102\007\076\010\101" +
    "\011\105\033\104\034\077\035\075\052\103\063\100\102" +
    "\106\001\002\000\042\053\u0140\062\120\063\114\065\125" +
    "\066\123\067\124\070\113\074\116\075\130\076\115\077" +
    "\126\100\122\101\117\103\127\104\111\105\112\001\002" +
    "\000\004\055\u0141\001\002\000\056\003\037\011\033\012" +
    "\041\013\017\014\010\015\042\016\021\017\015\020\030" +
    "\021\005\022\011\023\051\024\064\025\006\027\046\030" +
    "\035\037\032\041\024\042\050\043\065\044\026\045\060" +
    "\001\002\000\060\003\037\011\033\012\041\013\017\014" +
    "\010\015\042\016\021\017\015\020\030\021\005\022\011" +
    "\023\051\024\064\025\006\027\046\030\035\037\032\041" +
    "\024\042\050\043\065\044\026\045\060\056\u0143\001\002" +
    "\000\064\002\uffc7\003\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\056\uffc7" +
    "\001\002\000\060\003\037\011\033\012\041\013\017\014" +
    "\010\015\042\016\021\017\015\020\030\021\005\022\011" +
    "\023\051\024\064\025\006\027\046\030\035\037\032\041" +
    "\024\042\050\043\065\044\026\045\060\056\u0145\001\002" +
    "\000\062\002\uffcd\003\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd\037\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\056\uffcd\001\002" +
    "\000\056\003\037\011\033\012\041\013\017\014\010\015" +
    "\042\016\021\017\015\020\030\021\005\022\011\023\051" +
    "\024\064\025\006\027\046\030\035\037\032\041\024\042" +
    "\050\043\065\044\026\045\060\001\002\000\060\003\037" +
    "\011\033\012\041\013\017\014\010\015\042\016\021\017" +
    "\015\020\030\021\005\022\011\023\051\024\064\025\006" +
    "\027\046\030\035\037\032\041\024\042\050\043\065\044" +
    "\026\045\060\056\u0148\001\002\000\062\002\uffcb\003\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\027\uffcb\030\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\056\uffcb\001\002\000\042\055\u014a\062\120" +
    "\063\114\065\125\066\123\067\124\070\113\074\116\075" +
    "\130\076\115\077\126\100\122\101\117\103\127\104\111" +
    "\105\112\001\002\000\034\004\074\005\110\006\102\007" +
    "\076\010\101\011\105\033\104\034\077\035\075\052\103" +
    "\061\u014b\063\100\102\106\001\002\000\004\054\u015d\001" +
    "\002\000\036\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\033\uffc2\034\uffc2\035\uffc2\052\uffc2\056\uffc2\061" +
    "\uffc2\063\uffc2\102\uffc2\001\002\000\036\004\074\005\110" +
    "\006\102\007\076\010\101\011\105\033\104\034\077\035" +
    "\075\052\103\056\u0155\061\u0154\063\100\102\106\001\002" +
    "\000\042\054\u014f\062\120\063\114\065\125\066\123\067" +
    "\124\070\113\074\116\075\130\076\115\077\126\100\122" +
    "\101\117\103\127\104\111\105\112\001\002\000\004\100" +
    "\u0150\001\002\000\004\055\u0151\001\002\000\056\003\037" +
    "\011\033\012\041\013\017\014\010\015\042\016\021\017" +
    "\015\020\030\021\005\022\011\023\051\024\064\025\006" +
    "\027\046\030\035\037\032\041\024\042\050\043\065\044" +
    "\026\045\060\001\002\000\060\003\037\011\033\012\041" +
    "\013\017\014\010\015\042\016\021\017\015\020\030\021" +
    "\005\022\011\023\051\024\064\025\006\027\046\030\035" +
    "\037\032\041\024\042\050\043\065\044\026\045\060\056" +
    "\u0153\001\002\000\036\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\033\uffc1\034\uffc1\035\uffc1\052\uffc1\056" +
    "\uffc1\061\uffc1\063\uffc1\102\uffc1\001\002\000\004\054\u0157" +
    "\001\002\000\062\002\uffc5\003\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5" +
    "\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027\uffc5\030\uffc5\037" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\056\uffc5" +
    "\001\002\000\036\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\011\uffc3\033\uffc3\034\uffc3\035\uffc3\052\uffc3\056\uffc3" +
    "\061\uffc3\063\uffc3\102\uffc3\001\002\000\004\100\u0158\001" +
    "\002\000\004\055\u0159\001\002\000\056\003\037\011\033" +
    "\012\041\013\017\014\010\015\042\016\021\017\015\020" +
    "\030\021\005\022\011\023\051\024\064\025\006\027\046" +
    "\030\035\037\032\041\024\042\050\043\065\044\026\045" +
    "\060\001\002\000\060\003\037\011\033\012\041\013\017" +
    "\014\010\015\042\016\021\017\015\020\030\021\005\022" +
    "\011\023\051\024\064\025\006\027\046\030\035\037\032" +
    "\041\024\042\050\043\065\044\026\045\060\056\u015b\001" +
    "\002\000\004\056\u015c\001\002\000\062\002\uffc6\003\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\027\uffc6\030\uffc6\037\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\056\uffc6\001\002\000\004\100\u015e\001\002" +
    "\000\004\055\u015f\001\002\000\056\003\037\011\033\012" +
    "\041\013\017\014\010\015\042\016\021\017\015\020\030" +
    "\021\005\022\011\023\051\024\064\025\006\027\046\030" +
    "\035\037\032\041\024\042\050\043\065\044\026\045\060" +
    "\001\002\000\060\003\037\011\033\012\041\013\017\014" +
    "\010\015\042\016\021\017\015\020\030\021\005\022\011" +
    "\023\051\024\064\025\006\027\046\030\035\037\032\041" +
    "\024\042\050\043\065\044\026\045\060\056\u0161\001\002" +
    "\000\004\056\u0162\001\002\000\062\002\uffc4\003\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027" +
    "\uffc4\030\uffc4\037\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4" +
    "\045\uffc4\056\uffc4\001\002\000\004\011\u0164\001\002\000" +
    "\004\054\u0110\001\002\000\032\004\074\005\110\006\102" +
    "\007\076\010\101\011\105\033\104\034\077\035\075\052" +
    "\103\063\100\102\106\001\002\000\042\046\u0167\062\120" +
    "\063\114\065\125\066\123\067\124\070\113\074\116\075" +
    "\130\076\115\077\126\100\122\101\117\103\127\104\111" +
    "\105\112\001\002\000\004\011\u0168\001\002\000\010\054" +
    "\u016f\071\u0170\072\u016e\001\002\000\004\053\u016a\001\002" +
    "\000\004\055\u016b\001\002\000\056\003\037\011\033\012" +
    "\041\013\017\014\010\015\042\016\021\017\015\020\030" +
    "\021\005\022\011\023\051\024\064\025\006\027\046\030" +
    "\035\037\032\041\024\042\050\043\065\044\026\045\060" +
    "\001\002\000\060\003\037\011\033\012\041\013\017\014" +
    "\010\015\042\016\021\017\015\020\030\021\005\022\011" +
    "\023\051\024\064\025\006\027\046\030\035\037\032\041" +
    "\024\042\050\043\065\044\026\045\060\056\u016d\001\002" +
    "\000\062\002\uffc0\003\uffc0\011\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0\037\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\056\uffc0\001\002" +
    "\000\004\053\uffbd\001\002\000\032\004\074\005\110\006" +
    "\102\007\076\010\101\011\105\033\104\034\077\035\075" +
    "\052\103\063\100\102\106\001\002\000\004\053\uffbe\001" +
    "\002\000\042\053\uffbf\062\120\063\114\065\125\066\123" +
    "\067\124\070\113\074\116\075\130\076\115\077\126\100" +
    "\122\101\117\103\127\104\111\105\112\001\002\000\062" +
    "\002\uffb9\003\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\027\uffb9\030\uffb9\037\uffb9\041\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\056\uffb9\001\002\000\032" +
    "\004\074\005\110\006\102\007\076\010\101\011\105\033" +
    "\104\034\077\035\075\052\103\063\100\102\106\001\002" +
    "\000\042\053\u0175\062\120\063\114\065\125\066\123\067" +
    "\124\070\113\074\116\075\130\076\115\077\126\100\122" +
    "\101\117\103\127\104\111\105\112\001\002\000\004\046" +
    "\u0176\001\002\000\062\002\uffe3\003\uffe3\011\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3" +
    "\037\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\056" +
    "\uffe3\001\002\000\004\047\u0178\001\002\000\016\011\u0179" +
    "\016\021\017\015\020\030\021\005\022\011\001\002\000" +
    "\004\054\u018b\001\002\000\010\046\u017c\054\u017d\057\u017b" +
    "\001\002\000\004\060\u0180\001\002\000\062\002\uffe0\003" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\027\uffe0\030\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\044\uffe0\045\uffe0\056\uffe0\001\002\000\032\004\074\005" +
    "\110\006\102\007\076\010\101\011\105\033\104\034\077" +
    "\035\075\052\103\063\100\102\106\001\002\000\042\046" +
    "\u017f\062\120\063\114\065\125\066\123\067\124\070\113" +
    "\074\116\075\130\076\115\077\126\100\122\101\117\103" +
    "\127\104\111\105\112\001\002\000\062\002\uffdf\003\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017" +
    "\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf" +
    "\027\uffdf\030\uffdf\037\uffdf\041\uffdf\042\uffdf\043\uffdf\044" +
    "\uffdf\045\uffdf\056\uffdf\001\002\000\006\054\u0182\057\u0181" +
    "\001\002\000\004\060\u0185\001\002\000\004\057\236\001" +
    "\002\000\004\046\u0184\001\002\000\062\002\uffdc\003\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\027\uffdc\030\uffdc\037\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\045\uffdc\056\uffdc\001\002\000\004\054\u0186\001\002" +
    "\000\004\057\u0187\001\002\000\004\057\236\001\002\000" +
    "\006\051\253\060\u0189\001\002\000\004\046\u018a\001\002" +
    "\000\062\002\uffda\003\uffda\011\uffda\012\uffda\013\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\027\uffda\030\uffda\037\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\056\uffda\001\002" +
    "\000\004\055\u018c\001\002\000\004\011\261\001\002\000" +
    "\006\051\263\056\u018e\001\002\000\004\046\u018f\001\002" +
    "\000\062\002\uffaa\003\uffaa\011\uffaa\012\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\037\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\056\uffaa\001\002" +
    "\000\004\052\u0191\001\002\000\016\016\021\017\015\020" +
    "\030\021\005\022\011\053\u0193\001\002\000\006\051\377" +
    "\053\u0197\001\002\000\004\055\u0194\001\002\000\056\003" +
    "\037\011\033\012\041\013\017\014\010\015\042\016\021" +
    "\017\015\020\030\021\005\022\011\023\051\024\064\025" +
    "\006\027\046\030\035\037\032\041\024\042\050\043\065" +
    "\044\026\045\060\001\002\000\060\003\037\011\033\012" +
    "\041\013\017\014\010\015\042\016\021\017\015\020\030" +
    "\021\005\022\011\023\051\024\064\025\006\027\046\030" +
    "\035\037\032\041\024\042\050\043\065\044\026\045\060" +
    "\056\u0196\001\002\000\062\002\uffb3\003\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\030" +
    "\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3" +
    "\056\uffb3\001\002\000\004\055\u0198\001\002\000\056\003" +
    "\037\011\033\012\041\013\017\014\010\015\042\016\021" +
    "\017\015\020\030\021\005\022\011\023\051\024\064\025" +
    "\006\027\046\030\035\037\032\041\024\042\050\043\065" +
    "\044\026\045\060\001\002\000\060\003\037\011\033\012" +
    "\041\013\017\014\010\015\042\016\021\017\015\020\030" +
    "\021\005\022\011\023\051\024\064\025\006\027\046\030" +
    "\035\037\032\041\024\042\050\043\065\044\026\045\060" +
    "\056\u019a\001\002\000\062\002\uffb4\003\uffb4\011\uffb4\012" +
    "\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030" +
    "\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\056\uffb4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0198\000\072\002\055\003\024\007\021\014\051\015" +
    "\030\016\035\017\053\020\046\021\026\022\054\023\006" +
    "\025\043\026\033\027\017\030\042\031\044\032\011\033" +
    "\022\034\060\035\003\040\056\041\061\042\015\043\012" +
    "\045\037\047\052\050\062\051\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\066\007\070\014\051\015\030\016\035\017\053\020" +
    "\046\021\026\022\054\023\006\025\043\026\033\027\017" +
    "\030\042\031\044\032\011\033\022\034\060\035\003\040" +
    "\056\041\061\042\015\043\012\045\037\047\052\050\062" +
    "\051\013\001\001\000\004\037\u0148\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u010a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\066\007\021\014" +
    "\051\015\030\016\035\017\053\020\046\021\026\022\054" +
    "\023\006\025\043\026\033\027\017\030\042\031\044\032" +
    "\011\033\022\034\060\035\003\040\056\041\061\042\015" +
    "\043\012\045\037\047\052\050\062\051\013\001\001\000" +
    "\066\007\070\014\051\015\030\016\035\017\053\020\046" +
    "\021\026\022\054\023\006\025\043\026\033\027\017\030" +
    "\042\031\044\032\011\033\022\034\060\035\003\040\056" +
    "\041\061\042\015\043\012\045\037\047\052\050\062\051" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\035\205\037\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\147\001\001\000\004\037\146" +
    "\001\001\000\004\037\145\001\001\000\004\037\144\001" +
    "\001\000\004\037\143\001\001\000\004\037\142\001\001" +
    "\000\004\037\141\001\001\000\004\037\140\001\001\000" +
    "\002\001\001\000\004\037\136\001\001\000\004\037\135" +
    "\001\001\000\004\037\134\001\001\000\004\037\133\001" +
    "\001\000\004\037\132\001\001\000\004\037\131\001\001" +
    "\000\004\037\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\175" +
    "\001\001\000\002\001\001\000\006\037\156\046\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\224\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\236\001\001\000\006" +
    "\004\240\037\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\251\006\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\270\001" +
    "\001\000\004\054\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\277\001\001\000\002" +
    "\001\001\000\004\037\301\001\001\000\002\001\001\000" +
    "\004\037\304\001\001\000\004\054\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\070\003\355\007\021\014\051\015\030\016\035\017\053" +
    "\020\046\021\026\022\054\023\006\025\043\026\033\027" +
    "\017\030\042\031\044\032\011\033\022\034\060\035\003" +
    "\040\056\041\061\042\015\043\012\045\037\047\052\050" +
    "\062\051\013\001\001\000\066\007\070\014\051\015\030" +
    "\016\035\017\053\020\046\021\026\022\054\023\006\025" +
    "\043\026\033\027\017\030\042\031\044\032\011\033\022" +
    "\034\060\035\003\040\056\041\061\042\015\043\012\045" +
    "\037\047\052\050\062\051\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\156\046\362\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\035" +
    "\370\044\371\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\070\003\374\007\021\014\051\015" +
    "\030\016\035\017\053\020\046\021\026\022\054\023\006" +
    "\025\043\026\033\027\017\030\042\031\044\032\011\033" +
    "\022\034\060\035\003\040\056\041\061\042\015\043\012" +
    "\045\037\047\052\050\062\051\013\001\001\000\066\007" +
    "\070\014\051\015\030\016\035\017\053\020\046\021\026" +
    "\022\054\023\006\025\043\026\033\027\017\030\042\031" +
    "\044\032\011\033\022\034\060\035\003\040\056\041\061" +
    "\042\015\043\012\045\037\047\052\050\062\051\013\001" +
    "\001\000\002\001\001\000\004\035\u0103\001\001\000\002" +
    "\001\001\000\070\003\u0101\007\021\014\051\015\030\016" +
    "\035\017\053\020\046\021\026\022\054\023\006\025\043" +
    "\026\033\027\017\030\042\031\044\032\011\033\022\034" +
    "\060\035\003\040\056\041\061\042\015\043\012\045\037" +
    "\047\052\050\062\051\013\001\001\000\066\007\070\014" +
    "\051\015\030\016\035\017\053\020\046\021\026\022\054" +
    "\023\006\025\043\026\033\027\017\030\042\031\044\032" +
    "\011\033\022\034\060\035\003\040\056\041\061\042\015" +
    "\043\012\045\037\047\052\050\062\051\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\037\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\u0118\001\001\000\002\001\001\000\006" +
    "\037\156\046\u0113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\u011e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u0122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\u012b\001\001\000\004\037\u0129" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\u012e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u0131\001\001\000" +
    "\002\001\001\000\002\001\001\000\070\003\u0134\007\021" +
    "\014\051\015\030\016\035\017\053\020\046\021\026\022" +
    "\054\023\006\025\043\026\033\027\017\030\042\031\044" +
    "\032\011\033\022\034\060\035\003\040\056\041\061\042" +
    "\015\043\012\045\037\047\052\050\062\051\013\001\001" +
    "\000\066\007\070\014\051\015\030\016\035\017\053\020" +
    "\046\021\026\022\054\023\006\025\043\026\033\027\017" +
    "\030\042\031\044\032\011\033\022\034\060\035\003\040" +
    "\056\041\061\042\015\043\012\045\037\047\052\050\062" +
    "\051\013\001\001\000\006\012\u0138\013\u0137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u013a\001\001" +
    "\000\002\001\001\000\002\001\001\000\070\003\u0143\007" +
    "\021\014\051\015\030\016\035\017\053\020\046\021\026" +
    "\022\054\023\006\025\043\026\033\027\017\030\042\031" +
    "\044\032\011\033\022\034\060\035\003\040\056\041\061" +
    "\042\015\043\012\045\037\047\052\050\062\051\013\001" +
    "\001\000\002\001\001\000\004\037\u013e\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\u0141\007\021\014" +
    "\051\015\030\016\035\017\053\020\046\021\026\022\054" +
    "\023\006\025\043\026\033\027\017\030\042\031\044\032" +
    "\011\033\022\034\060\035\003\040\056\041\061\042\015" +
    "\043\012\045\037\047\052\050\062\051\013\001\001\000" +
    "\066\007\070\014\051\015\030\016\035\017\053\020\046" +
    "\021\026\022\054\023\006\025\043\026\033\027\017\030" +
    "\042\031\044\032\011\033\022\034\060\035\003\040\056" +
    "\041\061\042\015\043\012\045\037\047\052\050\062\051" +
    "\013\001\001\000\002\001\001\000\066\007\070\014\051" +
    "\015\030\016\035\017\053\020\046\021\026\022\054\023" +
    "\006\025\043\026\033\027\017\030\042\031\044\032\011" +
    "\033\022\034\060\035\003\040\056\041\061\042\015\043" +
    "\012\045\037\047\052\050\062\051\013\001\001\000\002" +
    "\001\001\000\070\003\u0146\007\021\014\051\015\030\016" +
    "\035\017\053\020\046\021\026\022\054\023\006\025\043" +
    "\026\033\027\017\030\042\031\044\032\011\033\022\034" +
    "\060\035\003\040\056\041\061\042\015\043\012\045\037" +
    "\047\052\050\062\051\013\001\001\000\066\007\070\014" +
    "\051\015\030\016\035\017\053\020\046\021\026\022\054" +
    "\023\006\025\043\026\033\027\017\030\042\031\044\032" +
    "\011\033\022\034\060\035\003\040\056\041\061\042\015" +
    "\043\012\045\037\047\052\050\062\051\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\u014c\011\u014b" +
    "\037\u014d\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0155\037\u014d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\070\003\u0151\007\021\014" +
    "\051\015\030\016\035\017\053\020\046\021\026\022\054" +
    "\023\006\025\043\026\033\027\017\030\042\031\044\032" +
    "\011\033\022\034\060\035\003\040\056\041\061\042\015" +
    "\043\012\045\037\047\052\050\062\051\013\001\001\000" +
    "\066\007\070\014\051\015\030\016\035\017\053\020\046" +
    "\021\026\022\054\023\006\025\043\026\033\027\017\030" +
    "\042\031\044\032\011\033\022\034\060\035\003\040\056" +
    "\041\061\042\015\043\012\045\037\047\052\050\062\051" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\u0159\007\021\014\051\015\030\016\035" +
    "\017\053\020\046\021\026\022\054\023\006\025\043\026" +
    "\033\027\017\030\042\031\044\032\011\033\022\034\060" +
    "\035\003\040\056\041\061\042\015\043\012\045\037\047" +
    "\052\050\062\051\013\001\001\000\066\007\070\014\051" +
    "\015\030\016\035\017\053\020\046\021\026\022\054\023" +
    "\006\025\043\026\033\027\017\030\042\031\044\032\011" +
    "\033\022\034\060\035\003\040\056\041\061\042\015\043" +
    "\012\045\037\047\052\050\062\051\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\u015f\007\021\014\051\015\030\016\035" +
    "\017\053\020\046\021\026\022\054\023\006\025\043\026" +
    "\033\027\017\030\042\031\044\032\011\033\022\034\060" +
    "\035\003\040\056\041\061\042\015\043\012\045\037\047" +
    "\052\050\062\051\013\001\001\000\066\007\070\014\051" +
    "\015\030\016\035\017\053\020\046\021\026\022\054\023" +
    "\006\025\043\026\033\027\017\030\042\031\044\032\011" +
    "\033\022\034\060\035\003\040\056\041\061\042\015\043" +
    "\012\045\037\047\052\050\062\051\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\u0164\001\001\000" +
    "\002\001\001\000\004\037\u0165\001\001\000\002\001\001" +
    "\000\004\024\u0168\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\070\003\u016b\007\021\014\051" +
    "\015\030\016\035\017\053\020\046\021\026\022\054\023" +
    "\006\025\043\026\033\027\017\030\042\031\044\032\011" +
    "\033\022\034\060\035\003\040\056\041\061\042\015\043" +
    "\012\045\037\047\052\050\062\051\013\001\001\000\066" +
    "\007\070\014\051\015\030\016\035\017\053\020\046\021" +
    "\026\022\054\023\006\025\043\026\033\027\017\030\042" +
    "\031\044\032\011\033\022\034\060\035\003\040\056\041" +
    "\061\042\015\043\012\045\037\047\052\050\062\051\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\u0170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\u0173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\u0179\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\u017d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\u0182\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\251\006\u0187\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u018c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\370\044\u0191\001" +
    "\001\000\002\001\001\000\002\001\001\000\070\003\u0194" +
    "\007\021\014\051\015\030\016\035\017\053\020\046\021" +
    "\026\022\054\023\006\025\043\026\033\027\017\030\042" +
    "\031\044\032\011\033\022\034\060\035\003\040\056\041" +
    "\061\042\015\043\012\045\037\047\052\050\062\051\013" +
    "\001\001\000\066\007\070\014\051\015\030\016\035\017" +
    "\053\020\046\021\026\022\054\023\006\025\043\026\033" +
    "\027\017\030\042\031\044\032\011\033\022\034\060\035" +
    "\003\040\056\041\061\042\015\043\012\045\037\047\052" +
    "\050\062\051\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\070\003\u0198\007\021\014\051\015\030\016\035" +
    "\017\053\020\046\021\026\022\054\023\006\025\043\026" +
    "\033\027\017\030\042\031\044\032\011\033\022\034\060" +
    "\035\003\040\056\041\061\042\015\043\012\045\037\047" +
    "\052\050\062\051\013\001\001\000\066\007\070\014\051" +
    "\015\030\016\035\017\053\020\046\021\026\022\054\023" +
    "\006\025\043\026\033\027\017\030\042\031\044\032\011" +
    "\033\022\034\060\035\003\040\056\041\061\042\015\043" +
    "\012\045\037\047\052\050\062\051\013\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIGNACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= APPENDD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= REMOVEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= FUNCION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= STRUCTS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= START 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION ::= RETURNN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION ::= INICIALIZACION_STRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INSTRUCCION ::= error LLAVE2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, c , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, true, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, false, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(true, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(false, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LISTA_1 ::= LISTA_1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTA_1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTA_2 ::= LISTA_2 COMA AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LISTA_2 ::= AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AGRUPAR_VALORES ::= CORCHETE1 LISTA_1 CORCHETE2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGRUPAR_VALORES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACIONLISTA ::= LIST MENOR TIPOS_LISTAS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT=new DeclaracionLista(b, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // APPENDD ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT=new AppendLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDD",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // REMOVEE ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVEE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INCREMENTO ::= ID MAS_MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECREMENTO ::= ID MENOS_MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(b, a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELSE_IF_LIST ::= ELSE_IF_LIST ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Else_> a = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ b = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELSE_IF_LIST ::= ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ a = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSE_IF_CLAUSE ::= ELSE IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Else_ RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else_(new Condicion(a, aleft, aright), b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_CLAUSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SMATCH ::= MATCH EXPRESION LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASOS_S_S ::= CASOS_S_S CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASOS_S_S ::= CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASOS_S ::= EXPRESION IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ACTUALIZA_FOR ::= ID MAS_MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ACTUALIZA_FOR ::= ID MENOS_MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETURNN ::= RETURN FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Return(aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETURNN ::= RETURN EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Return(a, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETURNN",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // METODO ::= VOID ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new Metodo(a, b, c, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // METODO ::= VOID ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new Metodo(a, b, new LinkedList<HashMap>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCION ::= TIPOS ID PAR1 PARAMS PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<HashMap> c = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new Funcion(a, b, c, t, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCION ::= TIPOS ID PAR1 PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new Funcion(a, b, new LinkedList<HashMap>(), t, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FUNCION",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PARAMS ::= PARAMS COMA TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMS ::= TIPOS ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMS",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STRUCTS ::= STRUCT LLAVE1 LISTA_ATRIBUTOS LLAVE2 ID FINCADENA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap<String,Atributos> b = (HashMap<String,Atributos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		      RESULT = new Struct(a, b, aleft, aright );       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("STRUCTS",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LISTA_ATRIBUTOS ::= LISTA_ATRIBUTOS ID DOSPUNTOS TIPOS FINCADENA 
            {
              HashMap<String,Atributos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Atributos> a = (HashMap<String,Atributos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo c = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;   
                                                                            RESULT.put(b, new Atributos(b, c, aleft, aright));
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ATRIBUTOS",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LISTA_ATRIBUTOS ::= LISTA_ATRIBUTOS ID DOSPUNTOS ID FINCADENA 
            {
              HashMap<String,Atributos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Atributos> a = (HashMap<String,Atributos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;   
                                                                            RESULT.put(b, new Atributos(b, c, aleft, aright));
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ATRIBUTOS",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // LISTA_ATRIBUTOS ::= ID DOSPUNTOS TIPOS FINCADENA 
            {
              HashMap<String,Atributos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new HashMap<String, Atributos>(); 
                                                                            RESULT.put(a, new Atributos(a, b, aleft, aright));
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ATRIBUTOS",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_ATRIBUTOS ::= ID DOSPUNTOS ID FINCADENA 
            {
              HashMap<String,Atributos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new HashMap<String, Atributos>(); 
                                                                            RESULT.put(a, new Atributos(a, b, aleft, aright));
                                                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ATRIBUTOS",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INICIALIZACION_STRUCT ::= VAR ID DOSPUNTOS ID IGUAL LLAVE1 LISTA_VALORES_INICIALIZAR LLAVE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Instruccion> c = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new InstanciarStruct(a, b, true, c, aleft, aright );       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIALIZACION_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // INICIALIZACION_STRUCT ::= CONST ID DOSPUNTOS ID IGUAL LLAVE1 LISTA_VALORES_INICIALIZAR LLAVE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap<String,Instruccion> c = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		      RESULT = new InstanciarStruct(a, b, false, c, aleft, aright );       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIALIZACION_STRUCT",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_VALORES_INICIALIZAR ::= LISTA_VALORES_INICIALIZAR COMA ID DOSPUNTOS EXPRESION 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
                                                                                                                                RESULT.put(b, c);
                                                                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INICIALIZAR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_VALORES_INICIALIZAR ::= LISTA_VALORES_INICIALIZAR COMA ID DOSPUNTOS LLAVE1 LISTA_VALORES_VALORES LLAVE2 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Instruccion> c = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = a;   
                                                                                                                                RESULT.put(b, new AtributosAux(b, c, aleft, aright));
                                                                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INICIALIZAR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTA_VALORES_INICIALIZAR ::= ID DOSPUNTOS EXPRESION 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new HashMap<String, Instruccion>(); 
                                                                                                                                RESULT.put(a, b);
                                                                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INICIALIZAR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LISTA_VALORES_INICIALIZAR ::= ID DOSPUNTOS LLAVE1 LISTA_VALORES_VALORES LLAVE2 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap<String,Instruccion> b = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = new HashMap<String, Instruccion>(); 
                                                                                                                                RESULT.put(a, new AtributosAux(a, b, aleft, aright));
                                                                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_INICIALIZAR",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LISTA_VALORES_VALORES ::= LISTA_VALORES_VALORES COMA ID DOSPUNTOS EXPRESION 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap<String,Instruccion> a = (HashMap<String,Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;   
                                                                                                    RESULT.put(b, c);
                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_VALORES",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LISTA_VALORES_VALORES ::= ID DOSPUNTOS EXPRESION 
            {
              HashMap<String,Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new HashMap<String, Instruccion>(); 
                                                                                                    RESULT.put(a, b);
                                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_VALORES",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // START ::= START_WITH ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Start(a, b, aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // START ::= START_WITH ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		   RESULT = new Start(a, new LinkedList<Instruccion>(), aleft, aright );   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("START",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LLAMADA ::= ID PAR1 PARAMSCALL PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LLAMADA ::= ID PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PARAMSCALL ::= PARAMSCALL COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = a;
                                                    RESULT.add(e);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // TIPOS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPOS_LISTAS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPOS_LISTAS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPOS_LISTAS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPOS_LISTAS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPOS_LISTAS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // TIPOS_LISTAS ::= LIST 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.LISTA);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= EXPRESION DOBLE_ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= EXPRESION PORCENTUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= EXPRESION ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= EXPRESION NOT_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.valueOf(((String) a).toLowerCase()), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // EXPRESION ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // EXPRESION ::= TOSTRING PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // EXPRESION ::= ID PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // EXPRESION ::= ID PAR1 PARAMSCALL PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT= new Llamada(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // EXPRESION ::= ID PAR1 PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // EXPRESION ::= ID PUNTO ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new AccesoStruct(a, b, c, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // EXPRESION ::= ID PUNTO ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT= new AccesoStruct(a, b, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
