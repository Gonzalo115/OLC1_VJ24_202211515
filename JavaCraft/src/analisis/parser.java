
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisis;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionLista;
import instrucciones.AsignacionVC;
import instrucciones.AsignacionVector;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Else_;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;
import instrucciones.AppendLista;
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;
import expresiones.AccesoVector;
import expresiones.RemoveLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.Find;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\004\000" +
    "\002\007\004\000\002\014\007\000\002\025\007\000\002" +
    "\025\011\000\002\025\007\000\002\025\011\000\002\030" +
    "\006\000\002\026\013\000\002\026\013\000\002\026\017" +
    "\000\002\026\017\000\002\004\005\000\002\004\003\000" +
    "\002\006\005\000\002\006\003\000\002\005\005\000\002" +
    "\031\011\000\002\031\014\000\002\027\015\000\002\037" +
    "\011\000\002\040\011\000\002\015\005\000\002\016\005" +
    "\000\002\017\016\000\002\017\012\000\002\017\015\000" +
    "\002\017\011\000\002\012\004\000\002\012\003\000\002" +
    "\013\012\000\002\023\015\000\002\023\007\000\002\023" +
    "\014\000\002\010\004\000\002\010\003\000\002\011\010" +
    "\000\002\020\014\000\002\024\005\000\002\024\004\000" +
    "\002\024\004\000\002\021\011\000\002\022\013\000\002" +
    "\032\004\000\002\033\004\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\005" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\004\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\006\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\006\000\002\036\011\000\002" +
    "\036\005\000\002\036\010\000\002\036\006\000\002\036" +
    "\006\000\002\036\006\000\002\036\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\034\003\030\011\020\012\025\013\005\014" +
    "\015\022\006\023\041\024\031\034\016\036\036\037\010" +
    "\040\021\041\040\001\002\000\040\002\ufffe\003\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\014\ufffe\022\ufffe\023\ufffe\024\ufffe" +
    "\034\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\052\ufffe\001" +
    "\002\000\004\042\u0128\001\002\000\004\072\u0118\001\002" +
    "\000\040\002\ufff0\003\ufff0\011\ufff0\012\ufff0\013\ufff0\014" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\034\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\041\ufff0\052\ufff0\001\002\000\004\046\u0112\001" +
    "\002\000\040\002\ufff8\003\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\022\ufff8\023\ufff8\024\ufff8\034\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\052\ufff8\001\002\000\040\002\ufffc" +
    "\003\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\034\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc" +
    "\052\ufffc\001\002\000\040\002\ufff5\003\ufff5\011\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\022\ufff5\023\ufff5\024\ufff5\034\ufff5" +
    "\036\ufff5\037\ufff5\040\ufff5\041\ufff5\052\ufff5\001\002\000" +
    "\036\002\000\003\030\011\020\012\025\013\005\014\015" +
    "\022\006\023\041\024\031\034\016\036\036\037\010\040" +
    "\021\041\040\001\002\000\004\046\u010e\001\002\000\004" +
    "\046\366\001\002\000\040\002\uffed\003\uffed\011\uffed\012" +
    "\uffed\013\uffed\014\uffed\022\uffed\023\uffed\024\uffed\034\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\052\uffed\001\002\000" +
    "\014\044\333\050\272\053\334\065\336\066\335\001\002" +
    "\000\004\051\323\001\002\000\040\002\uffef\003\uffef\011" +
    "\uffef\012\uffef\013\uffef\014\uffef\022\uffef\023\uffef\024\uffef" +
    "\034\uffef\036\uffef\037\uffef\040\uffef\041\uffef\052\uffef\001" +
    "\002\000\040\002\ufff9\003\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\022\ufff9\023\ufff9\024\ufff9\034\ufff9\036\ufff9\037" +
    "\ufff9\040\ufff9\041\ufff9\052\ufff9\001\002\000\040\002\ufffa" +
    "\003\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\034\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\052\ufffa\001\002\000\004\042\322\001\002\000\040\002" +
    "\ufff7\003\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\034\ufff7\036\ufff7\037\ufff7\040\ufff7\041" +
    "\ufff7\052\ufff7\001\002\000\040\002\ufffb\003\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\022\ufffb\023\ufffb\024\ufffb\034" +
    "\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\052\ufffb\001\002" +
    "\000\006\042\320\052\321\001\002\000\004\011\275\001" +
    "\002\000\040\002\ufff2\003\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\022\ufff2\023\ufff2\024\ufff2\034\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\041\ufff2\052\ufff2\001\002\000\040\002\ufff6" +
    "\003\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\022\ufff6\023" +
    "\ufff6\024\ufff6\034\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6" +
    "\052\ufff6\001\002\000\040\002\ufff3\003\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\022\ufff3\023\ufff3\024\ufff3\034\ufff3" +
    "\036\ufff3\037\ufff3\040\ufff3\041\ufff3\052\ufff3\001\002\000" +
    "\040\002\ufffd\003\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\034\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\041\ufffd\052\ufffd\001\002\000\004\046\253\001\002" +
    "\000\040\002\ufff1\003\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\034\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\052\ufff1\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\004\011" +
    "\046\001\002\000\040\002\ufff4\003\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\022\ufff4\023\ufff4\024\ufff4\034\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\052\ufff4\001\002\000\004" +
    "\002\045\001\002\000\040\002\uffee\003\uffee\011\uffee\012" +
    "\uffee\013\uffee\014\uffee\022\uffee\023\uffee\024\uffee\034\uffee" +
    "\036\uffee\037\uffee\040\uffee\041\uffee\052\uffee\001\002\000" +
    "\004\002\001\001\002\000\004\043\047\001\002\000\014" +
    "\015\055\016\050\017\053\020\054\021\052\001\002\000" +
    "\012\042\uffbe\047\uffbe\050\uffbe\053\uffbe\001\002\000\010" +
    "\042\057\050\060\053\056\001\002\000\012\042\uffbb\047" +
    "\uffbb\050\uffbb\053\uffbb\001\002\000\012\042\uffbd\047\uffbd" +
    "\050\uffbd\053\uffbd\001\002\000\012\042\uffbc\047\uffbc\050" +
    "\uffbc\053\uffbc\001\002\000\012\042\uffbf\047\uffbf\050\uffbf" +
    "\053\uffbf\001\002\000\004\054\174\001\002\000\040\002" +
    "\uffe9\003\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\034\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\052\uffe9\001\002\000\032\004\061\005\075\006\067" +
    "\007\063\010\066\011\072\030\071\031\064\032\062\046" +
    "\070\057\065\076\073\001\002\000\054\042\uffa0\045\uffa0" +
    "\047\uffa0\050\uffa0\051\uffa0\054\uffa0\056\uffa0\057\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\070\uffa0\071\uffa0\072\uffa0" +
    "\073\uffa0\074\uffa0\075\uffa0\077\uffa0\100\uffa0\101\uffa0\001" +
    "\002\000\004\046\171\001\002\000\054\042\uffa1\045\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\054\uffa1\056\uffa1\057\uffa1\061" +
    "\uffa1\062\uffa1\063\uffa1\064\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\074\uffa1\075\uffa1\077\uffa1\100\uffa1\101\uffa1\001" +
    "\002\000\004\046\166\001\002\000\032\004\061\005\075" +
    "\006\067\007\063\010\066\011\072\030\071\031\064\032" +
    "\062\046\070\057\065\076\073\001\002\000\054\042\uff9e" +
    "\045\uff9e\047\uff9e\050\uff9e\051\uff9e\054\uff9e\056\uff9e\057" +
    "\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\070\uff9e\071\uff9e" +
    "\072\uff9e\073\uff9e\074\uff9e\075\uff9e\077\uff9e\100\uff9e\101" +
    "\uff9e\001\002\000\054\042\uffa2\045\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\054\uffa2\056\uffa2\057\uffa2\061\uffa2\062\uffa2\063" +
    "\uffa2\064\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\074\uffa2" +
    "\075\uffa2\077\uffa2\100\uffa2\101\uffa2\001\002\000\044\004" +
    "\061\005\075\006\067\007\063\010\066\011\072\015\055" +
    "\016\050\017\053\020\054\021\052\030\071\031\064\032" +
    "\062\046\070\057\065\076\073\001\002\000\004\046\155" +
    "\001\002\000\060\042\uff9d\044\137\045\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\053\136\054\uff9d\056\uff9d\057\uff9d\061\uff9d" +
    "\062\uff9d\063\uff9d\064\uff9d\070\uff9d\071\uff9d\072\uff9d\073" +
    "\uff9d\074\uff9d\075\uff9d\077\uff9d\100\uff9d\101\uff9d\001\002" +
    "\000\032\004\061\005\075\006\067\007\063\010\066\011" +
    "\072\030\071\031\064\032\062\046\070\057\065\076\073" +
    "\001\002\000\042\042\107\056\105\057\101\061\112\062" +
    "\110\063\111\064\100\070\103\071\115\072\102\073\113" +
    "\074\106\075\104\077\114\100\076\101\077\001\002\000" +
    "\054\042\uff9f\045\uff9f\047\uff9f\050\uff9f\051\uff9f\054\uff9f" +
    "\056\uff9f\057\uff9f\061\uff9f\062\uff9f\063\uff9f\064\uff9f\070" +
    "\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\075\uff9f\077\uff9f" +
    "\100\uff9f\101\uff9f\001\002\000\032\004\061\005\075\006" +
    "\067\007\063\010\066\011\072\030\071\031\064\032\062" +
    "\046\070\057\065\076\073\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\032\004" +
    "\061\005\075\006\067\007\063\010\066\011\072\030\071" +
    "\031\064\032\062\046\070\057\065\076\073\001\002\000" +
    "\032\004\061\005\075\006\067\007\063\010\066\011\072" +
    "\030\071\031\064\032\062\046\070\057\065\076\073\001" +
    "\002\000\032\004\061\005\075\006\067\007\063\010\066" +
    "\011\072\030\071\031\064\032\062\046\070\057\065\076" +
    "\073\001\002\000\032\004\061\005\075\006\067\007\063" +
    "\010\066\011\072\030\071\031\064\032\062\046\070\057" +
    "\065\076\073\001\002\000\032\004\061\005\075\006\067" +
    "\007\063\010\066\011\072\030\071\031\064\032\062\046" +
    "\070\057\065\076\073\001\002\000\032\004\061\005\075" +
    "\006\067\007\063\010\066\011\072\030\071\031\064\032" +
    "\062\046\070\057\065\076\073\001\002\000\032\004\061" +
    "\005\075\006\067\007\063\010\066\011\072\030\071\031" +
    "\064\032\062\046\070\057\065\076\073\001\002\000\040" +
    "\002\uffe8\003\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\034\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\052\uffe8\001\002\000\032\004\061\005\075\006" +
    "\067\007\063\010\066\011\072\030\071\031\064\032\062" +
    "\046\070\057\065\076\073\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\032\004" +
    "\061\005\075\006\067\007\063\010\066\011\072\030\071" +
    "\031\064\032\062\046\070\057\065\076\073\001\002\000" +
    "\032\004\061\005\075\006\067\007\063\010\066\011\072" +
    "\030\071\031\064\032\062\046\070\057\065\076\073\001" +
    "\002\000\032\004\061\005\075\006\067\007\063\010\066" +
    "\011\072\030\071\031\064\032\062\046\070\057\065\076" +
    "\073\001\002\000\032\004\061\005\075\006\067\007\063" +
    "\010\066\011\072\030\071\031\064\032\062\046\070\057" +
    "\065\076\073\001\002\000\054\042\uffac\045\uffac\047\uffac" +
    "\050\uffac\051\uffac\054\uffac\056\105\057\101\061\112\062" +
    "\110\063\111\064\100\070\uffac\071\uffac\072\uffac\073\uffac" +
    "\074\uffac\075\uffac\077\uffac\100\uffac\101\uffac\001\002\000" +
    "\054\042\uffa4\045\uffa4\047\uffa4\050\uffa4\051\uffa4\054\uffa4" +
    "\056\105\057\101\061\112\062\110\063\111\064\100\070" +
    "\103\071\115\072\102\073\113\074\106\075\104\077\uffa4" +
    "\100\076\101\077\001\002\000\054\042\uffaa\045\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\054\uffaa\056\105\057\101\061\112" +
    "\062\110\063\111\064\100\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\074\uffaa\075\uffaa\077\uffaa\100\uffaa\101\uffaa\001\002" +
    "\000\054\042\uffb0\045\uffb0\047\uffb0\050\uffb0\051\uffb0\054" +
    "\uffb0\056\uffb0\057\uffb0\061\uffb0\062\uffb0\063\111\064\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\077" +
    "\uffb0\100\uffb0\101\uffb0\001\002\000\052\042\uffb3\045\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\054\uffb3\056\uffb3\057\uffb3\061" +
    "\uffb3\062\uffb3\064\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3" +
    "\074\uffb3\075\uffb3\077\uffb3\100\uffb3\101\uffb3\001\002\000" +
    "\054\042\uffb2\045\uffb2\047\uffb2\050\uffb2\051\uffb2\054\uffb2" +
    "\056\uffb2\057\uffb2\061\uffb2\062\uffb2\063\111\064\uffb2\070" +
    "\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\077\uffb2" +
    "\100\uffb2\101\uffb2\001\002\000\054\042\uffa9\045\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\054\uffa9\056\105\057\101\061\112" +
    "\062\110\063\111\064\100\070\uffa9\071\uffa9\072\uffa9\073" +
    "\uffa9\074\uffa9\075\uffa9\077\uffa9\100\uffa9\101\uffa9\001\002" +
    "\000\054\042\uffaf\045\uffaf\047\uffaf\050\uffaf\051\uffaf\054" +
    "\uffaf\056\uffaf\057\uffaf\061\112\062\110\063\111\064\100" +
    "\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\077" +
    "\uffaf\100\uffaf\101\uffaf\001\002\000\054\042\uffa8\045\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\054\uffa8\056\105\057\101\061" +
    "\112\062\110\063\111\064\100\070\uffa8\071\uffa8\072\uffa8" +
    "\073\uffa8\074\uffa8\075\uffa8\077\uffa8\100\uffa8\101\uffa8\001" +
    "\002\000\054\042\uffad\045\uffad\047\uffad\050\uffad\051\uffad" +
    "\054\uffad\056\105\057\101\061\112\062\110\063\111\064" +
    "\100\070\uffad\071\uffad\072\uffad\073\uffad\074\uffad\075\uffad" +
    "\077\uffad\100\uffad\101\uffad\001\002\000\054\042\uffab\045" +
    "\uffab\047\uffab\050\uffab\051\uffab\054\uffab\056\105\057\101" +
    "\061\112\062\110\063\111\064\100\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\074\uffab\075\uffab\077\uffab\100\uffab\101\uffab" +
    "\001\002\000\054\042\uffae\045\uffae\047\uffae\050\uffae\051" +
    "\uffae\054\uffae\056\uffae\057\uffae\061\112\062\110\063\111" +
    "\064\100\070\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\077\uffae\100\uffae\101\uffae\001\002\000\054\042\uffb1" +
    "\045\uffb1\047\uffb1\050\uffb1\051\uffb1\054\uffb1\056\uffb1\057" +
    "\uffb1\061\uffb1\062\uffb1\063\111\064\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\077\uffb1\100\uffb1\101" +
    "\uffb1\001\002\000\054\042\uffa5\045\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\054\uffa5\056\105\057\101\061\112\062\110\063" +
    "\111\064\100\070\103\071\115\072\102\073\113\074\106" +
    "\075\104\077\uffa5\100\uffa5\101\uffa5\001\002\000\054\042" +
    "\uffa6\045\uffa6\047\uffa6\050\uffa6\051\uffa6\054\uffa6\056\105" +
    "\057\101\061\112\062\110\063\111\064\100\070\103\071" +
    "\115\072\102\073\113\074\106\075\104\077\uffa6\100\uffa6" +
    "\101\077\001\002\000\054\042\uffa7\045\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\054\uffa7\056\105\057\101\061\112\062\110" +
    "\063\111\064\100\070\103\071\115\072\102\073\113\074" +
    "\106\075\104\077\uffa7\100\uffa7\101\uffa7\001\002\000\032" +
    "\004\061\005\075\006\067\007\063\010\066\011\072\030" +
    "\071\031\064\032\062\046\070\057\065\076\073\001\002" +
    "\000\006\027\141\033\140\001\002\000\004\046\145\001" +
    "\002\000\004\046\142\001\002\000\032\004\061\005\075" +
    "\006\067\007\063\010\066\011\072\030\071\031\064\032" +
    "\062\046\070\057\065\076\073\001\002\000\042\047\144" +
    "\056\105\057\101\061\112\062\110\063\111\064\100\070" +
    "\103\071\115\072\102\073\113\074\106\075\104\077\114" +
    "\100\076\101\077\001\002\000\054\042\uff99\045\uff99\047" +
    "\uff99\050\uff99\051\uff99\054\uff99\056\uff99\057\uff99\061\uff99" +
    "\062\uff99\063\uff99\064\uff99\070\uff99\071\uff99\072\uff99\073" +
    "\uff99\074\uff99\075\uff99\077\uff99\100\uff99\101\uff99\001\002" +
    "\000\032\004\061\005\075\006\067\007\063\010\066\011" +
    "\072\030\071\031\064\032\062\046\070\057\065\076\073" +
    "\001\002\000\042\047\147\056\105\057\101\061\112\062" +
    "\110\063\111\064\100\070\103\071\115\072\102\073\113" +
    "\074\106\075\104\077\114\100\076\101\077\001\002\000" +
    "\054\042\uff95\045\uff95\047\uff95\050\uff95\051\uff95\054\uff95" +
    "\056\uff95\057\uff95\061\uff95\062\uff95\063\uff95\064\uff95\070" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\077\uff95" +
    "\100\uff95\101\uff95\001\002\000\042\054\151\056\105\057" +
    "\101\061\112\062\110\063\111\064\100\070\103\071\115" +
    "\072\102\073\113\074\106\075\104\077\114\100\076\101" +
    "\077\001\002\000\056\042\uff9c\045\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\053\152\054\uff9c\056\uff9c\057\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\077\uff9c\100\uff9c\101\uff9c\001\002\000" +
    "\032\004\061\005\075\006\067\007\063\010\066\011\072" +
    "\030\071\031\064\032\062\046\070\057\065\076\073\001" +
    "\002\000\042\054\154\056\105\057\101\061\112\062\110" +
    "\063\111\064\100\070\103\071\115\072\102\073\113\074" +
    "\106\075\104\077\114\100\076\101\077\001\002\000\054" +
    "\042\uff9b\045\uff9b\047\uff9b\050\uff9b\051\uff9b\054\uff9b\056" +
    "\uff9b\057\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\070\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\077\uff9b\100" +
    "\uff9b\101\uff9b\001\002\000\032\004\061\005\075\006\067" +
    "\007\063\010\066\011\072\030\071\031\064\032\062\046" +
    "\070\057\065\076\073\001\002\000\042\047\157\056\105" +
    "\057\101\061\112\062\110\063\111\064\100\070\103\071" +
    "\115\072\102\073\113\074\106\075\104\077\114\100\076" +
    "\101\077\001\002\000\054\042\uff98\045\uff98\047\uff98\050" +
    "\uff98\051\uff98\054\uff98\056\uff98\057\uff98\061\uff98\062\uff98" +
    "\063\uff98\064\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074" +
    "\uff98\075\uff98\077\uff98\100\uff98\101\uff98\001\002\000\004" +
    "\047\163\001\002\000\042\047\162\056\105\057\101\061" +
    "\112\062\110\063\111\064\100\070\103\071\115\072\102" +
    "\073\113\074\106\075\104\077\114\100\076\101\077\001" +
    "\002\000\054\042\uff9a\045\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\054\uff9a\056\uff9a\057\uff9a\061\uff9a\062\uff9a\063\uff9a\064" +
    "\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\077\uff9a\100\uff9a\101\uff9a\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\054\042" +
    "\uffa3\045\uffa3\047\uffa3\050\uffa3\051\uffa3\054\uffa3\056\105" +
    "\057\101\061\112\062\110\063\111\064\100\070\uffa3\071" +
    "\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\077\uffa3\100\uffa3" +
    "\101\uffa3\001\002\000\054\042\uffb4\045\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\054\uffb4\056\uffb4\057\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\077\uffb4\100\uffb4\101\uffb4\001\002\000\032" +
    "\004\061\005\075\006\067\007\063\010\066\011\072\030" +
    "\071\031\064\032\062\046\070\057\065\076\073\001\002" +
    "\000\042\047\170\056\105\057\101\061\112\062\110\063" +
    "\111\064\100\070\103\071\115\072\102\073\113\074\106" +
    "\075\104\077\114\100\076\101\077\001\002\000\054\042" +
    "\uff97\045\uff97\047\uff97\050\uff97\051\uff97\054\uff97\056\uff97" +
    "\057\uff97\061\uff97\062\uff97\063\uff97\064\uff97\070\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\075\uff97\077\uff97\100\uff97" +
    "\101\uff97\001\002\000\032\004\061\005\075\006\067\007" +
    "\063\010\066\011\072\030\071\031\064\032\062\046\070" +
    "\057\065\076\073\001\002\000\042\047\173\056\105\057" +
    "\101\061\112\062\110\063\111\064\100\070\103\071\115" +
    "\072\102\073\113\074\106\075\104\077\114\100\076\101" +
    "\077\001\002\000\054\042\uff96\045\uff96\047\uff96\050\uff96" +
    "\051\uff96\054\uff96\056\uff96\057\uff96\061\uff96\062\uff96\063" +
    "\uff96\064\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96" +
    "\075\uff96\077\uff96\100\uff96\101\uff96\001\002\000\006\050" +
    "\176\053\175\001\002\000\004\054\207\001\002\000\004" +
    "\053\177\001\002\000\032\004\061\005\075\006\067\007" +
    "\063\010\066\011\072\030\071\031\064\032\062\046\070" +
    "\057\065\076\073\001\002\000\004\042\201\001\002\000" +
    "\040\002\uffe4\003\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\034\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\052\uffe4\001\002\000\006\045\204\054\205" +
    "\001\002\000\044\045\uffdf\054\uffdf\056\105\057\101\061" +
    "\112\062\110\063\111\064\100\070\103\071\115\072\102" +
    "\073\113\074\106\075\104\077\114\100\076\101\077\001" +
    "\002\000\032\004\061\005\075\006\067\007\063\010\066" +
    "\011\072\030\071\031\064\032\062\046\070\057\065\076" +
    "\073\001\002\000\010\042\uffdc\045\uffdc\054\uffdc\001\002" +
    "\000\044\045\uffe0\054\uffe0\056\105\057\101\061\112\062" +
    "\110\063\111\064\100\070\103\071\115\072\102\073\113" +
    "\074\106\075\104\077\114\100\076\101\077\001\002\000" +
    "\004\050\210\001\002\000\004\053\211\001\002\000\004" +
    "\053\177\001\002\000\006\045\215\054\214\001\002\000" +
    "\006\045\uffdd\054\uffdd\001\002\000\004\042\217\001\002" +
    "\000\004\053\177\001\002\000\006\045\uffde\054\uffde\001" +
    "\002\000\040\002\uffe2\003\uffe2\011\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\022\uffe2\023\uffe2\024\uffe2\034\uffe2\036\uffe2\037" +
    "\uffe2\040\uffe2\041\uffe2\052\uffe2\001\002\000\042\051\221" +
    "\056\105\057\101\061\112\062\110\063\111\064\100\070" +
    "\103\071\115\072\102\073\113\074\106\075\104\077\114" +
    "\100\076\101\077\001\002\000\034\004\061\005\075\006" +
    "\067\007\063\010\066\011\072\030\071\031\064\032\062" +
    "\046\070\055\222\057\065\076\073\001\002\000\004\050" +
    "\245\001\002\000\036\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\030\uffc9\031\uffc9\032\uffc9\046\uffc9\052" +
    "\uffc9\055\uffc9\057\uffc9\076\uffc9\001\002\000\036\004\061" +
    "\005\075\006\067\007\063\010\066\011\072\030\071\031" +
    "\064\032\062\046\070\052\235\055\234\057\065\076\073" +
    "\001\002\000\042\050\226\056\105\057\101\061\112\062" +
    "\110\063\111\064\100\070\103\071\115\072\102\073\113" +
    "\074\106\075\104\077\114\100\076\101\077\001\002\000" +
    "\004\074\227\001\002\000\004\051\230\001\002\000\034" +
    "\003\030\011\020\012\025\013\005\014\015\022\006\023" +
    "\041\024\031\034\016\036\036\037\010\040\021\041\040" +
    "\001\002\000\036\003\030\011\020\012\025\013\005\014" +
    "\015\022\006\023\041\024\031\034\016\036\036\037\010" +
    "\040\021\041\040\052\233\001\002\000\040\002\uffff\003" +
    "\uffff\011\uffff\012\uffff\013\uffff\014\uffff\022\uffff\023\uffff" +
    "\024\uffff\034\uffff\036\uffff\037\uffff\040\uffff\041\uffff\052" +
    "\uffff\001\002\000\036\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\030\uffc8\031\uffc8\032\uffc8\046\uffc8\052" +
    "\uffc8\055\uffc8\057\uffc8\076\uffc8\001\002\000\004\050\237" +
    "\001\002\000\040\002\uffcc\003\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\022\uffcc\023\uffcc\024\uffcc\034\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\052\uffcc\001\002\000\036\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\030\uffca" +
    "\031\uffca\032\uffca\046\uffca\052\uffca\055\uffca\057\uffca\076" +
    "\uffca\001\002\000\004\074\240\001\002\000\004\051\241" +
    "\001\002\000\034\003\030\011\020\012\025\013\005\014" +
    "\015\022\006\023\041\024\031\034\016\036\036\037\010" +
    "\040\021\041\040\001\002\000\036\003\030\011\020\012" +
    "\025\013\005\014\015\022\006\023\041\024\031\034\016" +
    "\036\036\037\010\040\021\041\040\052\243\001\002\000" +
    "\004\052\244\001\002\000\040\002\uffcd\003\uffcd\011\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\022\uffcd\023\uffcd\024\uffcd\034" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\052\uffcd\001\002" +
    "\000\004\074\246\001\002\000\004\051\247\001\002\000" +
    "\034\003\030\011\020\012\025\013\005\014\015\022\006" +
    "\023\041\024\031\034\016\036\036\037\010\040\021\041" +
    "\040\001\002\000\036\003\030\011\020\012\025\013\005" +
    "\014\015\022\006\023\041\024\031\034\016\036\036\037" +
    "\010\040\021\041\040\052\251\001\002\000\004\052\252" +
    "\001\002\000\040\002\uffcb\003\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\022\uffcb\023\uffcb\024\uffcb\034\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\052\uffcb\001\002\000\004\011" +
    "\254\001\002\000\004\050\272\001\002\000\032\004\061" +
    "\005\075\006\067\007\063\010\066\011\072\030\071\031" +
    "\064\032\062\046\070\057\065\076\073\001\002\000\042" +
    "\042\257\056\105\057\101\061\112\062\110\063\111\064" +
    "\100\070\103\071\115\072\102\073\113\074\106\075\104" +
    "\077\114\100\076\101\077\001\002\000\004\011\260\001" +
    "\002\000\010\050\267\065\270\066\266\001\002\000\004" +
    "\047\262\001\002\000\004\051\263\001\002\000\034\003" +
    "\030\011\020\012\025\013\005\014\015\022\006\023\041" +
    "\024\031\034\016\036\036\037\010\040\021\041\040\001" +
    "\002\000\036\003\030\011\020\012\025\013\005\014\015" +
    "\022\006\023\041\024\031\034\016\036\036\037\010\040" +
    "\021\041\040\052\265\001\002\000\040\002\uffc7\003\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\052\uffc7" +
    "\001\002\000\004\047\uffc4\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\004\047" +
    "\uffc5\001\002\000\042\047\uffc6\056\105\057\101\061\112" +
    "\062\110\063\111\064\100\070\103\071\115\072\102\073" +
    "\113\074\106\075\104\077\114\100\076\101\077\001\002" +
    "\000\032\004\061\005\075\006\067\007\063\010\066\011" +
    "\072\030\071\031\064\032\062\046\070\057\065\076\073" +
    "\001\002\000\042\042\274\056\105\057\101\061\112\062" +
    "\110\063\111\064\100\070\103\071\115\072\102\073\113" +
    "\074\106\075\104\077\114\100\076\101\077\001\002\000" +
    "\066\002\uffe5\003\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\036\uffe5" +
    "\037\uffe5\040\uffe5\041\uffe5\046\uffe5\052\uffe5\057\uffe5\076" +
    "\uffe5\001\002\000\004\043\276\001\002\000\014\015\055" +
    "\016\050\017\053\020\054\021\052\001\002\000\010\042" +
    "\301\050\302\053\300\001\002\000\004\054\305\001\002" +
    "\000\040\002\uffe7\003\uffe7\011\uffe7\012\uffe7\013\uffe7\014" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\034\uffe7\036\uffe7\037\uffe7" +
    "\040\uffe7\041\uffe7\052\uffe7\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\042\042" +
    "\304\056\105\057\101\061\112\062\110\063\111\064\100" +
    "\070\103\071\115\072\102\073\113\074\106\075\104\077" +
    "\114\100\076\101\077\001\002\000\040\002\uffe6\003\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\034\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6\052\uffe6" +
    "\001\002\000\006\050\307\053\306\001\002\000\004\054" +
    "\312\001\002\000\004\053\177\001\002\000\004\042\311" +
    "\001\002\000\040\002\uffe3\003\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\022\uffe3\023\uffe3\024\uffe3\034\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\052\uffe3\001\002\000\004\050" +
    "\313\001\002\000\004\053\314\001\002\000\004\053\177" +
    "\001\002\000\006\045\215\054\316\001\002\000\004\042" +
    "\317\001\002\000\040\002\uffe1\003\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\022\uffe1\023\uffe1\024\uffe1\034\uffe1\036" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\052\uffe1\001\002\000\040" +
    "\002\uffec\003\uffec\011\uffec\012\uffec\013\uffec\014\uffec\022" +
    "\uffec\023\uffec\024\uffec\034\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\052\uffec\001\002\000\040\002\uffeb\003\uffeb\011" +
    "\uffeb\012\uffeb\013\uffeb\014\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\034\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\052\uffeb\001" +
    "\002\000\040\002\uffc1\003\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\022\uffc1\023\uffc1\024\uffc1\034\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\052\uffc1\001\002\000\034\003\030" +
    "\011\020\012\025\013\005\014\015\022\006\023\041\024" +
    "\031\034\016\036\036\037\010\040\021\041\040\001\002" +
    "\000\036\003\030\011\020\012\025\013\005\014\015\022" +
    "\006\023\041\024\031\034\016\036\036\037\010\040\021" +
    "\041\040\052\325\001\002\000\004\037\326\001\002\000" +
    "\004\046\327\001\002\000\032\004\061\005\075\006\067" +
    "\007\063\010\066\011\072\030\071\031\064\032\062\046" +
    "\070\057\065\076\073\001\002\000\042\047\331\056\105" +
    "\057\101\061\112\062\110\063\111\064\100\070\103\071" +
    "\115\072\102\073\113\074\106\075\104\077\114\100\076" +
    "\101\077\001\002\000\004\042\332\001\002\000\040\002" +
    "\uffc2\003\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\034\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\052\uffc2\001\002\000\006\026\354\027\355\001\002" +
    "\000\032\004\061\005\075\006\067\007\063\010\066\011" +
    "\072\030\071\031\064\032\062\046\070\057\065\076\073" +
    "\001\002\000\004\042\340\001\002\000\004\042\337\001" +
    "\002\000\040\002\uffd6\003\uffd6\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\022\uffd6\023\uffd6\024\uffd6\034\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\052\uffd6\001\002\000\040\002\uffd5" +
    "\003\uffd5\011\uffd5\012\uffd5\013\uffd5\014\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\034\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\052\uffd5\001\002\000\042\054\342\056\105\057\101\061" +
    "\112\062\110\063\111\064\100\070\103\071\115\072\102" +
    "\073\113\074\106\075\104\077\114\100\076\101\077\001" +
    "\002\000\006\050\344\053\343\001\002\000\032\004\061" +
    "\005\075\006\067\007\063\010\066\011\072\030\071\031" +
    "\064\032\062\046\070\057\065\076\073\001\002\000\032" +
    "\004\061\005\075\006\067\007\063\010\066\011\072\030" +
    "\071\031\064\032\062\046\070\057\065\076\073\001\002" +
    "\000\042\042\346\056\105\057\101\061\112\062\110\063" +
    "\111\064\100\070\103\071\115\072\102\073\113\074\106" +
    "\075\104\077\114\100\076\101\077\001\002\000\040\002" +
    "\uffdb\003\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\052\uffdb\001\002\000\042\054\350\056\105\057\101" +
    "\061\112\062\110\063\111\064\100\070\103\071\115\072" +
    "\102\073\113\074\106\075\104\077\114\100\076\101\077" +
    "\001\002\000\004\050\351\001\002\000\032\004\061\005" +
    "\075\006\067\007\063\010\066\011\072\030\071\031\064" +
    "\032\062\046\070\057\065\076\073\001\002\000\042\042" +
    "\353\056\105\057\101\061\112\062\110\063\111\064\100" +
    "\070\103\071\115\072\102\073\113\074\106\075\104\077" +
    "\114\100\076\101\077\001\002\000\040\002\uffda\003\uffda" +
    "\011\uffda\012\uffda\013\uffda\014\uffda\022\uffda\023\uffda\024" +
    "\uffda\034\uffda\036\uffda\037\uffda\040\uffda\041\uffda\052\uffda" +
    "\001\002\000\004\046\362\001\002\000\004\046\356\001" +
    "\002\000\032\004\061\005\075\006\067\007\063\010\066" +
    "\011\072\030\071\031\064\032\062\046\070\057\065\076" +
    "\073\001\002\000\042\047\360\056\105\057\101\061\112" +
    "\062\110\063\111\064\100\070\103\071\115\072\102\073" +
    "\113\074\106\075\104\077\114\100\076\101\077\001\002" +
    "\000\004\042\361\001\002\000\040\002\uffd7\003\uffd7\011" +
    "\uffd7\012\uffd7\013\uffd7\014\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\052\uffd7\001" +
    "\002\000\032\004\061\005\075\006\067\007\063\010\066" +
    "\011\072\030\071\031\064\032\062\046\070\057\065\076" +
    "\073\001\002\000\042\047\364\056\105\057\101\061\112" +
    "\062\110\063\111\064\100\070\103\071\115\072\102\073" +
    "\113\074\106\075\104\077\114\100\076\101\077\001\002" +
    "\000\004\042\365\001\002\000\040\002\uffd8\003\uffd8\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\034\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\052\uffd8\001" +
    "\002\000\032\004\061\005\075\006\067\007\063\010\066" +
    "\011\072\030\071\031\064\032\062\046\070\057\065\076" +
    "\073\001\002\000\042\047\370\056\105\057\101\061\112" +
    "\062\110\063\111\064\100\070\103\071\115\072\102\073" +
    "\113\074\106\075\104\077\114\100\076\101\077\001\002" +
    "\000\004\051\371\001\002\000\034\003\030\011\020\012" +
    "\025\013\005\014\015\022\006\023\041\024\031\034\016" +
    "\036\036\037\010\040\021\041\040\001\002\000\036\003" +
    "\030\011\020\012\025\013\005\014\015\022\006\023\041" +
    "\024\031\034\016\036\036\037\010\040\021\041\040\052" +
    "\373\001\002\000\042\002\uffd1\003\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\022\uffd1\023\uffd1\024\uffd1\034\uffd1\035" +
    "\374\036\uffd1\037\uffd1\040\uffd1\041\uffd1\052\uffd1\001\002" +
    "\000\006\034\u0102\051\u010b\001\002\000\042\002\uffcf\003" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\052\uffcf\001\002\000\042\002\uffd3\003\uffd3\011\uffd3" +
    "\012\uffd3\013\uffd3\014\uffd3\022\uffd3\023\uffd3\024\uffd3\034" +
    "\uffd3\035\377\036\uffd3\037\uffd3\040\uffd3\041\uffd3\052\uffd3" +
    "\001\002\000\006\034\u0102\051\u0101\001\002\000\042\002" +
    "\uffd0\003\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\052\uffd0\001\002\000\034\003\030\011\020" +
    "\012\025\013\005\014\015\022\006\023\041\024\031\034" +
    "\016\036\036\037\010\040\021\041\040\001\002\000\004" +
    "\046\u0103\001\002\000\032\004\061\005\075\006\067\007" +
    "\063\010\066\011\072\030\071\031\064\032\062\046\070" +
    "\057\065\076\073\001\002\000\042\047\u0105\056\105\057" +
    "\101\061\112\062\110\063\111\064\100\070\103\071\115" +
    "\072\102\073\113\074\106\075\104\077\114\100\076\101" +
    "\077\001\002\000\004\051\u0106\001\002\000\034\003\030" +
    "\011\020\012\025\013\005\014\015\022\006\023\041\024" +
    "\031\034\016\036\036\037\010\040\021\041\040\001\002" +
    "\000\036\003\030\011\020\012\025\013\005\014\015\022" +
    "\006\023\041\024\031\034\016\036\036\037\010\040\021" +
    "\041\040\052\u0108\001\002\000\042\002\uffce\003\uffce\011" +
    "\uffce\012\uffce\013\uffce\014\uffce\022\uffce\023\uffce\024\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\052" +
    "\uffce\001\002\000\036\003\030\011\020\012\025\013\005" +
    "\014\015\022\006\023\041\024\031\034\016\036\036\037" +
    "\010\040\021\041\040\052\u010a\001\002\000\040\002\uffd4" +
    "\003\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\034\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\052\uffd4\001\002\000\034\003\030\011\020\012\025\013" +
    "\005\014\015\022\006\023\041\024\031\034\016\036\036" +
    "\037\010\040\021\041\040\001\002\000\036\003\030\011" +
    "\020\012\025\013\005\014\015\022\006\023\041\024\031" +
    "\034\016\036\036\037\010\040\021\041\040\052\u010d\001" +
    "\002\000\040\002\uffd2\003\uffd2\011\uffd2\012\uffd2\013\uffd2" +
    "\014\uffd2\022\uffd2\023\uffd2\024\uffd2\034\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\052\uffd2\001\002\000\032\004\061" +
    "\005\075\006\067\007\063\010\066\011\072\030\071\031" +
    "\064\032\062\046\070\057\065\076\073\001\002\000\042" +
    "\047\u0110\056\105\057\101\061\112\062\110\063\111\064" +
    "\100\070\103\071\115\072\102\073\113\074\106\075\104" +
    "\077\114\100\076\101\077\001\002\000\004\042\u0111\001" +
    "\002\000\040\002\uffea\003\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\022\uffea\023\uffea\024\uffea\034\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\052\uffea\001\002\000\032\004\061" +
    "\005\075\006\067\007\063\010\066\011\072\030\071\031" +
    "\064\032\062\046\070\057\065\076\073\001\002\000\042" +
    "\047\u0114\056\105\057\101\061\112\062\110\063\111\064" +
    "\100\070\103\071\115\072\102\073\113\074\106\075\104" +
    "\077\114\100\076\101\077\001\002\000\004\051\u0115\001" +
    "\002\000\034\003\030\011\020\012\025\013\005\014\015" +
    "\022\006\023\041\024\031\034\016\036\036\037\010\040" +
    "\021\041\040\001\002\000\036\003\030\011\020\012\025" +
    "\013\005\014\015\022\006\023\041\024\031\034\016\036" +
    "\036\037\010\040\021\041\040\052\u0117\001\002\000\040" +
    "\002\uffc3\003\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\034\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\052\uffc3\001\002\000\016\015\u011f\016\u011b\017" +
    "\u011d\020\u011e\021\u011c\022\u0119\001\002\000\004\074\uffb5" +
    "\001\002\000\004\074\u0120\001\002\000\004\074\uffb9\001" +
    "\002\000\004\074\uffb6\001\002\000\004\074\uffb8\001\002" +
    "\000\004\074\uffb7\001\002\000\004\074\uffba\001\002\000" +
    "\004\011\u0121\001\002\000\004\050\u0122\001\002\000\004" +
    "\025\u0123\001\002\000\004\022\u0124\001\002\000\004\046" +
    "\u0125\001\002\000\004\047\u0126\001\002\000\004\042\u0127" +
    "\001\002\000\040\002\uffd9\003\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\022\uffd9\023\uffd9\024\uffd9\034\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\052\uffd9\001\002\000\040\002" +
    "\uffc0\003\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\034\uffc0\036\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\052\uffc0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\052\002\042\003\013\007\003\014\034\015" +
    "\025\016\032\017\012\020\033\021\031\022\036\023\041" +
    "\025\011\026\026\027\023\030\022\031\010\032\006\033" +
    "\021\037\043\040\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\007\231\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\217\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\157\036\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\133\001\001\000\004\036\132" +
    "\001\001\000\004\036\131\001\001\000\004\036\130\001" +
    "\001\000\004\036\127\001\001\000\004\036\126\001\001" +
    "\000\004\036\125\001\001\000\004\036\124\001\001\000" +
    "\004\036\123\001\001\000\002\001\001\000\004\036\122" +
    "\001\001\000\004\036\121\001\001\000\004\036\120\001" +
    "\001\000\004\036\117\001\001\000\004\036\116\001\001" +
    "\000\004\036\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\177\001\001\000" +
    "\006\004\201\036\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\212\006\211\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\223\011\222\036\224" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\235\036\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\230\007\003\014\034\015" +
    "\025\016\032\017\012\020\033\021\031\022\036\023\041" +
    "\025\011\026\026\027\023\030\022\031\010\032\006\033" +
    "\021\037\043\040\016\001\001\000\046\007\231\014\034" +
    "\015\025\016\032\017\012\020\033\021\031\022\036\023" +
    "\041\025\011\026\026\027\023\030\022\031\010\032\006" +
    "\033\021\037\043\040\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\241\007\003\014\034\015\025\016\032\017\012\020\033" +
    "\021\031\022\036\023\041\025\011\026\026\027\023\030" +
    "\022\031\010\032\006\033\021\037\043\040\016\001\001" +
    "\000\046\007\231\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\003\247\007\003\014\034\015" +
    "\025\016\032\017\012\020\033\021\031\022\036\023\041" +
    "\025\011\026\026\027\023\030\022\031\010\032\006\033" +
    "\021\037\043\040\016\001\001\000\046\007\231\014\034" +
    "\015\025\016\032\017\012\020\033\021\031\022\036\023" +
    "\041\025\011\026\026\027\023\030\022\031\010\032\006" +
    "\033\021\037\043\040\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\254\001\001\000\002\001\001" +
    "\000\004\036\255\001\001\000\002\001\001\000\004\024" +
    "\260\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\263\007\003\014\034\015\025\016" +
    "\032\017\012\020\033\021\031\022\036\023\041\025\011" +
    "\026\026\027\023\030\022\031\010\032\006\033\021\037" +
    "\043\040\016\001\001\000\046\007\231\014\034\015\025" +
    "\016\032\017\012\020\033\021\031\022\036\023\041\025" +
    "\011\026\026\027\023\030\022\031\010\032\006\033\021" +
    "\037\043\040\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\270\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\302\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\212\006\314\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\323\007\003\014\034\015\025\016\032\017\012\020\033" +
    "\021\031\022\036\023\041\025\011\026\026\027\023\030" +
    "\022\031\010\032\006\033\021\037\043\040\016\001\001" +
    "\000\046\007\231\014\034\015\025\016\032\017\012\020" +
    "\033\021\031\022\036\023\041\025\011\026\026\027\023" +
    "\030\022\031\010\032\006\033\021\037\043\040\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\346" +
    "\001\001\000\004\036\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\356\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\362\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\003\371\007\003\014\034" +
    "\015\025\016\032\017\012\020\033\021\031\022\036\023" +
    "\041\025\011\026\026\027\023\030\022\031\010\032\006" +
    "\033\021\037\043\040\016\001\001\000\046\007\231\014" +
    "\034\015\025\016\032\017\012\020\033\021\031\022\036" +
    "\023\041\025\011\026\026\027\023\030\022\031\010\032" +
    "\006\033\021\037\043\040\016\001\001\000\006\012\375" +
    "\013\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\377\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\003\u0108\007\003\014\034\015\025\016\032\017" +
    "\012\020\033\021\031\022\036\023\041\025\011\026\026" +
    "\027\023\030\022\031\010\032\006\033\021\037\043\040" +
    "\016\001\001\000\002\001\001\000\004\036\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\u0106\007" +
    "\003\014\034\015\025\016\032\017\012\020\033\021\031" +
    "\022\036\023\041\025\011\026\026\027\023\030\022\031" +
    "\010\032\006\033\021\037\043\040\016\001\001\000\046" +
    "\007\231\014\034\015\025\016\032\017\012\020\033\021" +
    "\031\022\036\023\041\025\011\026\026\027\023\030\022" +
    "\031\010\032\006\033\021\037\043\040\016\001\001\000" +
    "\002\001\001\000\046\007\231\014\034\015\025\016\032" +
    "\017\012\020\033\021\031\022\036\023\041\025\011\026" +
    "\026\027\023\030\022\031\010\032\006\033\021\037\043" +
    "\040\016\001\001\000\002\001\001\000\050\003\u010b\007" +
    "\003\014\034\015\025\016\032\017\012\020\033\021\031" +
    "\022\036\023\041\025\011\026\026\027\023\030\022\031" +
    "\010\032\006\033\021\037\043\040\016\001\001\000\046" +
    "\007\231\014\034\015\025\016\032\017\012\020\033\021" +
    "\031\022\036\023\041\025\011\026\026\027\023\030\022" +
    "\031\010\032\006\033\021\037\043\040\016\001\001\000" +
    "\002\001\001\000\004\036\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\003\u0115" +
    "\007\003\014\034\015\025\016\032\017\012\020\033\021" +
    "\031\022\036\023\041\025\011\026\026\027\023\030\022" +
    "\031\010\032\006\033\021\037\043\040\016\001\001\000" +
    "\046\007\231\014\034\015\025\016\032\017\012\020\033" +
    "\021\031\022\036\023\041\025\011\026\026\027\023\030" +
    "\022\031\010\032\006\033\021\037\043\040\016\001\001" +
    "\000\002\001\001\000\004\035\u0119\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT = a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= IMPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACIONLISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= ASIGNACIONVECTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SIF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SMATCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= CFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= CWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= CDO_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= BREAKK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= CONTINUEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= APPENDD 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= REMOVEE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= error FINCADENA 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= error LLAVE2 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IMPRESION ::= IMPRIMIR PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Print(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRESION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= VAR ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(true, a, b, c , aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, aleft, aright);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= CONST ID DOSPUNTOS TIPOS IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Declaracion(false, a, b, c , aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ASIGNACION ::= ID IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, true, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new DeclaracionVector(a, b, false, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACIONVECTOR ::= VAR ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(true, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACIONVECTOR ::= CONST ID DOSPUNTOS TIPOS CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2 CORCHETE2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> b = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DeclaracionVector(false, a, b, d, aleft, aright);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONVECTOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_1 ::= LISTA_1 COMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_1 ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_2 ::= LISTA_2 COMA AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<LinkedList<Instruccion>> a = (LinkedList<LinkedList<Instruccion>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_2 ::= AGRUPAR_VALORES 
            {
              LinkedList<LinkedList<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_2",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AGRUPAR_VALORES ::= CORCHETE1 LISTA_1 CORCHETE2 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=a;   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AGRUPAR_VALORES",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACIONVECTOR ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 IGUAL EXPRESION FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT=new AsignacionVector(a, b, c, d, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACIONVECTOR",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACIONLISTA ::= LIST MENOR TIPOS_LISTAS MAYOR ID IGUAL NEW LIST PAR1 PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		   RESULT=new DeclaracionLista(b, a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONLISTA",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // APPENDD ::= ID PUNTO APPEND PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT=new AppendLista(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("APPENDD",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // REMOVEE ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REMOVEE",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INCREMENTO ::= ID MAS_MAS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECREMENTO ::= ID MENOS_MENOS FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, c, d, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE_IF_LIST 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Else_> c = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(a, b, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 ELSE LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(b, a, c, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SIF ::= IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new If(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE_IF_LIST ::= ELSE_IF_LIST ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Else_> a = (LinkedList<Else_>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ b = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_IF_LIST ::= ELSE_IF_CLAUSE 
            {
              LinkedList<Else_> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Else_ a = (Else_)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_LIST",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_IF_CLAUSE ::= ELSE IF PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Else_ RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Else_(new Condicion(a, aleft, aright), b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF_CLAUSE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SMATCH ::= MATCH EXPRESION LLAVE1 CASOS_S_S LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> b = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Match(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SMATCH ::= MATCH EXPRESION LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new Match(b, a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SMATCH",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASOS_S_S ::= CASOS_S_S CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Casos> a = (LinkedList<Casos>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos b = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASOS_S_S ::= CASOS_S 
            {
              LinkedList<Casos> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Casos a = (Casos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S_S",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASOS_S ::= EXPRESION IGUAL MAYOR LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Casos RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASOS_S",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CFOR ::= FOR PAR1 ASIGNACION EXPRESION FINCADENA ACTUALIZA_FOR PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new For(a, b, c, d, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CFOR",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ACTUALIZA_FOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   RESULT=new AsignacionVC(a, b, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ACTUALIZA_FOR ::= ID MAS_MAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Incremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ACTUALIZA_FOR ::= ID MENOS_MENOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new Decremento(a, aleft, aright);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACTUALIZA_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CWHILE ::= WHILE PAR1 EXPRESION PAR2 LLAVE1 INSTRUCCIONES LLAVE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   RESULT = new While(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CWHILE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CDO_WHILE ::= DO LLAVE1 INSTRUCCIONES LLAVE2 WHILE PAR1 EXPRESION PAR2 FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		   RESULT = new DoWhile(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CDO_WHILE",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BREAKK ::= BREAK FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Break(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAKK",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTINUEE ::= CONTINUE FINCADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		    RESULT = new Continue(aleft, aright);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUEE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPOS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS_LISTAS ::= INT 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.ENTERO);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS_LISTAS ::= DOUBLE 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.DECIMAL);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TIPOS_LISTAS ::= BOOL 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.BOOLEANO); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TIPOS_LISTAS ::= CHAR 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CARACTER); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TIPOS_LISTAS ::= STRINGG 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.CADENA);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TIPOS_LISTAS ::= LIST 
            {
              Tipo RESULT =null;
		   RESULT=new Tipo(tipoDato.LISTA);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOS_LISTAS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION DOBLE_ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION PORCENTUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION ASTERISCO EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MAS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION IGUAL_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION NOT_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= EXPRESION MENOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= EXPRESION MENOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= EXPRESION MAYOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= EXPRESION MAYOR_IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= PAR1 TIPOS PAR2 EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Casteos(a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // EXPRESION ::= CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // EXPRESION ::= CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // EXPRESION ::= BOOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.valueOf(((String) a).toLowerCase()), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // EXPRESION ::= ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AccesoVC(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // EXPRESION ::= ID CORCHETE1 EXPRESION CORCHETE2 CORCHETE1 EXPRESION CORCHETE2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AccesoVector(a, b, c, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // EXPRESION ::= PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPRESION ::= ID PUNTO REMOVE PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new RemoveLista(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESION ::= ROUND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESION ::= LENGTH PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESION ::= TOSTRING PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ToString(a, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESION ::= ID PUNTO FIND PAR1 EXPRESION PAR2 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Find(a, b, aleft, aright);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
