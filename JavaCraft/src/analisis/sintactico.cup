package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;

//instrucciones
import instrucciones.Print;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;


// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la linea " +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

    public void unrecovered_syntax_error (Symbol s){
        System.out.println("Error Sintactico no recuperable en la linea" +
        (s.left) + " y columna " + (s.right) +
        ". No se esperaba el componente: " + (s.value) + ".");
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, CARACTER, ENTERO, DECIMAL, BOOLEANO;

terminal IMPRIMIR;

terminal FINCADENA, PAR1, PAR2;

terminal MAS, MENOS, UMENOS, DOBLE_ASTERISCO, BARRA, ASTERISCO, PORCENTUAL;

terminal IGUAL, MENOR, MAYOR, NEGACION;
terminal IGUAL_IGUAL, DESIGUAL, MENOR_Q, MAYOR_Q, MENOR_I_Q, MAYOR_I_Q;

terminal PIPE, AMPERSAND, CIRCUNFLEJO;
terminal OR, AND, XOR, NOT;


//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion EXPRESION;

precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUAL_IGUAL, DESIGUAL, MENOR_Q, MENOR_I_Q, MAYOR_Q, MAYOR_I_Q;
precedence left MAS, MENOS;
precedence left ASTERISCO, BARRA, PORCENTUAL;
precedence nonassoc DOBLE_ASTERISCO;
precedence right UMENOS;



start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;

EXPRESION ::= MENOS EXPRESION:a                         {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a DOBLE_ASTERISCO EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :}
            | EXPRESION:a PORCENTUAL EXPRESION:b        {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :}
            | EXPRESION:a ASTERISCO EXPRESION:b         {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :}
            | EXPRESION:a BARRA EXPRESION:b             {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :}
            | EXPRESION:a MAS EXPRESION:b               {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :}
            | EXPRESION:a MENOS EXPRESION:b             {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :}
            
            | EXPRESION:a IGUAL IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); :} %prec IGUAL_IGUAL
            | EXPRESION:a NEGACION IGUAL EXPRESION:b    {: RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); :} %prec DESIGUAL
            | EXPRESION:a MENOR EXPRESION:b             {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); :} %prec MENOR_Q
            | EXPRESION:a MENOR IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); :} %prec MENOR_I_Q
            | EXPRESION:a MAYOR EXPRESION:b             {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); :} %prec MAYOR_Q
            | EXPRESION:a MAYOR IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); :} %prec MAYOR_I_Q

            | EXPRESION:a PIPE PIPE EXPRESION:b         {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :} %prec OR
            |EXPRESION:a AMPERSAND AMPERSAND EXPRESION:b{: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :} %prec AND
            | EXPRESION:a CIRCUNFLEJO EXPRESION:b       {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :} %prec XOR
            | NEGACION EXPRESION:a              {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); :} %prec NOT
            
            | ENTERO:a                                  {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a                                 {: RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a                                  {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
            | CARACTER:a                                {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); :}
            | BOOLEANO:a                                {: RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
;
