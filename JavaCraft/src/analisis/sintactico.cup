package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVC;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}


//terminales
terminal String CADENA, CARACTER, ENTERO, DECIMAL, BOOLEANO, ID, BREAK, CONTINUE;

terminal IMPRIMIR, INT, DOUBLE, BOOL, CHAR, STRINGG, VAR, CONST;

terminal IF, ELSE, FOR, WHILE, DO, MATCH; 

terminal FINCADENA, DOSPUNTOS, PAR1, PAR2, IGUAL, LLAVE1, LLAVE2, GUIONBAJO;

terminal MAS,  MENOS, UMENOS, DIVISION, PORCENTUAL, DOBLE_ASTERISCO, ASTERISCO;

terminal MAS_MAS, MENOS_MENOS, CAS;

terminal IGUAL_IGUAL, NOT_IGUAL, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;

terminal NOT, OR, AND, XOR;

terminal primero, segundo, tercero;


//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal LinkedList<Casos> CASOS_S_S; 
nonterminal Casos CASOS_S;
nonterminal LinkedList<If> ELSE_IF;
nonterminal If ELSE_IF_S;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION, INCREMENTO, DECREMENTO, SIF, CFOR, CWHILE, CDO_WHILE, SMATCH, ACTUALIZA_FOR;
nonterminal Instruccion BREAKK, CONTINUEE;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;

precedence nonassoc tercero;
precedence nonassoc segundo;
precedence nonassoc primero;
precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUAL_IGUAL, NOT_IGUAL, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence right CAS;
precedence left MAS, MENOS;
precedence left ASTERISCO, DIVISION, PORCENTUAL;
precedence nonassoc DOBLE_ASTERISCO;
precedence right UMENOS;



start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;


INSTRUCCION ::= IMPRESION:a         {:   RESULT=a;   :}
                | ASIGNACION:a      {:   RESULT=a;   :}
                | DECLARACION:a     {:   RESULT=a;   :}
                | INCREMENTO:a      {:   RESULT=a;   :}
                | DECREMENTO:a      {:   RESULT=a;   :}
                | SIF:a             {:   RESULT=a;   :}
                | SMATCH:a          {:   RESULT=a;   :}
                | CFOR:a            {:   RESULT=a;   :}
                | CWHILE:a          {:   RESULT=a;   :}
                | CDO_WHILE:a       {:   RESULT=a;   :}
                | BREAKK:a          {:   RESULT=a;   :}
                | CONTINUEE:a       {:   RESULT=a;   :}
                | error FINCADENA
                | error LLAVE2
;


IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVC(a, b, aleft, aright);  :}
;


DECLARACION ::= VAR ID:a DOSPUNTOS TIPOS:b FINCADENA                {:   RESULT = new Declaracion(true, a, b, aleft, aright);       :}
                |VAR ID:a DOSPUNTOS TIPOS:b IGUAL EXPRESION:c FINCADENA   {:   RESULT = new Declaracion(true, a, b, c , aleft, aright);   :}
                |CONST ID:a DOSPUNTOS TIPOS:b FINCADENA             {:   RESULT = new Declaracion(false, a, b, aleft, aright);      :}
                |CONST ID:a DOSPUNTOS TIPOS:b IGUAL EXPRESION:c FINCADENA {:   RESULT = new Declaracion(false, a, b, c , aleft, aright);  :}
;

INCREMENTO ::= ID:a MAS_MAS FINCADENA                               {:   RESULT = new Incremento(a, aleft, aright);  :}
;

DECREMENTO ::= ID:a MENOS_MENOS FINCADENA                           {:   RESULT = new Decremento(a, aleft, aright);  :} 
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE ELSE_IF:c                            {: RESULT = new If(b, c, a, aleft, aright); :}%prec segundo
        |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2    {: RESULT = new If(a, b, c, aleft, aright); :}%prec primero
        |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2                                       {: RESULT = new If(a, b, aleft, aright); :}%prec tercero
;

ELSE_IF ::= ELSE_IF:a ELSE_IF_S:b                                                     {: RESULT = a; RESULT.add(b); :}
          | ELSE_IF_S:a                                                               {: RESULT = new LinkedList<>(); RESULT.add(a); :}  
;

ELSE_IF_S ::=    IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2                                     {: RESULT = new If(a, b, aleft, aright); :}%prec primero
                |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE                                {: RESULT = new If(a, b, aleft, aright); :}%prec segundo
                |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2  {:   RESULT = new If(a, b, c, aleft, aright);   :}
;

SMATCH ::=  MATCH EXPRESION:a LLAVE1 CASOS_S_S:b GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES:c LLAVE2 LLAVE2     {:   RESULT = new Match(a, b, c, aleft, aright);   :}
            |MATCH EXPRESION:a LLAVE1 CASOS_S_S:b LLAVE2                                                        {:   RESULT = new Match(a, b, aleft, aright);   :}
            |MATCH EXPRESION:a LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES:b LLAVE2 LLAVE2                {:   RESULT = new Match(b, a, aleft, aright);   :}
;

CASOS_S_S ::= CASOS_S_S:a CASOS_S:b            {: RESULT = a; RESULT.add(b); :}
            | CASOS_S:a                         {: RESULT = new LinkedList<>(); RESULT.add(a); :}                    
;

CASOS_S ::= EXPRESION:a IGUAL MAYOR LLAVE1 INSTRUCCIONES:b LLAVE2       {:   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       :}
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     {:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVC(a, b, aleft, aright);  :}
                |ID:a MAS_MAS            {:   RESULT = new Incremento(a, aleft, aright);  :}
                |ID:a MENOS_MENOS        {:   RESULT = new Decremento(a, aleft, aright);  :}
;

CWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new While(a, b, aleft, aright);   :}
;

CDO_WHILE ::= DO LLAVE1  INSTRUCCIONES:a LLAVE2 WHILE PAR1 EXPRESION:b PAR2 FINCADENA {:   RESULT = new DoWhile(a, b, aleft, aright);   :}
;

BREAKK ::= BREAK:a FINCADENA      {:    RESULT = new Break(aleft, aright);     :}
;

CONTINUEE ::= CONTINUE:a FINCADENA      {:    RESULT = new Continue(aleft, aright);     :}
;

TIPOS ::=    INT        {:   RESULT=new Tipo(tipoDato.ENTERO);   :}                                       
            |DOUBLE     {:   RESULT=new Tipo(tipoDato.DECIMAL);   :}  
            |BOOL       {:   RESULT=new Tipo(tipoDato.BOOLEANO);   :}  
            |CHAR       {:   RESULT=new Tipo(tipoDato.CARACTER);   :}  
            |STRINGG    {:   RESULT=new Tipo(tipoDato.CADENA);   :}  
;

EXPRESION ::= MENOS EXPRESION:a                         {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a DOBLE_ASTERISCO EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :} %prec DOBLE_ASTERISCO
            | EXPRESION:a PORCENTUAL EXPRESION:b        {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :} %prec PORCENTUAL
            | EXPRESION:a ASTERISCO EXPRESION:b         {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :} %prec ASTERISCO
            | EXPRESION:a DIVISION EXPRESION:b          {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :} %prec DIVISION
            | EXPRESION:a MAS EXPRESION:b               {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :} %prec MAS
            | EXPRESION:a MENOS EXPRESION:b             {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :} %prec MENOS
            
            | EXPRESION:a IGUAL_IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); :} %prec IGUAL_IGUAL
            | EXPRESION:a NOT_IGUAL EXPRESION:b         {: RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); :} %prec NOT_IGUAL
            | EXPRESION:a MENOR EXPRESION:b             {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); :} %prec MENOR
            | EXPRESION:a MENOR_IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); :} %prec MENOR_IGUAL
            | EXPRESION:a MAYOR EXPRESION:b             {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); :} %prec MAYOR
            | EXPRESION:a MAYOR_IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); :} %prec MAYOR_IGUAL
 
            | NOT EXPRESION:a                           {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); :} %prec NOT
            | EXPRESION:a AND EXPRESION:b               {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :} %prec AND
            | EXPRESION:a XOR EXPRESION:b               {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :} %prec XOR
            | EXPRESION:a OR EXPRESION:b                {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :} %prec OR       
            
            |PAR1 TIPOS:a PAR2 EXPRESION:b              {: RESULT = new Casteos(a, b, aleft, aright); :} %prec CAS

            | ENTERO:a                                  {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a                                 {: RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a                                  {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
            | CARACTER:a                                {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); :}
            | BOOLEANO:a                                {: RESULT = new Nativo(a, new Tipo(tipoDato.BOOLEANO), aleft, aright); :}

            | ID:a                                      {: RESULT = new AccesoVC(a, aleft, aright);   :}
            | PAR1 EXPRESION:a PAR2                     {: RESULT = a;    :}
;
