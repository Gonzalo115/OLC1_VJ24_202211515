package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.DeclaracionVector;
import instrucciones.DeclaracionLista;
import instrucciones.AsignacionVC;
import instrucciones.AsignacionVector;
import instrucciones.Incremento;
import instrucciones.Decremento;
import instrucciones.If;
import instrucciones.Else_;
import instrucciones.For;
import instrucciones.While;
import instrucciones.DoWhile;
import instrucciones.Break;
import instrucciones.Continue;
import instrucciones.Match;
import instrucciones.Casos;
import instrucciones.AppendLista;
import instrucciones.Metodo;
import instrucciones.Funcion;
import instrucciones.Start;
import instrucciones.Struct;
import instrucciones.Atributos;
import instrucciones.InstanciarStruct;
import instrucciones.AtributosAux;


//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.Logicos;
import expresiones.OperadoresLogicos;
import expresiones.AccesoVC;
import expresiones.Casteos;
import expresiones.Condicion;
import expresiones.AccesoVector;
import expresiones.RemoveLista;
import expresiones.Round;
import expresiones.Length;
import expresiones.ToString;
import expresiones.Find;
import expresiones.Llamada;
import expresiones.Return;
import expresiones.AccesoStruct;



// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}
    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}


//terminales
terminal String CADENA, CARACTER, ENTERO, DECIMAL, BOOLEANO, ID, BREAK, CONTINUE;

terminal IMPRIMIR, VOID, INT, DOUBLE, BOOL, CHAR, STRINGG, LIST, VAR, CONST, NEW, START_WITH, RETURN;

terminal APPEND, REMOVE, ROUND, LENGTH, TOSTRING, FIND;

terminal IF, ELSE, FOR, WHILE, DO, MATCH, STRUCT; 

terminal FINCADENA, DOSPUNTOS, PUNTO, COMA, PAR1, PAR2, IGUAL, LLAVE1, LLAVE2, CORCHETE1, CORCHETE2, GUIONBAJO;

terminal MAS,  MENOS, UMENOS, DIVISION, PORCENTUAL, DOBLE_ASTERISCO, ASTERISCO;

terminal MAS_MAS, MENOS_MENOS, CAS;

terminal IGUAL_IGUAL, NOT_IGUAL, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;

terminal NOT, OR, AND, XOR;

terminal primero, segundo, tercero, cuarto;

//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES, LISTA_1, AGRUPAR_VALORES;
nonterminal LinkedList<LinkedList<Instruccion>> LISTA_2; 
nonterminal Instruccion INSTRUCCION;
nonterminal LinkedList<Casos> CASOS_S_S; 
nonterminal Casos CASOS_S;
nonterminal LinkedList<Else_> ELSE_IF_LIST;
nonterminal Else_ ELSE_IF_CLAUSE;
nonterminal Instruccion IMPRESION, INCREMENTO, DECREMENTO, SIF, CFOR, CWHILE, CDO_WHILE, SMATCH, ACTUALIZA_FOR;
nonterminal Instruccion DECLARACION, DECLARACIONVECTOR, DECLARACIONLISTA, ASIGNACION, ASIGNACIONVECTOR;
nonterminal Instruccion BREAKK, CONTINUEE, RETURNN;
nonterminal Tipo TIPOS, TIPOS_LISTAS;
nonterminal Instruccion EXPRESION, APPENDD, REMOVEE;
nonterminal Instruccion METODO, FUNCION;
nonterminal LinkedList<HashMap> PARAMS;
nonterminal Instruccion START;
nonterminal LinkedList<Instruccion> PARAMSCALL;
nonterminal Instruccion LLAMADA;
nonterminal Instruccion STRUCTS, INICIALIZACION_STRUCT;
nonterminal HashMap<String, Atributos> LISTA_ATRIBUTOS;
nonterminal HashMap<String, Instruccion> LISTA_VALORES_INICIALIZAR , LISTA_VALORES_VALORES;


precedence nonassoc cuarto;
precedence nonassoc tercero;
precedence nonassoc segundo;
precedence nonassoc primero;
precedence left OR;
precedence left AND;
precedence left XOR;
precedence right NOT;
precedence left IGUAL_IGUAL, NOT_IGUAL, MENOR, MENOR_IGUAL, MAYOR, MAYOR_IGUAL;
precedence right CAS;
precedence left MAS, MENOS;
precedence left ASTERISCO, DIVISION, PORCENTUAL;
precedence nonassoc DOBLE_ASTERISCO;
precedence right UMENOS;



start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                     {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;
              

INSTRUCCION ::= IMPRESION:a             {:   RESULT=a;   :}
                | DECLARACION:a         {:   RESULT=a;   :}
                | DECLARACIONVECTOR:a   {:   RESULT=a;   :}
                | DECLARACIONLISTA:a    {:   RESULT=a;   :}
                | ASIGNACION:a          {:   RESULT=a;   :} 
                | ASIGNACIONVECTOR:a    {:   RESULT=a;   :}              
                | INCREMENTO:a          {:   RESULT=a;   :}
                | DECREMENTO:a          {:   RESULT=a;   :}
                | SIF:a                 {:   RESULT=a;   :}
                | SMATCH:a              {:   RESULT=a;   :}
                | CFOR:a                {:   RESULT=a;   :}
                | CWHILE:a              {:   RESULT=a;   :}
                | CDO_WHILE:a           {:   RESULT=a;   :}
                | BREAKK:a              {:   RESULT=a;   :}
                | CONTINUEE:a           {:   RESULT=a;   :}
                | APPENDD:a             {:   RESULT=a;   :}
                | REMOVEE:a             {:   RESULT=a;   :}
                | METODO:a              {:   RESULT=a;   :}
                | FUNCION:a             {:   RESULT=a;   :}
                | STRUCTS:a             {:   RESULT=a;   :}
                | START:a               {:   RESULT=a;   :}
                | LLAMADA:a             {:   RESULT=a;   :}
                | RETURNN:a             {:   RESULT=a;   :}
                | INICIALIZACION_STRUCT:a  {:   RESULT=a;   :} 
                | error FINCADENA
                | error LLAVE2
;


IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;

DECLARACION ::= VAR ID:a DOSPUNTOS TIPOS:b FINCADENA                        {:   RESULT = new Declaracion(true, a, b, aleft, aright);       :}
                |VAR ID:a DOSPUNTOS TIPOS:b IGUAL EXPRESION:c FINCADENA     {:   RESULT = new Declaracion(true, a, b, c , aleft, aright);   :}
                |CONST ID:a DOSPUNTOS TIPOS:b FINCADENA                     {:   RESULT = new Declaracion(false, a, b, aleft, aright);      :}
                |CONST ID:a DOSPUNTOS TIPOS:b IGUAL EXPRESION:c FINCADENA   {:   RESULT = new Declaracion(false, a, b, c , aleft, aright);  :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVC(a, b, aleft, aright);  :}
;


DECLARACIONVECTOR ::=   VAR ID:a DOSPUNTOS TIPOS:d CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES:b FINCADENA                                    {:   RESULT = new DeclaracionVector(a, b, true, d, aleft, aright);    :}
                        |CONST ID:a DOSPUNTOS TIPOS:d CORCHETE1 CORCHETE2 IGUAL AGRUPAR_VALORES:b  FINCADENA                                {:   RESULT = new DeclaracionVector(a, b, false, d, aleft, aright);    :}
                        |VAR ID:a DOSPUNTOS TIPOS:d CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2:b CORCHETE2 FINCADENA   {:   RESULT = new DeclaracionVector(true, a, b, d, aleft, aright);    :}
                        |CONST ID:a DOSPUNTOS TIPOS:d CORCHETE1 CORCHETE2 CORCHETE1 CORCHETE2 IGUAL CORCHETE1 LISTA_2:b CORCHETE2 FINCADENA {:   RESULT = new DeclaracionVector(false, a, b, d, aleft, aright);    :}

;

LISTA_1 ::= LISTA_1:a COMA EXPRESION:b      {: RESULT = a; RESULT.add(b); :}
            |EXPRESION:a                    {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

LISTA_2 ::= LISTA_2:a COMA AGRUPAR_VALORES:b      {: RESULT = a; RESULT.add(b); :}
            |AGRUPAR_VALORES:a                    {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

AGRUPAR_VALORES ::= CORCHETE1 LISTA_1:a CORCHETE2   {:   RESULT=a;   :}
;

ASIGNACIONVECTOR ::= ID:a CORCHETE1 EXPRESION:b CORCHETE2 IGUAL EXPRESION:c FINCADENA                                   {:   RESULT=new AsignacionVector(a, b, c, aleft, aright);  :}
                    |ID:a CORCHETE1 EXPRESION:b CORCHETE2 CORCHETE1 EXPRESION:c CORCHETE2 IGUAL EXPRESION:d FINCADENA   {:   RESULT=new AsignacionVector(a, b, c, d, aleft, aright);  :}
;

DECLARACIONLISTA ::= LIST MENOR TIPOS_LISTAS:a MAYOR ID:b IGUAL NEW LIST PAR1 PAR2 FINCADENA    {:   RESULT=new DeclaracionLista(b, a, aleft, aright);  :}
;

APPENDD ::= ID:a PUNTO APPEND PAR1 EXPRESION:b PAR2 FINCADENA       {:   RESULT=new AppendLista(a, b, aleft, aright);  :}
;

REMOVEE ::= ID:a PUNTO REMOVE PAR1 EXPRESION:b PAR2 FINCADENA        {: RESULT = new RemoveLista(a, b, aleft, aright);   :} 
;

INCREMENTO ::= ID:a MAS_MAS FINCADENA                               {:   RESULT = new Incremento(a, aleft, aright);  :}
;

DECREMENTO ::= ID:a MENOS_MENOS FINCADENA                           {:   RESULT = new Decremento(a, aleft, aright);  :} 
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE_IF_LIST:c ELSE LLAVE1 INSTRUCCIONES:d LLAVE2     {: RESULT = new If(a, b, c, d, aleft, aright); :}%prec primero
    |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE_IF_LIST:c                                           {: RESULT = new If(a, b, c, aleft, aright); :}%prec segundo
    |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 ELSE LLAVE1 INSTRUCCIONES:c LLAVE2                       {: RESULT = new If(b, a, c, aleft, aright); :}%prec tercero
    |IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2                                                          {: RESULT = new If(a, b, aleft, aright); :}%prec cuarto
;

ELSE_IF_LIST ::= ELSE_IF_LIST:a ELSE_IF_CLAUSE:b        {: RESULT = a; RESULT.add(b); :}
               | ELSE_IF_CLAUSE:a                       {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

ELSE_IF_CLAUSE ::= ELSE IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2 {: RESULT = new Else_(new Condicion(a, aleft, aright), b, aleft, aright); :}
;

SMATCH ::=  MATCH EXPRESION:a LLAVE1 CASOS_S_S:b GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES:c LLAVE2 LLAVE2     {:   RESULT = new Match(a, b, c, aleft, aright);   :}
            |MATCH EXPRESION:a LLAVE1 CASOS_S_S:b LLAVE2                                                        {:   RESULT = new Match(a, b, aleft, aright);   :}
            |MATCH EXPRESION:a LLAVE1 GUIONBAJO IGUAL MAYOR LLAVE1 INSTRUCCIONES:b LLAVE2 LLAVE2                {:   RESULT = new Match(b, a, aleft, aright);   :}
;

CASOS_S_S ::= CASOS_S_S:a CASOS_S:b            {: RESULT = a; RESULT.add(b); :}
            | CASOS_S:a                         {: RESULT = new LinkedList<>(); RESULT.add(a); :}                    
;

CASOS_S ::= EXPRESION:a IGUAL MAYOR LLAVE1 INSTRUCCIONES:b LLAVE2       {:   RESULT = new Casos( new Condicion(a, aleft, aright), b, aleft, aright);       :}
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     {:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVC(a, b, aleft, aright);  :}
                |ID:a MAS_MAS            {:   RESULT = new Incremento(a, aleft, aright);  :}
                |ID:a MENOS_MENOS        {:   RESULT = new Decremento(a, aleft, aright);  :}
;

CWHILE ::= WHILE PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new While(a, b, aleft, aright);   :}
;

CDO_WHILE ::= DO LLAVE1  INSTRUCCIONES:a LLAVE2 WHILE PAR1 EXPRESION:b PAR2 FINCADENA {:   RESULT = new DoWhile(a, b, aleft, aright);   :}
;

BREAKK ::= BREAK:a FINCADENA            {:    RESULT = new Break(aleft, aright);     :}
;

CONTINUEE ::= CONTINUE:a FINCADENA      {:    RESULT = new Continue(aleft, aright);     :}
;

RETURNN ::= RETURN:a FINCADENA                {:    RESULT = new Return(aleft, aright);       :}     
            |RETURN EXPRESION:a FINCADENA   {:    RESULT = new Return(a, aleft, aright);    :}        
;

METODO ::=  VOID ID:a PAR1 PARAMS:c PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2   {:   RESULT=new Metodo(a, b, c, aleft, aright );   :}
            |VOID ID:a PAR1 PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2              {:   RESULT=new Metodo(a, b, new LinkedList<HashMap>(), aleft, aright );   :}
;

FUNCION ::=  TIPOS:t ID:a PAR1 PARAMS:c PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2   {:   RESULT=new Funcion(a, b, c, t, aleft, aright );   :}
            |TIPOS:t ID:a PAR1 PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2              {:   RESULT=new Funcion(a, b, new LinkedList<HashMap>(), t, aleft, aright );   :}
;


PARAMS ::= PARAMS:a COMA TIPOS:b ID:c   {:  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        :}
        | TIPOS:a ID:b                  {:  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        :}
;

STRUCTS ::= STRUCT LLAVE1 LISTA_ATRIBUTOS:b LLAVE2 ID:a FINCADENA       {:      RESULT = new Struct(a, b, aleft, aright );       :}      
;

LISTA_ATRIBUTOS ::= LISTA_ATRIBUTOS:a ID:b DOSPUNTOS TIPOS:c FINCADENA    {:  RESULT = a;   
                                                                            RESULT.put(b, new Atributos(b, c, aleft, aright));
                                                                        :}
                    |LISTA_ATRIBUTOS:a ID:b DOSPUNTOS ID:c FINCADENA    {:  RESULT = a;   
                                                                            RESULT.put(b, new Atributos(b, c, aleft, aright));
                                                                        :}

                    |ID:a DOSPUNTOS TIPOS:b FINCADENA                   {:  RESULT = new HashMap<String, Atributos>(); 
                                                                            RESULT.put(a, new Atributos(a, b, aleft, aright));
                                                                        :}
                    |ID:a DOSPUNTOS ID:b FINCADENA                      {:  RESULT = new HashMap<String, Atributos>(); 
                                                                            RESULT.put(a, new Atributos(a, b, aleft, aright));
                                                                        :}
;


INICIALIZACION_STRUCT ::= VAR ID:a DOSPUNTOS ID:b IGUAL LLAVE1 LISTA_VALORES_INICIALIZAR:c LLAVE2 FINCADENA     {:      RESULT = new InstanciarStruct(a, b, true, c, aleft, aright );       :}     
                        | CONST ID:a DOSPUNTOS ID:b IGUAL LLAVE1 LISTA_VALORES_INICIALIZAR:c LLAVE2 FINCADENA   {:      RESULT = new InstanciarStruct(a, b, false, c, aleft, aright );       :}
;

LISTA_VALORES_INICIALIZAR ::= LISTA_VALORES_INICIALIZAR:a COMA ID:b DOSPUNTOS EXPRESION:c                                   {:  RESULT = a;   
                                                                                                                                RESULT.put(b, c);
                                                                                                                            :}
                            |LISTA_VALORES_INICIALIZAR:a COMA ID:b DOSPUNTOS LLAVE1 LISTA_VALORES_VALORES:c LLAVE2       {:  RESULT = a;   
                                                                                                                                RESULT.put(b, new AtributosAux(b, c, aleft, aright));
                                                                                                                            :}
                            |ID:a DOSPUNTOS EXPRESION:b                                                                     {:  RESULT = new HashMap<String, Instruccion>(); 
                                                                                                                                RESULT.put(a, b);
                                                                                                                            :}
                            |ID:a DOSPUNTOS LLAVE1 LISTA_VALORES_VALORES:b LLAVE2                                       {:  RESULT = new HashMap<String, Instruccion>(); 
                                                                                                                                RESULT.put(a, new AtributosAux(a, b, aleft, aright));
                                                                                                                            :}

; 



LISTA_VALORES_VALORES ::= LISTA_VALORES_VALORES:a COMA ID:b DOSPUNTOS EXPRESION:c                {:  RESULT = a;   
                                                                                                    RESULT.put(b, c);
                                                                                                :}                
                        | ID:a DOSPUNTOS EXPRESION:b                                            {:  RESULT = new HashMap<String, Instruccion>(); 
                                                                                                    RESULT.put(a, b);
                                                                                                :}
;

START ::=  START_WITH ID:a PAR1 PARAMSCALL:b PAR2 FINCADENA     {:   RESULT = new Start(a, b, aleft, aright );   :}
            | START_WITH ID:a PAR1 PAR2 FINCADENA                  {:   RESULT = new Start(a, new LinkedList<Instruccion>(), aleft, aright );   :}
;

LLAMADA ::= ID:a PAR1 PARAMSCALL:b PAR2 FINCADENA               {:  RESULT= new Llamada(a, b, aleft, aright);    :}
          | ID:a PAR1 PAR2 FINCADENA                            {:  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    :}    
;

PARAMSCALL ::= PARAMSCALL:a COMA EXPRESION:e    {:  RESULT = a;
                                                    RESULT.add(e);
                                                :}
            | EXPRESION:a                       {:  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                :}
;


TIPOS ::=   INT         {:   RESULT=new Tipo(tipoDato.ENTERO);      :}                                      
            |DOUBLE     {:   RESULT=new Tipo(tipoDato.DECIMAL);     :}  
            |BOOL       {:   RESULT=new Tipo(tipoDato.BOOLEANO);    :}  
            |CHAR       {:   RESULT=new Tipo(tipoDato.CARACTER);    :}  
            |STRINGG    {:   RESULT=new Tipo(tipoDato.CADENA);      :}  
;

TIPOS_LISTAS ::=    INT        {:   RESULT=new Tipo(tipoDato.ENTERO);   :}                                       
                    |DOUBLE    {:   RESULT=new Tipo(tipoDato.DECIMAL);  :}  
                    |BOOL      {:   RESULT=new Tipo(tipoDato.BOOLEANO); :}  
                    |CHAR      {:   RESULT=new Tipo(tipoDato.CARACTER); :}  
                    |STRINGG   {:   RESULT=new Tipo(tipoDato.CADENA);   :}
                    |LIST      {:   RESULT=new Tipo(tipoDato.LISTA);    :} 
;

EXPRESION ::= MENOS EXPRESION:a                         {: RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright); :} %prec UMENOS
            | EXPRESION:a DOBLE_ASTERISCO EXPRESION:b   {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.POTENCIA, aleft, aright); :} %prec DOBLE_ASTERISCO
            | EXPRESION:a PORCENTUAL EXPRESION:b        {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MODULO, aleft, aright); :} %prec PORCENTUAL
            | EXPRESION:a ASTERISCO EXPRESION:b         {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.MULTIPLICACION, aleft, aright); :} %prec ASTERISCO
            | EXPRESION:a DIVISION EXPRESION:b          {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.DIVISION, aleft, aright); :} %prec DIVISION
            | EXPRESION:a MAS EXPRESION:b               {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright); :} %prec MAS
            | EXPRESION:a MENOS EXPRESION:b             {: RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.RESTA, aleft, aright); :} %prec MENOS
            
            | EXPRESION:a IGUAL_IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL, aleft, aright); :} %prec IGUAL_IGUAL
            | EXPRESION:a NOT_IGUAL EXPRESION:b         {: RESULT = new Relacionales(a, b, OperadoresRelacionales.NOIGUAL, aleft, aright); :} %prec NOT_IGUAL
            | EXPRESION:a MENOR EXPRESION:b             {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright); :} %prec MENOR
            | EXPRESION:a MENOR_IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MENOR, aleft, aright); :} %prec MENOR_IGUAL
            | EXPRESION:a MAYOR EXPRESION:b             {: RESULT = new Relacionales(a, b, OperadoresRelacionales.MAYOR, aleft, aright); :} %prec MAYOR
            | EXPRESION:a MAYOR_IGUAL EXPRESION:b       {: RESULT = new Relacionales(a, b, OperadoresRelacionales.IGUAL_MAYOR, aleft, aright); :} %prec MAYOR_IGUAL
 
            | NOT EXPRESION:a                           {: RESULT = new Logicos(a, OperadoresLogicos.NOT, aleft, aright); :} %prec NOT
            | EXPRESION:a AND EXPRESION:b               {: RESULT = new Logicos(a, b, OperadoresLogicos.AND, aleft, aright); :} %prec AND
            | EXPRESION:a XOR EXPRESION:b               {: RESULT = new Logicos(a, b, OperadoresLogicos.XOR, aleft, aright); :} %prec XOR
            | EXPRESION:a OR EXPRESION:b                {: RESULT = new Logicos(a, b, OperadoresLogicos.OR, aleft, aright); :} %prec OR       
            
            |PAR1 TIPOS:a PAR2 EXPRESION:b              {: RESULT = new Casteos(a, b, aleft, aright); :} %prec CAS

            | ENTERO:a                                  {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
            | DECIMAL:a                                 {: RESULT = new Nativo(Double.parseDouble(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
            | CADENA:a                                  {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
            | CARACTER:a                                {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); :}
            | BOOLEANO:a                                {: RESULT = new Nativo(Boolean.valueOf(((String) a).toLowerCase()), new Tipo(tipoDato.BOOLEANO), aleft, aright); :}

           
            | LENGTH PAR1 EXPRESION:a PAR2              {: RESULT = new Length(a, aleft, aright);   :}

            | ID:a                                      {: RESULT = new AccesoVC(a, aleft, aright);   :}

            | ID:a CORCHETE1 EXPRESION:b CORCHETE2      {: RESULT = new AccesoVector(a, b, aleft, aright);   :}
            | ID:a CORCHETE1 EXPRESION:b CORCHETE2 
                   CORCHETE1 EXPRESION:c CORCHETE2      {: RESULT = new AccesoVector(a, b, c, aleft, aright);   :}

            | PAR1 EXPRESION:a PAR2                     {: RESULT = a;    :}

            | ID:a PUNTO REMOVE PAR1 EXPRESION:b PAR2   {: RESULT = new RemoveLista(a, b, aleft, aright);   :}    

            | ROUND PAR1 EXPRESION:a PAR2               {: RESULT = new Round(a, aleft, aright);   :}   

            
            | TOSTRING PAR1 EXPRESION:a PAR2            {: RESULT = new ToString(a, aleft, aright);   :}
            | ID:a PUNTO FIND PAR1 EXPRESION:b PAR2     {: RESULT = new Find(a, b, aleft, aright);   :}


            |ID:a PAR1 PARAMSCALL:b PAR2      {:  RESULT= new Llamada(a, b, aleft, aright);    :}
            |ID:a PAR1 PAR2                   {:  RESULT= new Llamada(a, new LinkedList<Instruccion>(), aleft, aright);    :}


            | ID:a PUNTO ID:b PUNTO ID:c                  {:  RESULT= new AccesoStruct(a, b, c, aleft, aright);    :}
            | ID:a PUNTO ID:b                             {:  RESULT= new AccesoStruct(a, b, aleft, aright);    :}

            
;
